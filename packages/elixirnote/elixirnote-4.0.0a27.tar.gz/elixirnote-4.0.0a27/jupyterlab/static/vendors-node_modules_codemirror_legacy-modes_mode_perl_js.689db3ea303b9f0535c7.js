"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["vendors-node_modules_codemirror_legacy-modes_mode_perl_js"],{

/***/ "./node_modules/@codemirror/legacy-modes/mode/perl.js":
/*!************************************************************!*\
  !*** ./node_modules/@codemirror/legacy-modes/mode/perl.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "perl": () => (/* binding */ perl)
/* harmony export */ });

// it's like "peek", but need for look-ahead or look-behind if index < 0
function look(stream, c){
  return stream.string.charAt(stream.pos+(c||0));
}

// return a part of prefix of current stream from current position
function prefix(stream, c){
  if(c){
    var x=stream.pos-c;
    return stream.string.substr((x>=0?x:0),c);}
  else{
    return stream.string.substr(0,stream.pos-1);
  }
}

// return a part of suffix of current stream from current position
function suffix(stream, c){
  var y=stream.string.length;
  var x=y-stream.pos+1;
  return stream.string.substr(stream.pos,(c&&c<y?c:x));
}

// eating and vomiting a part of stream from current position
function eatSuffix(stream, c){
  var x=stream.pos+c;
  var y;
  if(x<=0)
    stream.pos=0;
  else if(x>=(y=stream.string.length-1))
    stream.pos=y;
  else
    stream.pos=x;
}

// http://perldoc.perl.org
var PERL={                                      //   null - magic touch
  //   1 - keyword
  //   2 - def
  //   3 - atom
  //   4 - operator
  //   5 - builtin (predefined)
  //   [x,y] - x=1,2,3; y=must be defined if x{...}
  //      PERL operators
  '->':   4,
  '++':   4,
  '--':   4,
  '**':   4,
  //   ! ~ \ and unary + and -
  '=~':   4,
  '!~':   4,
  '*':   4,
  '/':   4,
  '%':   4,
  'x':   4,
  '+':   4,
  '-':   4,
  '.':   4,
  '<<':   4,
  '>>':   4,
  //   named unary operators
  '<':   4,
  '>':   4,
  '<=':   4,
  '>=':   4,
  'lt':   4,
  'gt':   4,
  'le':   4,
  'ge':   4,
  '==':   4,
  '!=':   4,
  '<=>':   4,
  'eq':   4,
  'ne':   4,
  'cmp':   4,
  '~~':   4,
  '&':   4,
  '|':   4,
  '^':   4,
  '&&':   4,
  '||':   4,
  '//':   4,
  '..':   4,
  '...':   4,
  '?':   4,
  ':':   4,
  '=':   4,
  '+=':   4,
  '-=':   4,
  '*=':   4,  //   etc. ???
  ',':   4,
  '=>':   4,
  '::':   4,
  //   list operators (rightward)
  'not':   4,
  'and':   4,
  'or':   4,
  'xor':   4,
  //      PERL predefined variables (I know, what this is a paranoid idea, but may be needed for people, who learn PERL, and for me as well, ...and may be for you?;)
  'BEGIN':   [5,1],
  'END':   [5,1],
  'PRINT':   [5,1],
  'PRINTF':   [5,1],
  'GETC':   [5,1],
  'READ':   [5,1],
  'READLINE':   [5,1],
  'DESTROY':   [5,1],
  'TIE':   [5,1],
  'TIEHANDLE':   [5,1],
  'UNTIE':   [5,1],
  'STDIN':    5,
  'STDIN_TOP':    5,
  'STDOUT':    5,
  'STDOUT_TOP':    5,
  'STDERR':    5,
  'STDERR_TOP':    5,
  '$ARG':    5,
  '$_':    5,
  '@ARG':    5,
  '@_':    5,
  '$LIST_SEPARATOR':    5,
  '$"':    5,
  '$PROCESS_ID':    5,
  '$PID':    5,
  '$$':    5,
  '$REAL_GROUP_ID':    5,
  '$GID':    5,
  '$(':    5,
  '$EFFECTIVE_GROUP_ID':    5,
  '$EGID':    5,
  '$)':    5,
  '$PROGRAM_NAME':    5,
  '$0':    5,
  '$SUBSCRIPT_SEPARATOR':    5,
  '$SUBSEP':    5,
  '$;':    5,
  '$REAL_USER_ID':    5,
  '$UID':    5,
  '$<':    5,
  '$EFFECTIVE_USER_ID':    5,
  '$EUID':    5,
  '$>':    5,
  '$a':    5,
  '$b':    5,
  '$COMPILING':    5,
  '$^C':    5,
  '$DEBUGGING':    5,
  '$^D':    5,
  '${^ENCODING}':    5,
  '$ENV':    5,
  '%ENV':    5,
  '$SYSTEM_FD_MAX':    5,
  '$^F':    5,
  '@F':    5,
  '${^GLOBAL_PHASE}':    5,
  '$^H':    5,
  '%^H':    5,
  '@INC':    5,
  '%INC':    5,
  '$INPLACE_EDIT':    5,
  '$^I':    5,
  '$^M':    5,
  '$OSNAME':    5,
  '$^O':    5,
  '${^OPEN}':    5,
  '$PERLDB':    5,
  '$^P':    5,
  '$SIG':    5,
  '%SIG':    5,
  '$BASETIME':    5,
  '$^T':    5,
  '${^TAINT}':    5,
  '${^UNICODE}':    5,
  '${^UTF8CACHE}':    5,
  '${^UTF8LOCALE}':    5,
  '$PERL_VERSION':    5,
  '$^V':    5,
  '${^WIN32_SLOPPY_STAT}':    5,
  '$EXECUTABLE_NAME':    5,
  '$^X':    5,
  '$1':    5, // - regexp $1, $2...
  '$MATCH':    5,
  '$&':    5,
  '${^MATCH}':    5,
  '$PREMATCH':    5,
  '$`':    5,
  '${^PREMATCH}':    5,
  '$POSTMATCH':    5,
  "$'":    5,
  '${^POSTMATCH}':    5,
  '$LAST_PAREN_MATCH':    5,
  '$+':    5,
  '$LAST_SUBMATCH_RESULT':    5,
  '$^N':    5,
  '@LAST_MATCH_END':    5,
  '@+':    5,
  '%LAST_PAREN_MATCH':    5,
  '%+':    5,
  '@LAST_MATCH_START':    5,
  '@-':    5,
  '%LAST_MATCH_START':    5,
  '%-':    5,
  '$LAST_REGEXP_CODE_RESULT':    5,
  '$^R':    5,
  '${^RE_DEBUG_FLAGS}':    5,
  '${^RE_TRIE_MAXBUF}':    5,
  '$ARGV':    5,
  '@ARGV':    5,
  'ARGV':    5,
  'ARGVOUT':    5,
  '$OUTPUT_FIELD_SEPARATOR':    5,
  '$OFS':    5,
  '$,':    5,
  '$INPUT_LINE_NUMBER':    5,
  '$NR':    5,
  '$.':    5,
  '$INPUT_RECORD_SEPARATOR':    5,
  '$RS':    5,
  '$/':    5,
  '$OUTPUT_RECORD_SEPARATOR':    5,
  '$ORS':    5,
  '$\\':    5,
  '$OUTPUT_AUTOFLUSH':    5,
  '$|':    5,
  '$ACCUMULATOR':    5,
  '$^A':    5,
  '$FORMAT_FORMFEED':    5,
  '$^L':    5,
  '$FORMAT_PAGE_NUMBER':    5,
  '$%':    5,
  '$FORMAT_LINES_LEFT':    5,
  '$-':    5,
  '$FORMAT_LINE_BREAK_CHARACTERS':    5,
  '$:':    5,
  '$FORMAT_LINES_PER_PAGE':    5,
  '$=':    5,
  '$FORMAT_TOP_NAME':    5,
  '$^':    5,
  '$FORMAT_NAME':    5,
  '$~':    5,
  '${^CHILD_ERROR_NATIVE}':    5,
  '$EXTENDED_OS_ERROR':    5,
  '$^E':    5,
  '$EXCEPTIONS_BEING_CAUGHT':    5,
  '$^S':    5,
  '$WARNING':    5,
  '$^W':    5,
  '${^WARNING_BITS}':    5,
  '$OS_ERROR':    5,
  '$ERRNO':    5,
  '$!':    5,
  '%OS_ERROR':    5,
  '%ERRNO':    5,
  '%!':    5,
  '$CHILD_ERROR':    5,
  '$?':    5,
  '$EVAL_ERROR':    5,
  '$@':    5,
  '$OFMT':    5,
  '$#':    5,
  '$*':    5,
  '$ARRAY_BASE':    5,
  '$[':    5,
  '$OLD_PERL_VERSION':    5,
  '$]':    5,
  //      PERL blocks
  'if':[1,1],
  elsif:[1,1],
  'else':[1,1],
  'while':[1,1],
  unless:[1,1],
  'for':[1,1],
  foreach:[1,1],
  //      PERL functions
  'abs':1,     // - absolute value function
  accept:1,     // - accept an incoming socket connect
  alarm:1,     // - schedule a SIGALRM
  'atan2':1,     // - arctangent of Y/X in the range -PI to PI
  bind:1,     // - binds an address to a socket
  binmode:1,     // - prepare binary files for I/O
  bless:1,     // - create an object
  bootstrap:1,     //
  'break':1,     // - break out of a "given" block
  caller:1,     // - get context of the current subroutine call
  chdir:1,     // - change your current working directory
  chmod:1,     // - changes the permissions on a list of files
  chomp:1,     // - remove a trailing record separator from a string
  chop:1,     // - remove the last character from a string
  chown:1,     // - change the ownership on a list of files
  chr:1,     // - get character this number represents
  chroot:1,     // - make directory new root for path lookups
  close:1,     // - close file (or pipe or socket) handle
  closedir:1,     // - close directory handle
  connect:1,     // - connect to a remote socket
  'continue':[1,1], // - optional trailing block in a while or foreach
  'cos':1,     // - cosine function
  crypt:1,     // - one-way passwd-style encryption
  dbmclose:1,     // - breaks binding on a tied dbm file
  dbmopen:1,     // - create binding on a tied dbm file
  'default':1,     //
  defined:1,     // - test whether a value, variable, or function is defined
  'delete':1,     // - deletes a value from a hash
  die:1,     // - raise an exception or bail out
  'do':1,     // - turn a BLOCK into a TERM
  dump:1,     // - create an immediate core dump
  each:1,     // - retrieve the next key/value pair from a hash
  endgrent:1,     // - be done using group file
  endhostent:1,     // - be done using hosts file
  endnetent:1,     // - be done using networks file
  endprotoent:1,     // - be done using protocols file
  endpwent:1,     // - be done using passwd file
  endservent:1,     // - be done using services file
  eof:1,     // - test a filehandle for its end
  'eval':1,     // - catch exceptions or compile and run code
  'exec':1,     // - abandon this program to run another
  exists:1,     // - test whether a hash key is present
  exit:1,     // - terminate this program
  'exp':1,     // - raise I to a power
  fcntl:1,     // - file control system call
  fileno:1,     // - return file descriptor from filehandle
  flock:1,     // - lock an entire file with an advisory lock
  fork:1,     // - create a new process just like this one
  format:1,     // - declare a picture format with use by the write() function
  formline:1,     // - internal function used for formats
  getc:1,     // - get the next character from the filehandle
  getgrent:1,     // - get next group record
  getgrgid:1,     // - get group record given group user ID
  getgrnam:1,     // - get group record given group name
  gethostbyaddr:1,     // - get host record given its address
  gethostbyname:1,     // - get host record given name
  gethostent:1,     // - get next hosts record
  getlogin:1,     // - return who logged in at this tty
  getnetbyaddr:1,     // - get network record given its address
  getnetbyname:1,     // - get networks record given name
  getnetent:1,     // - get next networks record
  getpeername:1,     // - find the other end of a socket connection
  getpgrp:1,     // - get process group
  getppid:1,     // - get parent process ID
  getpriority:1,     // - get current nice value
  getprotobyname:1,     // - get protocol record given name
  getprotobynumber:1,     // - get protocol record numeric protocol
  getprotoent:1,     // - get next protocols record
  getpwent:1,     // - get next passwd record
  getpwnam:1,     // - get passwd record given user login name
  getpwuid:1,     // - get passwd record given user ID
  getservbyname:1,     // - get services record given its name
  getservbyport:1,     // - get services record given numeric port
  getservent:1,     // - get next services record
  getsockname:1,     // - retrieve the sockaddr for a given socket
  getsockopt:1,     // - get socket options on a given socket
  given:1,     //
  glob:1,     // - expand filenames using wildcards
  gmtime:1,     // - convert UNIX time into record or string using Greenwich time
  'goto':1,     // - create spaghetti code
  grep:1,     // - locate elements in a list test true against a given criterion
  hex:1,     // - convert a string to a hexadecimal number
  'import':1,     // - patch a module's namespace into your own
  index:1,     // - find a substring within a string
  'int':1,     // - get the integer portion of a number
  ioctl:1,     // - system-dependent device control system call
  'join':1,     // - join a list into a string using a separator
  keys:1,     // - retrieve list of indices from a hash
  kill:1,     // - send a signal to a process or process group
  last:1,     // - exit a block prematurely
  lc:1,     // - return lower-case version of a string
  lcfirst:1,     // - return a string with just the next letter in lower case
  length:1,     // - return the number of bytes in a string
  'link':1,     // - create a hard link in the filesystem
  listen:1,     // - register your socket as a server
  local: 2,    // - create a temporary value for a global variable (dynamic scoping)
  localtime:1,     // - convert UNIX time into record or string using local time
  lock:1,     // - get a thread lock on a variable, subroutine, or method
  'log':1,     // - retrieve the natural logarithm for a number
  lstat:1,     // - stat a symbolic link
  m:null,  // - match a string with a regular expression pattern
  map:1,     // - apply a change to a list to get back a new list with the changes
  mkdir:1,     // - create a directory
  msgctl:1,     // - SysV IPC message control operations
  msgget:1,     // - get SysV IPC message queue
  msgrcv:1,     // - receive a SysV IPC message from a message queue
  msgsnd:1,     // - send a SysV IPC message to a message queue
  my: 2,    // - declare and assign a local variable (lexical scoping)
  'new':1,     //
  next:1,     // - iterate a block prematurely
  no:1,     // - unimport some module symbols or semantics at compile time
  oct:1,     // - convert a string to an octal number
  open:1,     // - open a file, pipe, or descriptor
  opendir:1,     // - open a directory
  ord:1,     // - find a character's numeric representation
  our: 2,    // - declare and assign a package variable (lexical scoping)
  pack:1,     // - convert a list into a binary representation
  'package':1,     // - declare a separate global namespace
  pipe:1,     // - open a pair of connected filehandles
  pop:1,     // - remove the last element from an array and return it
  pos:1,     // - find or set the offset for the last/next m//g search
  print:1,     // - output a list to a filehandle
  printf:1,     // - output a formatted list to a filehandle
  prototype:1,     // - get the prototype (if any) of a subroutine
  push:1,     // - append one or more elements to an array
  q:null,  // - singly quote a string
  qq:null,  // - doubly quote a string
  qr:null,  // - Compile pattern
  quotemeta:null,  // - quote regular expression magic characters
  qw:null,  // - quote a list of words
  qx:null,  // - backquote quote a string
  rand:1,     // - retrieve the next pseudorandom number
  read:1,     // - fixed-length buffered input from a filehandle
  readdir:1,     // - get a directory from a directory handle
  readline:1,     // - fetch a record from a file
  readlink:1,     // - determine where a symbolic link is pointing
  readpipe:1,     // - execute a system command and collect standard output
  recv:1,     // - receive a message over a Socket
  redo:1,     // - start this loop iteration over again
  ref:1,     // - find out the type of thing being referenced
  rename:1,     // - change a filename
  require:1,     // - load in external functions from a library at runtime
  reset:1,     // - clear all variables of a given name
  'return':1,     // - get out of a function early
  reverse:1,     // - flip a string or a list
  rewinddir:1,     // - reset directory handle
  rindex:1,     // - right-to-left substring search
  rmdir:1,     // - remove a directory
  s:null,  // - replace a pattern with a string
  say:1,     // - print with newline
  scalar:1,     // - force a scalar context
  seek:1,     // - reposition file pointer for random-access I/O
  seekdir:1,     // - reposition directory pointer
  select:1,     // - reset default output or do I/O multiplexing
  semctl:1,     // - SysV semaphore control operations
  semget:1,     // - get set of SysV semaphores
  semop:1,     // - SysV semaphore operations
  send:1,     // - send a message over a socket
  setgrent:1,     // - prepare group file for use
  sethostent:1,     // - prepare hosts file for use
  setnetent:1,     // - prepare networks file for use
  setpgrp:1,     // - set the process group of a process
  setpriority:1,     // - set a process's nice value
  setprotoent:1,     // - prepare protocols file for use
  setpwent:1,     // - prepare passwd file for use
  setservent:1,     // - prepare services file for use
  setsockopt:1,     // - set some socket options
  shift:1,     // - remove the first element of an array, and return it
  shmctl:1,     // - SysV shared memory operations
  shmget:1,     // - get SysV shared memory segment identifier
  shmread:1,     // - read SysV shared memory
  shmwrite:1,     // - write SysV shared memory
  shutdown:1,     // - close down just half of a socket connection
  'sin':1,     // - return the sine of a number
  sleep:1,     // - block for some number of seconds
  socket:1,     // - create a socket
  socketpair:1,     // - create a pair of sockets
  'sort':1,     // - sort a list of values
  splice:1,     // - add or remove elements anywhere in an array
  'split':1,     // - split up a string using a regexp delimiter
  sprintf:1,     // - formatted print into a string
  'sqrt':1,     // - square root function
  srand:1,     // - seed the random number generator
  stat:1,     // - get a file's status information
  state:1,     // - declare and assign a state variable (persistent lexical scoping)
  study:1,     // - optimize input data for repeated searches
  'sub':1,     // - declare a subroutine, possibly anonymously
  'substr':1,     // - get or alter a portion of a string
  symlink:1,     // - create a symbolic link to a file
  syscall:1,     // - execute an arbitrary system call
  sysopen:1,     // - open a file, pipe, or descriptor
  sysread:1,     // - fixed-length unbuffered input from a filehandle
  sysseek:1,     // - position I/O pointer on handle used with sysread and syswrite
  system:1,     // - run a separate program
  syswrite:1,     // - fixed-length unbuffered output to a filehandle
  tell:1,     // - get current seekpointer on a filehandle
  telldir:1,     // - get current seekpointer on a directory handle
  tie:1,     // - bind a variable to an object class
  tied:1,     // - get a reference to the object underlying a tied variable
  time:1,     // - return number of seconds since 1970
  times:1,     // - return elapsed time for self and child processes
  tr:null,  // - transliterate a string
  truncate:1,     // - shorten a file
  uc:1,     // - return upper-case version of a string
  ucfirst:1,     // - return a string with just the next letter in upper case
  umask:1,     // - set file creation mode mask
  undef:1,     // - remove a variable or function definition
  unlink:1,     // - remove one link to a file
  unpack:1,     // - convert binary structure into normal perl variables
  unshift:1,     // - prepend more elements to the beginning of a list
  untie:1,     // - break a tie binding to a variable
  use:1,     // - load in a module at compile time
  utime:1,     // - set a file's last access and modify times
  values:1,     // - return a list of the values in a hash
  vec:1,     // - test or set particular bits in a string
  wait:1,     // - wait for any child process to die
  waitpid:1,     // - wait for a particular child process to die
  wantarray:1,     // - get void vs scalar vs list context of current subroutine call
  warn:1,     // - print debugging info
  when:1,     //
  write:1,     // - print a picture record
  y:null}; // - transliterate a string

var RXstyle="string.special";
var RXmodifiers=/[goseximacplud]/;              // NOTE: "m", "s", "y" and "tr" need to correct real modifiers for each regexp type

function tokenChain(stream,state,chain,style,tail){     // NOTE: chain.length > 2 is not working now (it's for s[...][...]geos;)
  state.chain=null;                               //                                                          12   3tail
  state.style=null;
  state.tail=null;
  state.tokenize=function(stream,state){
    var e=false,c,i=0;
    while(c=stream.next()){
      if(c===chain[i]&&!e){
        if(chain[++i]!==undefined){
          state.chain=chain[i];
          state.style=style;
          state.tail=tail;}
        else if(tail)
          stream.eatWhile(tail);
        state.tokenize=tokenPerl;
        return style;}
      e=!e&&c=="\\";}
    return style;};
  return state.tokenize(stream,state);}

function tokenSOMETHING(stream,state,string){
  state.tokenize=function(stream,state){
    if(stream.string==string)
      state.tokenize=tokenPerl;
    stream.skipToEnd();
    return "string";};
  return state.tokenize(stream,state);}

function tokenPerl(stream,state){
  if(stream.eatSpace())
    return null;
  if(state.chain)
    return tokenChain(stream,state,state.chain,state.style,state.tail);
  if(stream.match(/^(\-?((\d[\d_]*)?\.\d+(e[+-]?\d+)?|\d+\.\d*)|0x[\da-fA-F_]+|0b[01_]+|\d[\d_]*(e[+-]?\d+)?)/))
    return 'number';
  if(stream.match(/^<<(?=[_a-zA-Z])/)){                  // NOTE: <<SOMETHING\n...\nSOMETHING\n
    stream.eatWhile(/\w/);
    return tokenSOMETHING(stream,state,stream.current().substr(2));}
  if(stream.sol()&&stream.match(/^\=item(?!\w)/)){// NOTE: \n=item...\n=cut\n
    return tokenSOMETHING(stream,state,'=cut');}
  var ch=stream.next();
  if(ch=='"'||ch=="'"){                           // NOTE: ' or " or <<'SOMETHING'\n...\nSOMETHING\n or <<"SOMETHING"\n...\nSOMETHING\n
    if(prefix(stream, 3)=="<<"+ch){
      var p=stream.pos;
      stream.eatWhile(/\w/);
      var n=stream.current().substr(1);
      if(n&&stream.eat(ch))
        return tokenSOMETHING(stream,state,n);
      stream.pos=p;}
    return tokenChain(stream,state,[ch],"string");}
  if(ch=="q"){
    var c=look(stream, -2);
    if(!(c&&/\w/.test(c))){
      c=look(stream, 0);
      if(c=="x"){
        c=look(stream, 1);
        if(c=="("){
          eatSuffix(stream, 2);
          return tokenChain(stream,state,[")"],RXstyle,RXmodifiers);}
        if(c=="["){
          eatSuffix(stream, 2);
          return tokenChain(stream,state,["]"],RXstyle,RXmodifiers);}
        if(c=="{"){
          eatSuffix(stream, 2);
          return tokenChain(stream,state,["}"],RXstyle,RXmodifiers);}
        if(c=="<"){
          eatSuffix(stream, 2);
          return tokenChain(stream,state,[">"],RXstyle,RXmodifiers);}
        if(/[\^'"!~\/]/.test(c)){
          eatSuffix(stream, 1);
          return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}
      else if(c=="q"){
        c=look(stream, 1);
        if(c=="("){
          eatSuffix(stream, 2);
          return tokenChain(stream,state,[")"],"string");}
        if(c=="["){
          eatSuffix(stream, 2);
          return tokenChain(stream,state,["]"],"string");}
        if(c=="{"){
          eatSuffix(stream, 2);
          return tokenChain(stream,state,["}"],"string");}
        if(c=="<"){
          eatSuffix(stream, 2);
          return tokenChain(stream,state,[">"],"string");}
        if(/[\^'"!~\/]/.test(c)){
          eatSuffix(stream, 1);
          return tokenChain(stream,state,[stream.eat(c)],"string");}}
      else if(c=="w"){
        c=look(stream, 1);
        if(c=="("){
          eatSuffix(stream, 2);
          return tokenChain(stream,state,[")"],"bracket");}
        if(c=="["){
          eatSuffix(stream, 2);
          return tokenChain(stream,state,["]"],"bracket");}
        if(c=="{"){
          eatSuffix(stream, 2);
          return tokenChain(stream,state,["}"],"bracket");}
        if(c=="<"){
          eatSuffix(stream, 2);
          return tokenChain(stream,state,[">"],"bracket");}
        if(/[\^'"!~\/]/.test(c)){
          eatSuffix(stream, 1);
          return tokenChain(stream,state,[stream.eat(c)],"bracket");}}
      else if(c=="r"){
        c=look(stream, 1);
        if(c=="("){
          eatSuffix(stream, 2);
          return tokenChain(stream,state,[")"],RXstyle,RXmodifiers);}
        if(c=="["){
          eatSuffix(stream, 2);
          return tokenChain(stream,state,["]"],RXstyle,RXmodifiers);}
        if(c=="{"){
          eatSuffix(stream, 2);
          return tokenChain(stream,state,["}"],RXstyle,RXmodifiers);}
        if(c=="<"){
          eatSuffix(stream, 2);
          return tokenChain(stream,state,[">"],RXstyle,RXmodifiers);}
        if(/[\^'"!~\/]/.test(c)){
          eatSuffix(stream, 1);
          return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}
      else if(/[\^'"!~\/(\[{<]/.test(c)){
        if(c=="("){
          eatSuffix(stream, 1);
          return tokenChain(stream,state,[")"],"string");}
        if(c=="["){
          eatSuffix(stream, 1);
          return tokenChain(stream,state,["]"],"string");}
        if(c=="{"){
          eatSuffix(stream, 1);
          return tokenChain(stream,state,["}"],"string");}
        if(c=="<"){
          eatSuffix(stream, 1);
          return tokenChain(stream,state,[">"],"string");}
        if(/[\^'"!~\/]/.test(c)){
          return tokenChain(stream,state,[stream.eat(c)],"string");}}}}
  if(ch=="m"){
    var c=look(stream, -2);
    if(!(c&&/\w/.test(c))){
      c=stream.eat(/[(\[{<\^'"!~\/]/);
      if(c){
        if(/[\^'"!~\/]/.test(c)){
          return tokenChain(stream,state,[c],RXstyle,RXmodifiers);}
        if(c=="("){
          return tokenChain(stream,state,[")"],RXstyle,RXmodifiers);}
        if(c=="["){
          return tokenChain(stream,state,["]"],RXstyle,RXmodifiers);}
        if(c=="{"){
          return tokenChain(stream,state,["}"],RXstyle,RXmodifiers);}
        if(c=="<"){
          return tokenChain(stream,state,[">"],RXstyle,RXmodifiers);}}}}
  if(ch=="s"){
    var c=/[\/>\]})\w]/.test(look(stream, -2));
    if(!c){
      c=stream.eat(/[(\[{<\^'"!~\/]/);
      if(c){
        if(c=="[")
          return tokenChain(stream,state,["]","]"],RXstyle,RXmodifiers);
        if(c=="{")
          return tokenChain(stream,state,["}","}"],RXstyle,RXmodifiers);
        if(c=="<")
          return tokenChain(stream,state,[">",">"],RXstyle,RXmodifiers);
        if(c=="(")
          return tokenChain(stream,state,[")",")"],RXstyle,RXmodifiers);
        return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}
  if(ch=="y"){
    var c=/[\/>\]})\w]/.test(look(stream, -2));
    if(!c){
      c=stream.eat(/[(\[{<\^'"!~\/]/);
      if(c){
        if(c=="[")
          return tokenChain(stream,state,["]","]"],RXstyle,RXmodifiers);
        if(c=="{")
          return tokenChain(stream,state,["}","}"],RXstyle,RXmodifiers);
        if(c=="<")
          return tokenChain(stream,state,[">",">"],RXstyle,RXmodifiers);
        if(c=="(")
          return tokenChain(stream,state,[")",")"],RXstyle,RXmodifiers);
        return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}
  if(ch=="t"){
    var c=/[\/>\]})\w]/.test(look(stream, -2));
    if(!c){
      c=stream.eat("r");if(c){
        c=stream.eat(/[(\[{<\^'"!~\/]/);
        if(c){
          if(c=="[")
            return tokenChain(stream,state,["]","]"],RXstyle,RXmodifiers);
          if(c=="{")
            return tokenChain(stream,state,["}","}"],RXstyle,RXmodifiers);
          if(c=="<")
            return tokenChain(stream,state,[">",">"],RXstyle,RXmodifiers);
          if(c=="(")
            return tokenChain(stream,state,[")",")"],RXstyle,RXmodifiers);
          return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}}
  if(ch=="`"){
    return tokenChain(stream,state,[ch],"builtin");}
  if(ch=="/"){
    if(!/~\s*$/.test(prefix(stream)))
      return "operator";
    else
      return tokenChain(stream,state,[ch],RXstyle,RXmodifiers);}
  if(ch=="$"){
    var p=stream.pos;
    if(stream.eatWhile(/\d/)||stream.eat("{")&&stream.eatWhile(/\d/)&&stream.eat("}"))
      return "builtin";
    else
      stream.pos=p;}
  if(/[$@%]/.test(ch)){
    var p=stream.pos;
    if(stream.eat("^")&&stream.eat(/[A-Z]/)||!/[@$%&]/.test(look(stream, -2))&&stream.eat(/[=|\\\-#?@;:&`~\^!\[\]*'"$+.,\/<>()]/)){
      var c=stream.current();
      if(PERL[c])
        return "builtin";}
    stream.pos=p;}
  if(/[$@%&]/.test(ch)){
    if(stream.eatWhile(/[\w$]/)||stream.eat("{")&&stream.eatWhile(/[\w$]/)&&stream.eat("}")){
      var c=stream.current();
      if(PERL[c])
        return "builtin";
      else
        return "variable";}}
  if(ch=="#"){
    if(look(stream, -2)!="$"){
      stream.skipToEnd();
      return "comment";}}
  if(/[:+\-\^*$&%@=<>!?|\/~\.]/.test(ch)){
    var p=stream.pos;
    stream.eatWhile(/[:+\-\^*$&%@=<>!?|\/~\.]/);
    if(PERL[stream.current()])
      return "operator";
    else
      stream.pos=p;}
  if(ch=="_"){
    if(stream.pos==1){
      if(suffix(stream, 6)=="_END__"){
        return tokenChain(stream,state,['\0'],"comment");}
      else if(suffix(stream, 7)=="_DATA__"){
        return tokenChain(stream,state,['\0'],"builtin");}
      else if(suffix(stream, 7)=="_C__"){
        return tokenChain(stream,state,['\0'],"string");}}}
  if(/\w/.test(ch)){
    var p=stream.pos;
    if(look(stream, -2)=="{"&&(look(stream, 0)=="}"||stream.eatWhile(/\w/)&&look(stream, 0)=="}"))
      return "string";
    else
      stream.pos=p;}
  if(/[A-Z]/.test(ch)){
    var l=look(stream, -2);
    var p=stream.pos;
    stream.eatWhile(/[A-Z_]/);
    if(/[\da-z]/.test(look(stream, 0))){
      stream.pos=p;}
    else{
      var c=PERL[stream.current()];
      if(!c)
        return "meta";
      if(c[1])
        c=c[0];
      if(l!=":"){
        if(c==1)
          return "keyword";
        else if(c==2)
          return "def";
        else if(c==3)
          return "atom";
        else if(c==4)
          return "operator";
        else if(c==5)
          return "builtin";
        else
          return "meta";}
      else
        return "meta";}}
  if(/[a-zA-Z_]/.test(ch)){
    var l=look(stream, -2);
    stream.eatWhile(/\w/);
    var c=PERL[stream.current()];
    if(!c)
      return "meta";
    if(c[1])
      c=c[0];
    if(l!=":"){
      if(c==1)
        return "keyword";
      else if(c==2)
        return "def";
      else if(c==3)
        return "atom";
      else if(c==4)
        return "operator";
      else if(c==5)
        return "builtin";
      else
        return "meta";}
    else
      return "meta";}
  return null;}

const perl = {
  startState: function() {
    return {
      tokenize: tokenPerl,
      chain: null,
      style: null,
      tail: null
    };
  },
  token: function(stream, state) {
    return (state.tokenize || tokenPerl)(stream, state);
  },
  languageData: {
    commentTokens: {line: "#"},
    wordChars: "$"
  }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfY29kZW1pcnJvcl9sZWdhY3ktbW9kZXNfbW9kZV9wZXJsX2pzLjY4OWRiM2VhMzAzYjlmMDUzNWM3LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0tBQW9LO0FBQ3BLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLFVBQVU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxjQUFjO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssTUFBTTtBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssT0FBTztBQUNaLEtBQUssU0FBUztBQUNkLEtBQUssV0FBVztBQUNoQixLQUFLLFlBQVk7QUFDakI7QUFDQTtBQUNBLEtBQUssbUJBQW1CO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLE9BQU87QUFDWjtBQUNBO0FBQ0EsS0FBSyxVQUFVO0FBQ2Y7QUFDQTtBQUNBLEtBQUssV0FBVztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxnQkFBZ0I7QUFDckIsS0FBSyxnQkFBZ0I7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLG9CQUFvQjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLGNBQWM7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0EsZ0RBQWdEOztBQUVoRCx3REFBd0QsdUVBQXVFO0FBQy9ILGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQiw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQiw0Q0FBNEMsSUFBSTtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCLDRDQUE0QyxJQUFJO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBLHdCQUF3QjtBQUN4QiwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLDhDQUE4QyxJQUFJO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsd0NBQXdDO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzR0FBc0c7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QywyQ0FBMkM7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1QkFBdUIsNkNBQTZDO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxvQkFBb0IsVUFBVTtBQUM5QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvcGVybC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIGl0J3MgbGlrZSBcInBlZWtcIiwgYnV0IG5lZWQgZm9yIGxvb2stYWhlYWQgb3IgbG9vay1iZWhpbmQgaWYgaW5kZXggPCAwXG5mdW5jdGlvbiBsb29rKHN0cmVhbSwgYyl7XG4gIHJldHVybiBzdHJlYW0uc3RyaW5nLmNoYXJBdChzdHJlYW0ucG9zKyhjfHwwKSk7XG59XG5cbi8vIHJldHVybiBhIHBhcnQgb2YgcHJlZml4IG9mIGN1cnJlbnQgc3RyZWFtIGZyb20gY3VycmVudCBwb3NpdGlvblxuZnVuY3Rpb24gcHJlZml4KHN0cmVhbSwgYyl7XG4gIGlmKGMpe1xuICAgIHZhciB4PXN0cmVhbS5wb3MtYztcbiAgICByZXR1cm4gc3RyZWFtLnN0cmluZy5zdWJzdHIoKHg+PTA/eDowKSxjKTt9XG4gIGVsc2V7XG4gICAgcmV0dXJuIHN0cmVhbS5zdHJpbmcuc3Vic3RyKDAsc3RyZWFtLnBvcy0xKTtcbiAgfVxufVxuXG4vLyByZXR1cm4gYSBwYXJ0IG9mIHN1ZmZpeCBvZiBjdXJyZW50IHN0cmVhbSBmcm9tIGN1cnJlbnQgcG9zaXRpb25cbmZ1bmN0aW9uIHN1ZmZpeChzdHJlYW0sIGMpe1xuICB2YXIgeT1zdHJlYW0uc3RyaW5nLmxlbmd0aDtcbiAgdmFyIHg9eS1zdHJlYW0ucG9zKzE7XG4gIHJldHVybiBzdHJlYW0uc3RyaW5nLnN1YnN0cihzdHJlYW0ucG9zLChjJiZjPHk/Yzp4KSk7XG59XG5cbi8vIGVhdGluZyBhbmQgdm9taXRpbmcgYSBwYXJ0IG9mIHN0cmVhbSBmcm9tIGN1cnJlbnQgcG9zaXRpb25cbmZ1bmN0aW9uIGVhdFN1ZmZpeChzdHJlYW0sIGMpe1xuICB2YXIgeD1zdHJlYW0ucG9zK2M7XG4gIHZhciB5O1xuICBpZih4PD0wKVxuICAgIHN0cmVhbS5wb3M9MDtcbiAgZWxzZSBpZih4Pj0oeT1zdHJlYW0uc3RyaW5nLmxlbmd0aC0xKSlcbiAgICBzdHJlYW0ucG9zPXk7XG4gIGVsc2VcbiAgICBzdHJlYW0ucG9zPXg7XG59XG5cbi8vIGh0dHA6Ly9wZXJsZG9jLnBlcmwub3JnXG52YXIgUEVSTD17ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIG51bGwgLSBtYWdpYyB0b3VjaFxuICAvLyAgIDEgLSBrZXl3b3JkXG4gIC8vICAgMiAtIGRlZlxuICAvLyAgIDMgLSBhdG9tXG4gIC8vICAgNCAtIG9wZXJhdG9yXG4gIC8vICAgNSAtIGJ1aWx0aW4gKHByZWRlZmluZWQpXG4gIC8vICAgW3gseV0gLSB4PTEsMiwzOyB5PW11c3QgYmUgZGVmaW5lZCBpZiB4ey4uLn1cbiAgLy8gICAgICBQRVJMIG9wZXJhdG9yc1xuICAnLT4nOiAgIDQsXG4gICcrKyc6ICAgNCxcbiAgJy0tJzogICA0LFxuICAnKionOiAgIDQsXG4gIC8vICAgISB+IFxcIGFuZCB1bmFyeSArIGFuZCAtXG4gICc9fic6ICAgNCxcbiAgJyF+JzogICA0LFxuICAnKic6ICAgNCxcbiAgJy8nOiAgIDQsXG4gICclJzogICA0LFxuICAneCc6ICAgNCxcbiAgJysnOiAgIDQsXG4gICctJzogICA0LFxuICAnLic6ICAgNCxcbiAgJzw8JzogICA0LFxuICAnPj4nOiAgIDQsXG4gIC8vICAgbmFtZWQgdW5hcnkgb3BlcmF0b3JzXG4gICc8JzogICA0LFxuICAnPic6ICAgNCxcbiAgJzw9JzogICA0LFxuICAnPj0nOiAgIDQsXG4gICdsdCc6ICAgNCxcbiAgJ2d0JzogICA0LFxuICAnbGUnOiAgIDQsXG4gICdnZSc6ICAgNCxcbiAgJz09JzogICA0LFxuICAnIT0nOiAgIDQsXG4gICc8PT4nOiAgIDQsXG4gICdlcSc6ICAgNCxcbiAgJ25lJzogICA0LFxuICAnY21wJzogICA0LFxuICAnfn4nOiAgIDQsXG4gICcmJzogICA0LFxuICAnfCc6ICAgNCxcbiAgJ14nOiAgIDQsXG4gICcmJic6ICAgNCxcbiAgJ3x8JzogICA0LFxuICAnLy8nOiAgIDQsXG4gICcuLic6ICAgNCxcbiAgJy4uLic6ICAgNCxcbiAgJz8nOiAgIDQsXG4gICc6JzogICA0LFxuICAnPSc6ICAgNCxcbiAgJys9JzogICA0LFxuICAnLT0nOiAgIDQsXG4gICcqPSc6ICAgNCwgIC8vICAgZXRjLiA/Pz9cbiAgJywnOiAgIDQsXG4gICc9Pic6ICAgNCxcbiAgJzo6JzogICA0LFxuICAvLyAgIGxpc3Qgb3BlcmF0b3JzIChyaWdodHdhcmQpXG4gICdub3QnOiAgIDQsXG4gICdhbmQnOiAgIDQsXG4gICdvcic6ICAgNCxcbiAgJ3hvcic6ICAgNCxcbiAgLy8gICAgICBQRVJMIHByZWRlZmluZWQgdmFyaWFibGVzIChJIGtub3csIHdoYXQgdGhpcyBpcyBhIHBhcmFub2lkIGlkZWEsIGJ1dCBtYXkgYmUgbmVlZGVkIGZvciBwZW9wbGUsIHdobyBsZWFybiBQRVJMLCBhbmQgZm9yIG1lIGFzIHdlbGwsIC4uLmFuZCBtYXkgYmUgZm9yIHlvdT87KVxuICAnQkVHSU4nOiAgIFs1LDFdLFxuICAnRU5EJzogICBbNSwxXSxcbiAgJ1BSSU5UJzogICBbNSwxXSxcbiAgJ1BSSU5URic6ICAgWzUsMV0sXG4gICdHRVRDJzogICBbNSwxXSxcbiAgJ1JFQUQnOiAgIFs1LDFdLFxuICAnUkVBRExJTkUnOiAgIFs1LDFdLFxuICAnREVTVFJPWSc6ICAgWzUsMV0sXG4gICdUSUUnOiAgIFs1LDFdLFxuICAnVElFSEFORExFJzogICBbNSwxXSxcbiAgJ1VOVElFJzogICBbNSwxXSxcbiAgJ1NURElOJzogICAgNSxcbiAgJ1NURElOX1RPUCc6ICAgIDUsXG4gICdTVERPVVQnOiAgICA1LFxuICAnU1RET1VUX1RPUCc6ICAgIDUsXG4gICdTVERFUlInOiAgICA1LFxuICAnU1RERVJSX1RPUCc6ICAgIDUsXG4gICckQVJHJzogICAgNSxcbiAgJyRfJzogICAgNSxcbiAgJ0BBUkcnOiAgICA1LFxuICAnQF8nOiAgICA1LFxuICAnJExJU1RfU0VQQVJBVE9SJzogICAgNSxcbiAgJyRcIic6ICAgIDUsXG4gICckUFJPQ0VTU19JRCc6ICAgIDUsXG4gICckUElEJzogICAgNSxcbiAgJyQkJzogICAgNSxcbiAgJyRSRUFMX0dST1VQX0lEJzogICAgNSxcbiAgJyRHSUQnOiAgICA1LFxuICAnJCgnOiAgICA1LFxuICAnJEVGRkVDVElWRV9HUk9VUF9JRCc6ICAgIDUsXG4gICckRUdJRCc6ICAgIDUsXG4gICckKSc6ICAgIDUsXG4gICckUFJPR1JBTV9OQU1FJzogICAgNSxcbiAgJyQwJzogICAgNSxcbiAgJyRTVUJTQ1JJUFRfU0VQQVJBVE9SJzogICAgNSxcbiAgJyRTVUJTRVAnOiAgICA1LFxuICAnJDsnOiAgICA1LFxuICAnJFJFQUxfVVNFUl9JRCc6ICAgIDUsXG4gICckVUlEJzogICAgNSxcbiAgJyQ8JzogICAgNSxcbiAgJyRFRkZFQ1RJVkVfVVNFUl9JRCc6ICAgIDUsXG4gICckRVVJRCc6ICAgIDUsXG4gICckPic6ICAgIDUsXG4gICckYSc6ICAgIDUsXG4gICckYic6ICAgIDUsXG4gICckQ09NUElMSU5HJzogICAgNSxcbiAgJyReQyc6ICAgIDUsXG4gICckREVCVUdHSU5HJzogICAgNSxcbiAgJyReRCc6ICAgIDUsXG4gICcke15FTkNPRElOR30nOiAgICA1LFxuICAnJEVOVic6ICAgIDUsXG4gICclRU5WJzogICAgNSxcbiAgJyRTWVNURU1fRkRfTUFYJzogICAgNSxcbiAgJyReRic6ICAgIDUsXG4gICdARic6ICAgIDUsXG4gICcke15HTE9CQUxfUEhBU0V9JzogICAgNSxcbiAgJyReSCc6ICAgIDUsXG4gICclXkgnOiAgICA1LFxuICAnQElOQyc6ICAgIDUsXG4gICclSU5DJzogICAgNSxcbiAgJyRJTlBMQUNFX0VESVQnOiAgICA1LFxuICAnJF5JJzogICAgNSxcbiAgJyReTSc6ICAgIDUsXG4gICckT1NOQU1FJzogICAgNSxcbiAgJyReTyc6ICAgIDUsXG4gICcke15PUEVOfSc6ICAgIDUsXG4gICckUEVSTERCJzogICAgNSxcbiAgJyReUCc6ICAgIDUsXG4gICckU0lHJzogICAgNSxcbiAgJyVTSUcnOiAgICA1LFxuICAnJEJBU0VUSU1FJzogICAgNSxcbiAgJyReVCc6ICAgIDUsXG4gICcke15UQUlOVH0nOiAgICA1LFxuICAnJHteVU5JQ09ERX0nOiAgICA1LFxuICAnJHteVVRGOENBQ0hFfSc6ICAgIDUsXG4gICcke15VVEY4TE9DQUxFfSc6ICAgIDUsXG4gICckUEVSTF9WRVJTSU9OJzogICAgNSxcbiAgJyReVic6ICAgIDUsXG4gICcke15XSU4zMl9TTE9QUFlfU1RBVH0nOiAgICA1LFxuICAnJEVYRUNVVEFCTEVfTkFNRSc6ICAgIDUsXG4gICckXlgnOiAgICA1LFxuICAnJDEnOiAgICA1LCAvLyAtIHJlZ2V4cCAkMSwgJDIuLi5cbiAgJyRNQVRDSCc6ICAgIDUsXG4gICckJic6ICAgIDUsXG4gICcke15NQVRDSH0nOiAgICA1LFxuICAnJFBSRU1BVENIJzogICAgNSxcbiAgJyRgJzogICAgNSxcbiAgJyR7XlBSRU1BVENIfSc6ICAgIDUsXG4gICckUE9TVE1BVENIJzogICAgNSxcbiAgXCIkJ1wiOiAgICA1LFxuICAnJHteUE9TVE1BVENIfSc6ICAgIDUsXG4gICckTEFTVF9QQVJFTl9NQVRDSCc6ICAgIDUsXG4gICckKyc6ICAgIDUsXG4gICckTEFTVF9TVUJNQVRDSF9SRVNVTFQnOiAgICA1LFxuICAnJF5OJzogICAgNSxcbiAgJ0BMQVNUX01BVENIX0VORCc6ICAgIDUsXG4gICdAKyc6ICAgIDUsXG4gICclTEFTVF9QQVJFTl9NQVRDSCc6ICAgIDUsXG4gICclKyc6ICAgIDUsXG4gICdATEFTVF9NQVRDSF9TVEFSVCc6ICAgIDUsXG4gICdALSc6ICAgIDUsXG4gICclTEFTVF9NQVRDSF9TVEFSVCc6ICAgIDUsXG4gICclLSc6ICAgIDUsXG4gICckTEFTVF9SRUdFWFBfQ09ERV9SRVNVTFQnOiAgICA1LFxuICAnJF5SJzogICAgNSxcbiAgJyR7XlJFX0RFQlVHX0ZMQUdTfSc6ICAgIDUsXG4gICcke15SRV9UUklFX01BWEJVRn0nOiAgICA1LFxuICAnJEFSR1YnOiAgICA1LFxuICAnQEFSR1YnOiAgICA1LFxuICAnQVJHVic6ICAgIDUsXG4gICdBUkdWT1VUJzogICAgNSxcbiAgJyRPVVRQVVRfRklFTERfU0VQQVJBVE9SJzogICAgNSxcbiAgJyRPRlMnOiAgICA1LFxuICAnJCwnOiAgICA1LFxuICAnJElOUFVUX0xJTkVfTlVNQkVSJzogICAgNSxcbiAgJyROUic6ICAgIDUsXG4gICckLic6ICAgIDUsXG4gICckSU5QVVRfUkVDT1JEX1NFUEFSQVRPUic6ICAgIDUsXG4gICckUlMnOiAgICA1LFxuICAnJC8nOiAgICA1LFxuICAnJE9VVFBVVF9SRUNPUkRfU0VQQVJBVE9SJzogICAgNSxcbiAgJyRPUlMnOiAgICA1LFxuICAnJFxcXFwnOiAgICA1LFxuICAnJE9VVFBVVF9BVVRPRkxVU0gnOiAgICA1LFxuICAnJHwnOiAgICA1LFxuICAnJEFDQ1VNVUxBVE9SJzogICAgNSxcbiAgJyReQSc6ICAgIDUsXG4gICckRk9STUFUX0ZPUk1GRUVEJzogICAgNSxcbiAgJyReTCc6ICAgIDUsXG4gICckRk9STUFUX1BBR0VfTlVNQkVSJzogICAgNSxcbiAgJyQlJzogICAgNSxcbiAgJyRGT1JNQVRfTElORVNfTEVGVCc6ICAgIDUsXG4gICckLSc6ICAgIDUsXG4gICckRk9STUFUX0xJTkVfQlJFQUtfQ0hBUkFDVEVSUyc6ICAgIDUsXG4gICckOic6ICAgIDUsXG4gICckRk9STUFUX0xJTkVTX1BFUl9QQUdFJzogICAgNSxcbiAgJyQ9JzogICAgNSxcbiAgJyRGT1JNQVRfVE9QX05BTUUnOiAgICA1LFxuICAnJF4nOiAgICA1LFxuICAnJEZPUk1BVF9OQU1FJzogICAgNSxcbiAgJyR+JzogICAgNSxcbiAgJyR7XkNISUxEX0VSUk9SX05BVElWRX0nOiAgICA1LFxuICAnJEVYVEVOREVEX09TX0VSUk9SJzogICAgNSxcbiAgJyReRSc6ICAgIDUsXG4gICckRVhDRVBUSU9OU19CRUlOR19DQVVHSFQnOiAgICA1LFxuICAnJF5TJzogICAgNSxcbiAgJyRXQVJOSU5HJzogICAgNSxcbiAgJyReVyc6ICAgIDUsXG4gICcke15XQVJOSU5HX0JJVFN9JzogICAgNSxcbiAgJyRPU19FUlJPUic6ICAgIDUsXG4gICckRVJSTk8nOiAgICA1LFxuICAnJCEnOiAgICA1LFxuICAnJU9TX0VSUk9SJzogICAgNSxcbiAgJyVFUlJOTyc6ICAgIDUsXG4gICclISc6ICAgIDUsXG4gICckQ0hJTERfRVJST1InOiAgICA1LFxuICAnJD8nOiAgICA1LFxuICAnJEVWQUxfRVJST1InOiAgICA1LFxuICAnJEAnOiAgICA1LFxuICAnJE9GTVQnOiAgICA1LFxuICAnJCMnOiAgICA1LFxuICAnJConOiAgICA1LFxuICAnJEFSUkFZX0JBU0UnOiAgICA1LFxuICAnJFsnOiAgICA1LFxuICAnJE9MRF9QRVJMX1ZFUlNJT04nOiAgICA1LFxuICAnJF0nOiAgICA1LFxuICAvLyAgICAgIFBFUkwgYmxvY2tzXG4gICdpZic6WzEsMV0sXG4gIGVsc2lmOlsxLDFdLFxuICAnZWxzZSc6WzEsMV0sXG4gICd3aGlsZSc6WzEsMV0sXG4gIHVubGVzczpbMSwxXSxcbiAgJ2Zvcic6WzEsMV0sXG4gIGZvcmVhY2g6WzEsMV0sXG4gIC8vICAgICAgUEVSTCBmdW5jdGlvbnNcbiAgJ2Ficyc6MSwgICAgIC8vIC0gYWJzb2x1dGUgdmFsdWUgZnVuY3Rpb25cbiAgYWNjZXB0OjEsICAgICAvLyAtIGFjY2VwdCBhbiBpbmNvbWluZyBzb2NrZXQgY29ubmVjdFxuICBhbGFybToxLCAgICAgLy8gLSBzY2hlZHVsZSBhIFNJR0FMUk1cbiAgJ2F0YW4yJzoxLCAgICAgLy8gLSBhcmN0YW5nZW50IG9mIFkvWCBpbiB0aGUgcmFuZ2UgLVBJIHRvIFBJXG4gIGJpbmQ6MSwgICAgIC8vIC0gYmluZHMgYW4gYWRkcmVzcyB0byBhIHNvY2tldFxuICBiaW5tb2RlOjEsICAgICAvLyAtIHByZXBhcmUgYmluYXJ5IGZpbGVzIGZvciBJL09cbiAgYmxlc3M6MSwgICAgIC8vIC0gY3JlYXRlIGFuIG9iamVjdFxuICBib290c3RyYXA6MSwgICAgIC8vXG4gICdicmVhayc6MSwgICAgIC8vIC0gYnJlYWsgb3V0IG9mIGEgXCJnaXZlblwiIGJsb2NrXG4gIGNhbGxlcjoxLCAgICAgLy8gLSBnZXQgY29udGV4dCBvZiB0aGUgY3VycmVudCBzdWJyb3V0aW5lIGNhbGxcbiAgY2hkaXI6MSwgICAgIC8vIC0gY2hhbmdlIHlvdXIgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeVxuICBjaG1vZDoxLCAgICAgLy8gLSBjaGFuZ2VzIHRoZSBwZXJtaXNzaW9ucyBvbiBhIGxpc3Qgb2YgZmlsZXNcbiAgY2hvbXA6MSwgICAgIC8vIC0gcmVtb3ZlIGEgdHJhaWxpbmcgcmVjb3JkIHNlcGFyYXRvciBmcm9tIGEgc3RyaW5nXG4gIGNob3A6MSwgICAgIC8vIC0gcmVtb3ZlIHRoZSBsYXN0IGNoYXJhY3RlciBmcm9tIGEgc3RyaW5nXG4gIGNob3duOjEsICAgICAvLyAtIGNoYW5nZSB0aGUgb3duZXJzaGlwIG9uIGEgbGlzdCBvZiBmaWxlc1xuICBjaHI6MSwgICAgIC8vIC0gZ2V0IGNoYXJhY3RlciB0aGlzIG51bWJlciByZXByZXNlbnRzXG4gIGNocm9vdDoxLCAgICAgLy8gLSBtYWtlIGRpcmVjdG9yeSBuZXcgcm9vdCBmb3IgcGF0aCBsb29rdXBzXG4gIGNsb3NlOjEsICAgICAvLyAtIGNsb3NlIGZpbGUgKG9yIHBpcGUgb3Igc29ja2V0KSBoYW5kbGVcbiAgY2xvc2VkaXI6MSwgICAgIC8vIC0gY2xvc2UgZGlyZWN0b3J5IGhhbmRsZVxuICBjb25uZWN0OjEsICAgICAvLyAtIGNvbm5lY3QgdG8gYSByZW1vdGUgc29ja2V0XG4gICdjb250aW51ZSc6WzEsMV0sIC8vIC0gb3B0aW9uYWwgdHJhaWxpbmcgYmxvY2sgaW4gYSB3aGlsZSBvciBmb3JlYWNoXG4gICdjb3MnOjEsICAgICAvLyAtIGNvc2luZSBmdW5jdGlvblxuICBjcnlwdDoxLCAgICAgLy8gLSBvbmUtd2F5IHBhc3N3ZC1zdHlsZSBlbmNyeXB0aW9uXG4gIGRibWNsb3NlOjEsICAgICAvLyAtIGJyZWFrcyBiaW5kaW5nIG9uIGEgdGllZCBkYm0gZmlsZVxuICBkYm1vcGVuOjEsICAgICAvLyAtIGNyZWF0ZSBiaW5kaW5nIG9uIGEgdGllZCBkYm0gZmlsZVxuICAnZGVmYXVsdCc6MSwgICAgIC8vXG4gIGRlZmluZWQ6MSwgICAgIC8vIC0gdGVzdCB3aGV0aGVyIGEgdmFsdWUsIHZhcmlhYmxlLCBvciBmdW5jdGlvbiBpcyBkZWZpbmVkXG4gICdkZWxldGUnOjEsICAgICAvLyAtIGRlbGV0ZXMgYSB2YWx1ZSBmcm9tIGEgaGFzaFxuICBkaWU6MSwgICAgIC8vIC0gcmFpc2UgYW4gZXhjZXB0aW9uIG9yIGJhaWwgb3V0XG4gICdkbyc6MSwgICAgIC8vIC0gdHVybiBhIEJMT0NLIGludG8gYSBURVJNXG4gIGR1bXA6MSwgICAgIC8vIC0gY3JlYXRlIGFuIGltbWVkaWF0ZSBjb3JlIGR1bXBcbiAgZWFjaDoxLCAgICAgLy8gLSByZXRyaWV2ZSB0aGUgbmV4dCBrZXkvdmFsdWUgcGFpciBmcm9tIGEgaGFzaFxuICBlbmRncmVudDoxLCAgICAgLy8gLSBiZSBkb25lIHVzaW5nIGdyb3VwIGZpbGVcbiAgZW5kaG9zdGVudDoxLCAgICAgLy8gLSBiZSBkb25lIHVzaW5nIGhvc3RzIGZpbGVcbiAgZW5kbmV0ZW50OjEsICAgICAvLyAtIGJlIGRvbmUgdXNpbmcgbmV0d29ya3MgZmlsZVxuICBlbmRwcm90b2VudDoxLCAgICAgLy8gLSBiZSBkb25lIHVzaW5nIHByb3RvY29scyBmaWxlXG4gIGVuZHB3ZW50OjEsICAgICAvLyAtIGJlIGRvbmUgdXNpbmcgcGFzc3dkIGZpbGVcbiAgZW5kc2VydmVudDoxLCAgICAgLy8gLSBiZSBkb25lIHVzaW5nIHNlcnZpY2VzIGZpbGVcbiAgZW9mOjEsICAgICAvLyAtIHRlc3QgYSBmaWxlaGFuZGxlIGZvciBpdHMgZW5kXG4gICdldmFsJzoxLCAgICAgLy8gLSBjYXRjaCBleGNlcHRpb25zIG9yIGNvbXBpbGUgYW5kIHJ1biBjb2RlXG4gICdleGVjJzoxLCAgICAgLy8gLSBhYmFuZG9uIHRoaXMgcHJvZ3JhbSB0byBydW4gYW5vdGhlclxuICBleGlzdHM6MSwgICAgIC8vIC0gdGVzdCB3aGV0aGVyIGEgaGFzaCBrZXkgaXMgcHJlc2VudFxuICBleGl0OjEsICAgICAvLyAtIHRlcm1pbmF0ZSB0aGlzIHByb2dyYW1cbiAgJ2V4cCc6MSwgICAgIC8vIC0gcmFpc2UgSSB0byBhIHBvd2VyXG4gIGZjbnRsOjEsICAgICAvLyAtIGZpbGUgY29udHJvbCBzeXN0ZW0gY2FsbFxuICBmaWxlbm86MSwgICAgIC8vIC0gcmV0dXJuIGZpbGUgZGVzY3JpcHRvciBmcm9tIGZpbGVoYW5kbGVcbiAgZmxvY2s6MSwgICAgIC8vIC0gbG9jayBhbiBlbnRpcmUgZmlsZSB3aXRoIGFuIGFkdmlzb3J5IGxvY2tcbiAgZm9yazoxLCAgICAgLy8gLSBjcmVhdGUgYSBuZXcgcHJvY2VzcyBqdXN0IGxpa2UgdGhpcyBvbmVcbiAgZm9ybWF0OjEsICAgICAvLyAtIGRlY2xhcmUgYSBwaWN0dXJlIGZvcm1hdCB3aXRoIHVzZSBieSB0aGUgd3JpdGUoKSBmdW5jdGlvblxuICBmb3JtbGluZToxLCAgICAgLy8gLSBpbnRlcm5hbCBmdW5jdGlvbiB1c2VkIGZvciBmb3JtYXRzXG4gIGdldGM6MSwgICAgIC8vIC0gZ2V0IHRoZSBuZXh0IGNoYXJhY3RlciBmcm9tIHRoZSBmaWxlaGFuZGxlXG4gIGdldGdyZW50OjEsICAgICAvLyAtIGdldCBuZXh0IGdyb3VwIHJlY29yZFxuICBnZXRncmdpZDoxLCAgICAgLy8gLSBnZXQgZ3JvdXAgcmVjb3JkIGdpdmVuIGdyb3VwIHVzZXIgSURcbiAgZ2V0Z3JuYW06MSwgICAgIC8vIC0gZ2V0IGdyb3VwIHJlY29yZCBnaXZlbiBncm91cCBuYW1lXG4gIGdldGhvc3RieWFkZHI6MSwgICAgIC8vIC0gZ2V0IGhvc3QgcmVjb3JkIGdpdmVuIGl0cyBhZGRyZXNzXG4gIGdldGhvc3RieW5hbWU6MSwgICAgIC8vIC0gZ2V0IGhvc3QgcmVjb3JkIGdpdmVuIG5hbWVcbiAgZ2V0aG9zdGVudDoxLCAgICAgLy8gLSBnZXQgbmV4dCBob3N0cyByZWNvcmRcbiAgZ2V0bG9naW46MSwgICAgIC8vIC0gcmV0dXJuIHdobyBsb2dnZWQgaW4gYXQgdGhpcyB0dHlcbiAgZ2V0bmV0YnlhZGRyOjEsICAgICAvLyAtIGdldCBuZXR3b3JrIHJlY29yZCBnaXZlbiBpdHMgYWRkcmVzc1xuICBnZXRuZXRieW5hbWU6MSwgICAgIC8vIC0gZ2V0IG5ldHdvcmtzIHJlY29yZCBnaXZlbiBuYW1lXG4gIGdldG5ldGVudDoxLCAgICAgLy8gLSBnZXQgbmV4dCBuZXR3b3JrcyByZWNvcmRcbiAgZ2V0cGVlcm5hbWU6MSwgICAgIC8vIC0gZmluZCB0aGUgb3RoZXIgZW5kIG9mIGEgc29ja2V0IGNvbm5lY3Rpb25cbiAgZ2V0cGdycDoxLCAgICAgLy8gLSBnZXQgcHJvY2VzcyBncm91cFxuICBnZXRwcGlkOjEsICAgICAvLyAtIGdldCBwYXJlbnQgcHJvY2VzcyBJRFxuICBnZXRwcmlvcml0eToxLCAgICAgLy8gLSBnZXQgY3VycmVudCBuaWNlIHZhbHVlXG4gIGdldHByb3RvYnluYW1lOjEsICAgICAvLyAtIGdldCBwcm90b2NvbCByZWNvcmQgZ2l2ZW4gbmFtZVxuICBnZXRwcm90b2J5bnVtYmVyOjEsICAgICAvLyAtIGdldCBwcm90b2NvbCByZWNvcmQgbnVtZXJpYyBwcm90b2NvbFxuICBnZXRwcm90b2VudDoxLCAgICAgLy8gLSBnZXQgbmV4dCBwcm90b2NvbHMgcmVjb3JkXG4gIGdldHB3ZW50OjEsICAgICAvLyAtIGdldCBuZXh0IHBhc3N3ZCByZWNvcmRcbiAgZ2V0cHduYW06MSwgICAgIC8vIC0gZ2V0IHBhc3N3ZCByZWNvcmQgZ2l2ZW4gdXNlciBsb2dpbiBuYW1lXG4gIGdldHB3dWlkOjEsICAgICAvLyAtIGdldCBwYXNzd2QgcmVjb3JkIGdpdmVuIHVzZXIgSURcbiAgZ2V0c2VydmJ5bmFtZToxLCAgICAgLy8gLSBnZXQgc2VydmljZXMgcmVjb3JkIGdpdmVuIGl0cyBuYW1lXG4gIGdldHNlcnZieXBvcnQ6MSwgICAgIC8vIC0gZ2V0IHNlcnZpY2VzIHJlY29yZCBnaXZlbiBudW1lcmljIHBvcnRcbiAgZ2V0c2VydmVudDoxLCAgICAgLy8gLSBnZXQgbmV4dCBzZXJ2aWNlcyByZWNvcmRcbiAgZ2V0c29ja25hbWU6MSwgICAgIC8vIC0gcmV0cmlldmUgdGhlIHNvY2thZGRyIGZvciBhIGdpdmVuIHNvY2tldFxuICBnZXRzb2Nrb3B0OjEsICAgICAvLyAtIGdldCBzb2NrZXQgb3B0aW9ucyBvbiBhIGdpdmVuIHNvY2tldFxuICBnaXZlbjoxLCAgICAgLy9cbiAgZ2xvYjoxLCAgICAgLy8gLSBleHBhbmQgZmlsZW5hbWVzIHVzaW5nIHdpbGRjYXJkc1xuICBnbXRpbWU6MSwgICAgIC8vIC0gY29udmVydCBVTklYIHRpbWUgaW50byByZWNvcmQgb3Igc3RyaW5nIHVzaW5nIEdyZWVud2ljaCB0aW1lXG4gICdnb3RvJzoxLCAgICAgLy8gLSBjcmVhdGUgc3BhZ2hldHRpIGNvZGVcbiAgZ3JlcDoxLCAgICAgLy8gLSBsb2NhdGUgZWxlbWVudHMgaW4gYSBsaXN0IHRlc3QgdHJ1ZSBhZ2FpbnN0IGEgZ2l2ZW4gY3JpdGVyaW9uXG4gIGhleDoxLCAgICAgLy8gLSBjb252ZXJ0IGEgc3RyaW5nIHRvIGEgaGV4YWRlY2ltYWwgbnVtYmVyXG4gICdpbXBvcnQnOjEsICAgICAvLyAtIHBhdGNoIGEgbW9kdWxlJ3MgbmFtZXNwYWNlIGludG8geW91ciBvd25cbiAgaW5kZXg6MSwgICAgIC8vIC0gZmluZCBhIHN1YnN0cmluZyB3aXRoaW4gYSBzdHJpbmdcbiAgJ2ludCc6MSwgICAgIC8vIC0gZ2V0IHRoZSBpbnRlZ2VyIHBvcnRpb24gb2YgYSBudW1iZXJcbiAgaW9jdGw6MSwgICAgIC8vIC0gc3lzdGVtLWRlcGVuZGVudCBkZXZpY2UgY29udHJvbCBzeXN0ZW0gY2FsbFxuICAnam9pbic6MSwgICAgIC8vIC0gam9pbiBhIGxpc3QgaW50byBhIHN0cmluZyB1c2luZyBhIHNlcGFyYXRvclxuICBrZXlzOjEsICAgICAvLyAtIHJldHJpZXZlIGxpc3Qgb2YgaW5kaWNlcyBmcm9tIGEgaGFzaFxuICBraWxsOjEsICAgICAvLyAtIHNlbmQgYSBzaWduYWwgdG8gYSBwcm9jZXNzIG9yIHByb2Nlc3MgZ3JvdXBcbiAgbGFzdDoxLCAgICAgLy8gLSBleGl0IGEgYmxvY2sgcHJlbWF0dXJlbHlcbiAgbGM6MSwgICAgIC8vIC0gcmV0dXJuIGxvd2VyLWNhc2UgdmVyc2lvbiBvZiBhIHN0cmluZ1xuICBsY2ZpcnN0OjEsICAgICAvLyAtIHJldHVybiBhIHN0cmluZyB3aXRoIGp1c3QgdGhlIG5leHQgbGV0dGVyIGluIGxvd2VyIGNhc2VcbiAgbGVuZ3RoOjEsICAgICAvLyAtIHJldHVybiB0aGUgbnVtYmVyIG9mIGJ5dGVzIGluIGEgc3RyaW5nXG4gICdsaW5rJzoxLCAgICAgLy8gLSBjcmVhdGUgYSBoYXJkIGxpbmsgaW4gdGhlIGZpbGVzeXN0ZW1cbiAgbGlzdGVuOjEsICAgICAvLyAtIHJlZ2lzdGVyIHlvdXIgc29ja2V0IGFzIGEgc2VydmVyXG4gIGxvY2FsOiAyLCAgICAvLyAtIGNyZWF0ZSBhIHRlbXBvcmFyeSB2YWx1ZSBmb3IgYSBnbG9iYWwgdmFyaWFibGUgKGR5bmFtaWMgc2NvcGluZylcbiAgbG9jYWx0aW1lOjEsICAgICAvLyAtIGNvbnZlcnQgVU5JWCB0aW1lIGludG8gcmVjb3JkIG9yIHN0cmluZyB1c2luZyBsb2NhbCB0aW1lXG4gIGxvY2s6MSwgICAgIC8vIC0gZ2V0IGEgdGhyZWFkIGxvY2sgb24gYSB2YXJpYWJsZSwgc3Vicm91dGluZSwgb3IgbWV0aG9kXG4gICdsb2cnOjEsICAgICAvLyAtIHJldHJpZXZlIHRoZSBuYXR1cmFsIGxvZ2FyaXRobSBmb3IgYSBudW1iZXJcbiAgbHN0YXQ6MSwgICAgIC8vIC0gc3RhdCBhIHN5bWJvbGljIGxpbmtcbiAgbTpudWxsLCAgLy8gLSBtYXRjaCBhIHN0cmluZyB3aXRoIGEgcmVndWxhciBleHByZXNzaW9uIHBhdHRlcm5cbiAgbWFwOjEsICAgICAvLyAtIGFwcGx5IGEgY2hhbmdlIHRvIGEgbGlzdCB0byBnZXQgYmFjayBhIG5ldyBsaXN0IHdpdGggdGhlIGNoYW5nZXNcbiAgbWtkaXI6MSwgICAgIC8vIC0gY3JlYXRlIGEgZGlyZWN0b3J5XG4gIG1zZ2N0bDoxLCAgICAgLy8gLSBTeXNWIElQQyBtZXNzYWdlIGNvbnRyb2wgb3BlcmF0aW9uc1xuICBtc2dnZXQ6MSwgICAgIC8vIC0gZ2V0IFN5c1YgSVBDIG1lc3NhZ2UgcXVldWVcbiAgbXNncmN2OjEsICAgICAvLyAtIHJlY2VpdmUgYSBTeXNWIElQQyBtZXNzYWdlIGZyb20gYSBtZXNzYWdlIHF1ZXVlXG4gIG1zZ3NuZDoxLCAgICAgLy8gLSBzZW5kIGEgU3lzViBJUEMgbWVzc2FnZSB0byBhIG1lc3NhZ2UgcXVldWVcbiAgbXk6IDIsICAgIC8vIC0gZGVjbGFyZSBhbmQgYXNzaWduIGEgbG9jYWwgdmFyaWFibGUgKGxleGljYWwgc2NvcGluZylcbiAgJ25ldyc6MSwgICAgIC8vXG4gIG5leHQ6MSwgICAgIC8vIC0gaXRlcmF0ZSBhIGJsb2NrIHByZW1hdHVyZWx5XG4gIG5vOjEsICAgICAvLyAtIHVuaW1wb3J0IHNvbWUgbW9kdWxlIHN5bWJvbHMgb3Igc2VtYW50aWNzIGF0IGNvbXBpbGUgdGltZVxuICBvY3Q6MSwgICAgIC8vIC0gY29udmVydCBhIHN0cmluZyB0byBhbiBvY3RhbCBudW1iZXJcbiAgb3BlbjoxLCAgICAgLy8gLSBvcGVuIGEgZmlsZSwgcGlwZSwgb3IgZGVzY3JpcHRvclxuICBvcGVuZGlyOjEsICAgICAvLyAtIG9wZW4gYSBkaXJlY3RvcnlcbiAgb3JkOjEsICAgICAvLyAtIGZpbmQgYSBjaGFyYWN0ZXIncyBudW1lcmljIHJlcHJlc2VudGF0aW9uXG4gIG91cjogMiwgICAgLy8gLSBkZWNsYXJlIGFuZCBhc3NpZ24gYSBwYWNrYWdlIHZhcmlhYmxlIChsZXhpY2FsIHNjb3BpbmcpXG4gIHBhY2s6MSwgICAgIC8vIC0gY29udmVydCBhIGxpc3QgaW50byBhIGJpbmFyeSByZXByZXNlbnRhdGlvblxuICAncGFja2FnZSc6MSwgICAgIC8vIC0gZGVjbGFyZSBhIHNlcGFyYXRlIGdsb2JhbCBuYW1lc3BhY2VcbiAgcGlwZToxLCAgICAgLy8gLSBvcGVuIGEgcGFpciBvZiBjb25uZWN0ZWQgZmlsZWhhbmRsZXNcbiAgcG9wOjEsICAgICAvLyAtIHJlbW92ZSB0aGUgbGFzdCBlbGVtZW50IGZyb20gYW4gYXJyYXkgYW5kIHJldHVybiBpdFxuICBwb3M6MSwgICAgIC8vIC0gZmluZCBvciBzZXQgdGhlIG9mZnNldCBmb3IgdGhlIGxhc3QvbmV4dCBtLy9nIHNlYXJjaFxuICBwcmludDoxLCAgICAgLy8gLSBvdXRwdXQgYSBsaXN0IHRvIGEgZmlsZWhhbmRsZVxuICBwcmludGY6MSwgICAgIC8vIC0gb3V0cHV0IGEgZm9ybWF0dGVkIGxpc3QgdG8gYSBmaWxlaGFuZGxlXG4gIHByb3RvdHlwZToxLCAgICAgLy8gLSBnZXQgdGhlIHByb3RvdHlwZSAoaWYgYW55KSBvZiBhIHN1YnJvdXRpbmVcbiAgcHVzaDoxLCAgICAgLy8gLSBhcHBlbmQgb25lIG9yIG1vcmUgZWxlbWVudHMgdG8gYW4gYXJyYXlcbiAgcTpudWxsLCAgLy8gLSBzaW5nbHkgcXVvdGUgYSBzdHJpbmdcbiAgcXE6bnVsbCwgIC8vIC0gZG91Ymx5IHF1b3RlIGEgc3RyaW5nXG4gIHFyOm51bGwsICAvLyAtIENvbXBpbGUgcGF0dGVyblxuICBxdW90ZW1ldGE6bnVsbCwgIC8vIC0gcXVvdGUgcmVndWxhciBleHByZXNzaW9uIG1hZ2ljIGNoYXJhY3RlcnNcbiAgcXc6bnVsbCwgIC8vIC0gcXVvdGUgYSBsaXN0IG9mIHdvcmRzXG4gIHF4Om51bGwsICAvLyAtIGJhY2txdW90ZSBxdW90ZSBhIHN0cmluZ1xuICByYW5kOjEsICAgICAvLyAtIHJldHJpZXZlIHRoZSBuZXh0IHBzZXVkb3JhbmRvbSBudW1iZXJcbiAgcmVhZDoxLCAgICAgLy8gLSBmaXhlZC1sZW5ndGggYnVmZmVyZWQgaW5wdXQgZnJvbSBhIGZpbGVoYW5kbGVcbiAgcmVhZGRpcjoxLCAgICAgLy8gLSBnZXQgYSBkaXJlY3RvcnkgZnJvbSBhIGRpcmVjdG9yeSBoYW5kbGVcbiAgcmVhZGxpbmU6MSwgICAgIC8vIC0gZmV0Y2ggYSByZWNvcmQgZnJvbSBhIGZpbGVcbiAgcmVhZGxpbms6MSwgICAgIC8vIC0gZGV0ZXJtaW5lIHdoZXJlIGEgc3ltYm9saWMgbGluayBpcyBwb2ludGluZ1xuICByZWFkcGlwZToxLCAgICAgLy8gLSBleGVjdXRlIGEgc3lzdGVtIGNvbW1hbmQgYW5kIGNvbGxlY3Qgc3RhbmRhcmQgb3V0cHV0XG4gIHJlY3Y6MSwgICAgIC8vIC0gcmVjZWl2ZSBhIG1lc3NhZ2Ugb3ZlciBhIFNvY2tldFxuICByZWRvOjEsICAgICAvLyAtIHN0YXJ0IHRoaXMgbG9vcCBpdGVyYXRpb24gb3ZlciBhZ2FpblxuICByZWY6MSwgICAgIC8vIC0gZmluZCBvdXQgdGhlIHR5cGUgb2YgdGhpbmcgYmVpbmcgcmVmZXJlbmNlZFxuICByZW5hbWU6MSwgICAgIC8vIC0gY2hhbmdlIGEgZmlsZW5hbWVcbiAgcmVxdWlyZToxLCAgICAgLy8gLSBsb2FkIGluIGV4dGVybmFsIGZ1bmN0aW9ucyBmcm9tIGEgbGlicmFyeSBhdCBydW50aW1lXG4gIHJlc2V0OjEsICAgICAvLyAtIGNsZWFyIGFsbCB2YXJpYWJsZXMgb2YgYSBnaXZlbiBuYW1lXG4gICdyZXR1cm4nOjEsICAgICAvLyAtIGdldCBvdXQgb2YgYSBmdW5jdGlvbiBlYXJseVxuICByZXZlcnNlOjEsICAgICAvLyAtIGZsaXAgYSBzdHJpbmcgb3IgYSBsaXN0XG4gIHJld2luZGRpcjoxLCAgICAgLy8gLSByZXNldCBkaXJlY3RvcnkgaGFuZGxlXG4gIHJpbmRleDoxLCAgICAgLy8gLSByaWdodC10by1sZWZ0IHN1YnN0cmluZyBzZWFyY2hcbiAgcm1kaXI6MSwgICAgIC8vIC0gcmVtb3ZlIGEgZGlyZWN0b3J5XG4gIHM6bnVsbCwgIC8vIC0gcmVwbGFjZSBhIHBhdHRlcm4gd2l0aCBhIHN0cmluZ1xuICBzYXk6MSwgICAgIC8vIC0gcHJpbnQgd2l0aCBuZXdsaW5lXG4gIHNjYWxhcjoxLCAgICAgLy8gLSBmb3JjZSBhIHNjYWxhciBjb250ZXh0XG4gIHNlZWs6MSwgICAgIC8vIC0gcmVwb3NpdGlvbiBmaWxlIHBvaW50ZXIgZm9yIHJhbmRvbS1hY2Nlc3MgSS9PXG4gIHNlZWtkaXI6MSwgICAgIC8vIC0gcmVwb3NpdGlvbiBkaXJlY3RvcnkgcG9pbnRlclxuICBzZWxlY3Q6MSwgICAgIC8vIC0gcmVzZXQgZGVmYXVsdCBvdXRwdXQgb3IgZG8gSS9PIG11bHRpcGxleGluZ1xuICBzZW1jdGw6MSwgICAgIC8vIC0gU3lzViBzZW1hcGhvcmUgY29udHJvbCBvcGVyYXRpb25zXG4gIHNlbWdldDoxLCAgICAgLy8gLSBnZXQgc2V0IG9mIFN5c1Ygc2VtYXBob3Jlc1xuICBzZW1vcDoxLCAgICAgLy8gLSBTeXNWIHNlbWFwaG9yZSBvcGVyYXRpb25zXG4gIHNlbmQ6MSwgICAgIC8vIC0gc2VuZCBhIG1lc3NhZ2Ugb3ZlciBhIHNvY2tldFxuICBzZXRncmVudDoxLCAgICAgLy8gLSBwcmVwYXJlIGdyb3VwIGZpbGUgZm9yIHVzZVxuICBzZXRob3N0ZW50OjEsICAgICAvLyAtIHByZXBhcmUgaG9zdHMgZmlsZSBmb3IgdXNlXG4gIHNldG5ldGVudDoxLCAgICAgLy8gLSBwcmVwYXJlIG5ldHdvcmtzIGZpbGUgZm9yIHVzZVxuICBzZXRwZ3JwOjEsICAgICAvLyAtIHNldCB0aGUgcHJvY2VzcyBncm91cCBvZiBhIHByb2Nlc3NcbiAgc2V0cHJpb3JpdHk6MSwgICAgIC8vIC0gc2V0IGEgcHJvY2VzcydzIG5pY2UgdmFsdWVcbiAgc2V0cHJvdG9lbnQ6MSwgICAgIC8vIC0gcHJlcGFyZSBwcm90b2NvbHMgZmlsZSBmb3IgdXNlXG4gIHNldHB3ZW50OjEsICAgICAvLyAtIHByZXBhcmUgcGFzc3dkIGZpbGUgZm9yIHVzZVxuICBzZXRzZXJ2ZW50OjEsICAgICAvLyAtIHByZXBhcmUgc2VydmljZXMgZmlsZSBmb3IgdXNlXG4gIHNldHNvY2tvcHQ6MSwgICAgIC8vIC0gc2V0IHNvbWUgc29ja2V0IG9wdGlvbnNcbiAgc2hpZnQ6MSwgICAgIC8vIC0gcmVtb3ZlIHRoZSBmaXJzdCBlbGVtZW50IG9mIGFuIGFycmF5LCBhbmQgcmV0dXJuIGl0XG4gIHNobWN0bDoxLCAgICAgLy8gLSBTeXNWIHNoYXJlZCBtZW1vcnkgb3BlcmF0aW9uc1xuICBzaG1nZXQ6MSwgICAgIC8vIC0gZ2V0IFN5c1Ygc2hhcmVkIG1lbW9yeSBzZWdtZW50IGlkZW50aWZpZXJcbiAgc2htcmVhZDoxLCAgICAgLy8gLSByZWFkIFN5c1Ygc2hhcmVkIG1lbW9yeVxuICBzaG13cml0ZToxLCAgICAgLy8gLSB3cml0ZSBTeXNWIHNoYXJlZCBtZW1vcnlcbiAgc2h1dGRvd246MSwgICAgIC8vIC0gY2xvc2UgZG93biBqdXN0IGhhbGYgb2YgYSBzb2NrZXQgY29ubmVjdGlvblxuICAnc2luJzoxLCAgICAgLy8gLSByZXR1cm4gdGhlIHNpbmUgb2YgYSBudW1iZXJcbiAgc2xlZXA6MSwgICAgIC8vIC0gYmxvY2sgZm9yIHNvbWUgbnVtYmVyIG9mIHNlY29uZHNcbiAgc29ja2V0OjEsICAgICAvLyAtIGNyZWF0ZSBhIHNvY2tldFxuICBzb2NrZXRwYWlyOjEsICAgICAvLyAtIGNyZWF0ZSBhIHBhaXIgb2Ygc29ja2V0c1xuICAnc29ydCc6MSwgICAgIC8vIC0gc29ydCBhIGxpc3Qgb2YgdmFsdWVzXG4gIHNwbGljZToxLCAgICAgLy8gLSBhZGQgb3IgcmVtb3ZlIGVsZW1lbnRzIGFueXdoZXJlIGluIGFuIGFycmF5XG4gICdzcGxpdCc6MSwgICAgIC8vIC0gc3BsaXQgdXAgYSBzdHJpbmcgdXNpbmcgYSByZWdleHAgZGVsaW1pdGVyXG4gIHNwcmludGY6MSwgICAgIC8vIC0gZm9ybWF0dGVkIHByaW50IGludG8gYSBzdHJpbmdcbiAgJ3NxcnQnOjEsICAgICAvLyAtIHNxdWFyZSByb290IGZ1bmN0aW9uXG4gIHNyYW5kOjEsICAgICAvLyAtIHNlZWQgdGhlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yXG4gIHN0YXQ6MSwgICAgIC8vIC0gZ2V0IGEgZmlsZSdzIHN0YXR1cyBpbmZvcm1hdGlvblxuICBzdGF0ZToxLCAgICAgLy8gLSBkZWNsYXJlIGFuZCBhc3NpZ24gYSBzdGF0ZSB2YXJpYWJsZSAocGVyc2lzdGVudCBsZXhpY2FsIHNjb3BpbmcpXG4gIHN0dWR5OjEsICAgICAvLyAtIG9wdGltaXplIGlucHV0IGRhdGEgZm9yIHJlcGVhdGVkIHNlYXJjaGVzXG4gICdzdWInOjEsICAgICAvLyAtIGRlY2xhcmUgYSBzdWJyb3V0aW5lLCBwb3NzaWJseSBhbm9ueW1vdXNseVxuICAnc3Vic3RyJzoxLCAgICAgLy8gLSBnZXQgb3IgYWx0ZXIgYSBwb3J0aW9uIG9mIGEgc3RyaW5nXG4gIHN5bWxpbms6MSwgICAgIC8vIC0gY3JlYXRlIGEgc3ltYm9saWMgbGluayB0byBhIGZpbGVcbiAgc3lzY2FsbDoxLCAgICAgLy8gLSBleGVjdXRlIGFuIGFyYml0cmFyeSBzeXN0ZW0gY2FsbFxuICBzeXNvcGVuOjEsICAgICAvLyAtIG9wZW4gYSBmaWxlLCBwaXBlLCBvciBkZXNjcmlwdG9yXG4gIHN5c3JlYWQ6MSwgICAgIC8vIC0gZml4ZWQtbGVuZ3RoIHVuYnVmZmVyZWQgaW5wdXQgZnJvbSBhIGZpbGVoYW5kbGVcbiAgc3lzc2VlazoxLCAgICAgLy8gLSBwb3NpdGlvbiBJL08gcG9pbnRlciBvbiBoYW5kbGUgdXNlZCB3aXRoIHN5c3JlYWQgYW5kIHN5c3dyaXRlXG4gIHN5c3RlbToxLCAgICAgLy8gLSBydW4gYSBzZXBhcmF0ZSBwcm9ncmFtXG4gIHN5c3dyaXRlOjEsICAgICAvLyAtIGZpeGVkLWxlbmd0aCB1bmJ1ZmZlcmVkIG91dHB1dCB0byBhIGZpbGVoYW5kbGVcbiAgdGVsbDoxLCAgICAgLy8gLSBnZXQgY3VycmVudCBzZWVrcG9pbnRlciBvbiBhIGZpbGVoYW5kbGVcbiAgdGVsbGRpcjoxLCAgICAgLy8gLSBnZXQgY3VycmVudCBzZWVrcG9pbnRlciBvbiBhIGRpcmVjdG9yeSBoYW5kbGVcbiAgdGllOjEsICAgICAvLyAtIGJpbmQgYSB2YXJpYWJsZSB0byBhbiBvYmplY3QgY2xhc3NcbiAgdGllZDoxLCAgICAgLy8gLSBnZXQgYSByZWZlcmVuY2UgdG8gdGhlIG9iamVjdCB1bmRlcmx5aW5nIGEgdGllZCB2YXJpYWJsZVxuICB0aW1lOjEsICAgICAvLyAtIHJldHVybiBudW1iZXIgb2Ygc2Vjb25kcyBzaW5jZSAxOTcwXG4gIHRpbWVzOjEsICAgICAvLyAtIHJldHVybiBlbGFwc2VkIHRpbWUgZm9yIHNlbGYgYW5kIGNoaWxkIHByb2Nlc3Nlc1xuICB0cjpudWxsLCAgLy8gLSB0cmFuc2xpdGVyYXRlIGEgc3RyaW5nXG4gIHRydW5jYXRlOjEsICAgICAvLyAtIHNob3J0ZW4gYSBmaWxlXG4gIHVjOjEsICAgICAvLyAtIHJldHVybiB1cHBlci1jYXNlIHZlcnNpb24gb2YgYSBzdHJpbmdcbiAgdWNmaXJzdDoxLCAgICAgLy8gLSByZXR1cm4gYSBzdHJpbmcgd2l0aCBqdXN0IHRoZSBuZXh0IGxldHRlciBpbiB1cHBlciBjYXNlXG4gIHVtYXNrOjEsICAgICAvLyAtIHNldCBmaWxlIGNyZWF0aW9uIG1vZGUgbWFza1xuICB1bmRlZjoxLCAgICAgLy8gLSByZW1vdmUgYSB2YXJpYWJsZSBvciBmdW5jdGlvbiBkZWZpbml0aW9uXG4gIHVubGluazoxLCAgICAgLy8gLSByZW1vdmUgb25lIGxpbmsgdG8gYSBmaWxlXG4gIHVucGFjazoxLCAgICAgLy8gLSBjb252ZXJ0IGJpbmFyeSBzdHJ1Y3R1cmUgaW50byBub3JtYWwgcGVybCB2YXJpYWJsZXNcbiAgdW5zaGlmdDoxLCAgICAgLy8gLSBwcmVwZW5kIG1vcmUgZWxlbWVudHMgdG8gdGhlIGJlZ2lubmluZyBvZiBhIGxpc3RcbiAgdW50aWU6MSwgICAgIC8vIC0gYnJlYWsgYSB0aWUgYmluZGluZyB0byBhIHZhcmlhYmxlXG4gIHVzZToxLCAgICAgLy8gLSBsb2FkIGluIGEgbW9kdWxlIGF0IGNvbXBpbGUgdGltZVxuICB1dGltZToxLCAgICAgLy8gLSBzZXQgYSBmaWxlJ3MgbGFzdCBhY2Nlc3MgYW5kIG1vZGlmeSB0aW1lc1xuICB2YWx1ZXM6MSwgICAgIC8vIC0gcmV0dXJuIGEgbGlzdCBvZiB0aGUgdmFsdWVzIGluIGEgaGFzaFxuICB2ZWM6MSwgICAgIC8vIC0gdGVzdCBvciBzZXQgcGFydGljdWxhciBiaXRzIGluIGEgc3RyaW5nXG4gIHdhaXQ6MSwgICAgIC8vIC0gd2FpdCBmb3IgYW55IGNoaWxkIHByb2Nlc3MgdG8gZGllXG4gIHdhaXRwaWQ6MSwgICAgIC8vIC0gd2FpdCBmb3IgYSBwYXJ0aWN1bGFyIGNoaWxkIHByb2Nlc3MgdG8gZGllXG4gIHdhbnRhcnJheToxLCAgICAgLy8gLSBnZXQgdm9pZCB2cyBzY2FsYXIgdnMgbGlzdCBjb250ZXh0IG9mIGN1cnJlbnQgc3Vicm91dGluZSBjYWxsXG4gIHdhcm46MSwgICAgIC8vIC0gcHJpbnQgZGVidWdnaW5nIGluZm9cbiAgd2hlbjoxLCAgICAgLy9cbiAgd3JpdGU6MSwgICAgIC8vIC0gcHJpbnQgYSBwaWN0dXJlIHJlY29yZFxuICB5Om51bGx9OyAvLyAtIHRyYW5zbGl0ZXJhdGUgYSBzdHJpbmdcblxudmFyIFJYc3R5bGU9XCJzdHJpbmcuc3BlY2lhbFwiO1xudmFyIFJYbW9kaWZpZXJzPS9bZ29zZXhpbWFjcGx1ZF0vOyAgICAgICAgICAgICAgLy8gTk9URTogXCJtXCIsIFwic1wiLCBcInlcIiBhbmQgXCJ0clwiIG5lZWQgdG8gY29ycmVjdCByZWFsIG1vZGlmaWVycyBmb3IgZWFjaCByZWdleHAgdHlwZVxuXG5mdW5jdGlvbiB0b2tlbkNoYWluKHN0cmVhbSxzdGF0ZSxjaGFpbixzdHlsZSx0YWlsKXsgICAgIC8vIE5PVEU6IGNoYWluLmxlbmd0aCA+IDIgaXMgbm90IHdvcmtpbmcgbm93IChpdCdzIGZvciBzWy4uLl1bLi4uXWdlb3M7KVxuICBzdGF0ZS5jaGFpbj1udWxsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMiAgIDN0YWlsXG4gIHN0YXRlLnN0eWxlPW51bGw7XG4gIHN0YXRlLnRhaWw9bnVsbDtcbiAgc3RhdGUudG9rZW5pemU9ZnVuY3Rpb24oc3RyZWFtLHN0YXRlKXtcbiAgICB2YXIgZT1mYWxzZSxjLGk9MDtcbiAgICB3aGlsZShjPXN0cmVhbS5uZXh0KCkpe1xuICAgICAgaWYoYz09PWNoYWluW2ldJiYhZSl7XG4gICAgICAgIGlmKGNoYWluWysraV0hPT11bmRlZmluZWQpe1xuICAgICAgICAgIHN0YXRlLmNoYWluPWNoYWluW2ldO1xuICAgICAgICAgIHN0YXRlLnN0eWxlPXN0eWxlO1xuICAgICAgICAgIHN0YXRlLnRhaWw9dGFpbDt9XG4gICAgICAgIGVsc2UgaWYodGFpbClcbiAgICAgICAgICBzdHJlYW0uZWF0V2hpbGUodGFpbCk7XG4gICAgICAgIHN0YXRlLnRva2VuaXplPXRva2VuUGVybDtcbiAgICAgICAgcmV0dXJuIHN0eWxlO31cbiAgICAgIGU9IWUmJmM9PVwiXFxcXFwiO31cbiAgICByZXR1cm4gc3R5bGU7fTtcbiAgcmV0dXJuIHN0YXRlLnRva2VuaXplKHN0cmVhbSxzdGF0ZSk7fVxuXG5mdW5jdGlvbiB0b2tlblNPTUVUSElORyhzdHJlYW0sc3RhdGUsc3RyaW5nKXtcbiAgc3RhdGUudG9rZW5pemU9ZnVuY3Rpb24oc3RyZWFtLHN0YXRlKXtcbiAgICBpZihzdHJlYW0uc3RyaW5nPT1zdHJpbmcpXG4gICAgICBzdGF0ZS50b2tlbml6ZT10b2tlblBlcmw7XG4gICAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICAgIHJldHVybiBcInN0cmluZ1wiO307XG4gIHJldHVybiBzdGF0ZS50b2tlbml6ZShzdHJlYW0sc3RhdGUpO31cblxuZnVuY3Rpb24gdG9rZW5QZXJsKHN0cmVhbSxzdGF0ZSl7XG4gIGlmKHN0cmVhbS5lYXRTcGFjZSgpKVxuICAgIHJldHVybiBudWxsO1xuICBpZihzdGF0ZS5jaGFpbilcbiAgICByZXR1cm4gdG9rZW5DaGFpbihzdHJlYW0sc3RhdGUsc3RhdGUuY2hhaW4sc3RhdGUuc3R5bGUsc3RhdGUudGFpbCk7XG4gIGlmKHN0cmVhbS5tYXRjaCgvXihcXC0/KChcXGRbXFxkX10qKT9cXC5cXGQrKGVbKy1dP1xcZCspP3xcXGQrXFwuXFxkKil8MHhbXFxkYS1mQS1GX10rfDBiWzAxX10rfFxcZFtcXGRfXSooZVsrLV0/XFxkKyk/KS8pKVxuICAgIHJldHVybiAnbnVtYmVyJztcbiAgaWYoc3RyZWFtLm1hdGNoKC9ePDwoPz1bX2EtekEtWl0pLykpeyAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IDw8U09NRVRISU5HXFxuLi4uXFxuU09NRVRISU5HXFxuXG4gICAgc3RyZWFtLmVhdFdoaWxlKC9cXHcvKTtcbiAgICByZXR1cm4gdG9rZW5TT01FVEhJTkcoc3RyZWFtLHN0YXRlLHN0cmVhbS5jdXJyZW50KCkuc3Vic3RyKDIpKTt9XG4gIGlmKHN0cmVhbS5zb2woKSYmc3RyZWFtLm1hdGNoKC9eXFw9aXRlbSg/IVxcdykvKSl7Ly8gTk9URTogXFxuPWl0ZW0uLi5cXG49Y3V0XFxuXG4gICAgcmV0dXJuIHRva2VuU09NRVRISU5HKHN0cmVhbSxzdGF0ZSwnPWN1dCcpO31cbiAgdmFyIGNoPXN0cmVhbS5uZXh0KCk7XG4gIGlmKGNoPT0nXCInfHxjaD09XCInXCIpeyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6ICcgb3IgXCIgb3IgPDwnU09NRVRISU5HJ1xcbi4uLlxcblNPTUVUSElOR1xcbiBvciA8PFwiU09NRVRISU5HXCJcXG4uLi5cXG5TT01FVEhJTkdcXG5cbiAgICBpZihwcmVmaXgoc3RyZWFtLCAzKT09XCI8PFwiK2NoKXtcbiAgICAgIHZhciBwPXN0cmVhbS5wb3M7XG4gICAgICBzdHJlYW0uZWF0V2hpbGUoL1xcdy8pO1xuICAgICAgdmFyIG49c3RyZWFtLmN1cnJlbnQoKS5zdWJzdHIoMSk7XG4gICAgICBpZihuJiZzdHJlYW0uZWF0KGNoKSlcbiAgICAgICAgcmV0dXJuIHRva2VuU09NRVRISU5HKHN0cmVhbSxzdGF0ZSxuKTtcbiAgICAgIHN0cmVhbS5wb3M9cDt9XG4gICAgcmV0dXJuIHRva2VuQ2hhaW4oc3RyZWFtLHN0YXRlLFtjaF0sXCJzdHJpbmdcIik7fVxuICBpZihjaD09XCJxXCIpe1xuICAgIHZhciBjPWxvb2soc3RyZWFtLCAtMik7XG4gICAgaWYoIShjJiYvXFx3Ly50ZXN0KGMpKSl7XG4gICAgICBjPWxvb2soc3RyZWFtLCAwKTtcbiAgICAgIGlmKGM9PVwieFwiKXtcbiAgICAgICAgYz1sb29rKHN0cmVhbSwgMSk7XG4gICAgICAgIGlmKGM9PVwiKFwiKXtcbiAgICAgICAgICBlYXRTdWZmaXgoc3RyZWFtLCAyKTtcbiAgICAgICAgICByZXR1cm4gdG9rZW5DaGFpbihzdHJlYW0sc3RhdGUsW1wiKVwiXSxSWHN0eWxlLFJYbW9kaWZpZXJzKTt9XG4gICAgICAgIGlmKGM9PVwiW1wiKXtcbiAgICAgICAgICBlYXRTdWZmaXgoc3RyZWFtLCAyKTtcbiAgICAgICAgICByZXR1cm4gdG9rZW5DaGFpbihzdHJlYW0sc3RhdGUsW1wiXVwiXSxSWHN0eWxlLFJYbW9kaWZpZXJzKTt9XG4gICAgICAgIGlmKGM9PVwie1wiKXtcbiAgICAgICAgICBlYXRTdWZmaXgoc3RyZWFtLCAyKTtcbiAgICAgICAgICByZXR1cm4gdG9rZW5DaGFpbihzdHJlYW0sc3RhdGUsW1wifVwiXSxSWHN0eWxlLFJYbW9kaWZpZXJzKTt9XG4gICAgICAgIGlmKGM9PVwiPFwiKXtcbiAgICAgICAgICBlYXRTdWZmaXgoc3RyZWFtLCAyKTtcbiAgICAgICAgICByZXR1cm4gdG9rZW5DaGFpbihzdHJlYW0sc3RhdGUsW1wiPlwiXSxSWHN0eWxlLFJYbW9kaWZpZXJzKTt9XG4gICAgICAgIGlmKC9bXFxeJ1wiIX5cXC9dLy50ZXN0KGMpKXtcbiAgICAgICAgICBlYXRTdWZmaXgoc3RyZWFtLCAxKTtcbiAgICAgICAgICByZXR1cm4gdG9rZW5DaGFpbihzdHJlYW0sc3RhdGUsW3N0cmVhbS5lYXQoYyldLFJYc3R5bGUsUlhtb2RpZmllcnMpO319XG4gICAgICBlbHNlIGlmKGM9PVwicVwiKXtcbiAgICAgICAgYz1sb29rKHN0cmVhbSwgMSk7XG4gICAgICAgIGlmKGM9PVwiKFwiKXtcbiAgICAgICAgICBlYXRTdWZmaXgoc3RyZWFtLCAyKTtcbiAgICAgICAgICByZXR1cm4gdG9rZW5DaGFpbihzdHJlYW0sc3RhdGUsW1wiKVwiXSxcInN0cmluZ1wiKTt9XG4gICAgICAgIGlmKGM9PVwiW1wiKXtcbiAgICAgICAgICBlYXRTdWZmaXgoc3RyZWFtLCAyKTtcbiAgICAgICAgICByZXR1cm4gdG9rZW5DaGFpbihzdHJlYW0sc3RhdGUsW1wiXVwiXSxcInN0cmluZ1wiKTt9XG4gICAgICAgIGlmKGM9PVwie1wiKXtcbiAgICAgICAgICBlYXRTdWZmaXgoc3RyZWFtLCAyKTtcbiAgICAgICAgICByZXR1cm4gdG9rZW5DaGFpbihzdHJlYW0sc3RhdGUsW1wifVwiXSxcInN0cmluZ1wiKTt9XG4gICAgICAgIGlmKGM9PVwiPFwiKXtcbiAgICAgICAgICBlYXRTdWZmaXgoc3RyZWFtLCAyKTtcbiAgICAgICAgICByZXR1cm4gdG9rZW5DaGFpbihzdHJlYW0sc3RhdGUsW1wiPlwiXSxcInN0cmluZ1wiKTt9XG4gICAgICAgIGlmKC9bXFxeJ1wiIX5cXC9dLy50ZXN0KGMpKXtcbiAgICAgICAgICBlYXRTdWZmaXgoc3RyZWFtLCAxKTtcbiAgICAgICAgICByZXR1cm4gdG9rZW5DaGFpbihzdHJlYW0sc3RhdGUsW3N0cmVhbS5lYXQoYyldLFwic3RyaW5nXCIpO319XG4gICAgICBlbHNlIGlmKGM9PVwid1wiKXtcbiAgICAgICAgYz1sb29rKHN0cmVhbSwgMSk7XG4gICAgICAgIGlmKGM9PVwiKFwiKXtcbiAgICAgICAgICBlYXRTdWZmaXgoc3RyZWFtLCAyKTtcbiAgICAgICAgICByZXR1cm4gdG9rZW5DaGFpbihzdHJlYW0sc3RhdGUsW1wiKVwiXSxcImJyYWNrZXRcIik7fVxuICAgICAgICBpZihjPT1cIltcIil7XG4gICAgICAgICAgZWF0U3VmZml4KHN0cmVhbSwgMik7XG4gICAgICAgICAgcmV0dXJuIHRva2VuQ2hhaW4oc3RyZWFtLHN0YXRlLFtcIl1cIl0sXCJicmFja2V0XCIpO31cbiAgICAgICAgaWYoYz09XCJ7XCIpe1xuICAgICAgICAgIGVhdFN1ZmZpeChzdHJlYW0sIDIpO1xuICAgICAgICAgIHJldHVybiB0b2tlbkNoYWluKHN0cmVhbSxzdGF0ZSxbXCJ9XCJdLFwiYnJhY2tldFwiKTt9XG4gICAgICAgIGlmKGM9PVwiPFwiKXtcbiAgICAgICAgICBlYXRTdWZmaXgoc3RyZWFtLCAyKTtcbiAgICAgICAgICByZXR1cm4gdG9rZW5DaGFpbihzdHJlYW0sc3RhdGUsW1wiPlwiXSxcImJyYWNrZXRcIik7fVxuICAgICAgICBpZigvW1xcXidcIiF+XFwvXS8udGVzdChjKSl7XG4gICAgICAgICAgZWF0U3VmZml4KHN0cmVhbSwgMSk7XG4gICAgICAgICAgcmV0dXJuIHRva2VuQ2hhaW4oc3RyZWFtLHN0YXRlLFtzdHJlYW0uZWF0KGMpXSxcImJyYWNrZXRcIik7fX1cbiAgICAgIGVsc2UgaWYoYz09XCJyXCIpe1xuICAgICAgICBjPWxvb2soc3RyZWFtLCAxKTtcbiAgICAgICAgaWYoYz09XCIoXCIpe1xuICAgICAgICAgIGVhdFN1ZmZpeChzdHJlYW0sIDIpO1xuICAgICAgICAgIHJldHVybiB0b2tlbkNoYWluKHN0cmVhbSxzdGF0ZSxbXCIpXCJdLFJYc3R5bGUsUlhtb2RpZmllcnMpO31cbiAgICAgICAgaWYoYz09XCJbXCIpe1xuICAgICAgICAgIGVhdFN1ZmZpeChzdHJlYW0sIDIpO1xuICAgICAgICAgIHJldHVybiB0b2tlbkNoYWluKHN0cmVhbSxzdGF0ZSxbXCJdXCJdLFJYc3R5bGUsUlhtb2RpZmllcnMpO31cbiAgICAgICAgaWYoYz09XCJ7XCIpe1xuICAgICAgICAgIGVhdFN1ZmZpeChzdHJlYW0sIDIpO1xuICAgICAgICAgIHJldHVybiB0b2tlbkNoYWluKHN0cmVhbSxzdGF0ZSxbXCJ9XCJdLFJYc3R5bGUsUlhtb2RpZmllcnMpO31cbiAgICAgICAgaWYoYz09XCI8XCIpe1xuICAgICAgICAgIGVhdFN1ZmZpeChzdHJlYW0sIDIpO1xuICAgICAgICAgIHJldHVybiB0b2tlbkNoYWluKHN0cmVhbSxzdGF0ZSxbXCI+XCJdLFJYc3R5bGUsUlhtb2RpZmllcnMpO31cbiAgICAgICAgaWYoL1tcXF4nXCIhflxcL10vLnRlc3QoYykpe1xuICAgICAgICAgIGVhdFN1ZmZpeChzdHJlYW0sIDEpO1xuICAgICAgICAgIHJldHVybiB0b2tlbkNoYWluKHN0cmVhbSxzdGF0ZSxbc3RyZWFtLmVhdChjKV0sUlhzdHlsZSxSWG1vZGlmaWVycyk7fX1cbiAgICAgIGVsc2UgaWYoL1tcXF4nXCIhflxcLyhcXFt7PF0vLnRlc3QoYykpe1xuICAgICAgICBpZihjPT1cIihcIil7XG4gICAgICAgICAgZWF0U3VmZml4KHN0cmVhbSwgMSk7XG4gICAgICAgICAgcmV0dXJuIHRva2VuQ2hhaW4oc3RyZWFtLHN0YXRlLFtcIilcIl0sXCJzdHJpbmdcIik7fVxuICAgICAgICBpZihjPT1cIltcIil7XG4gICAgICAgICAgZWF0U3VmZml4KHN0cmVhbSwgMSk7XG4gICAgICAgICAgcmV0dXJuIHRva2VuQ2hhaW4oc3RyZWFtLHN0YXRlLFtcIl1cIl0sXCJzdHJpbmdcIik7fVxuICAgICAgICBpZihjPT1cIntcIil7XG4gICAgICAgICAgZWF0U3VmZml4KHN0cmVhbSwgMSk7XG4gICAgICAgICAgcmV0dXJuIHRva2VuQ2hhaW4oc3RyZWFtLHN0YXRlLFtcIn1cIl0sXCJzdHJpbmdcIik7fVxuICAgICAgICBpZihjPT1cIjxcIil7XG4gICAgICAgICAgZWF0U3VmZml4KHN0cmVhbSwgMSk7XG4gICAgICAgICAgcmV0dXJuIHRva2VuQ2hhaW4oc3RyZWFtLHN0YXRlLFtcIj5cIl0sXCJzdHJpbmdcIik7fVxuICAgICAgICBpZigvW1xcXidcIiF+XFwvXS8udGVzdChjKSl7XG4gICAgICAgICAgcmV0dXJuIHRva2VuQ2hhaW4oc3RyZWFtLHN0YXRlLFtzdHJlYW0uZWF0KGMpXSxcInN0cmluZ1wiKTt9fX19XG4gIGlmKGNoPT1cIm1cIil7XG4gICAgdmFyIGM9bG9vayhzdHJlYW0sIC0yKTtcbiAgICBpZighKGMmJi9cXHcvLnRlc3QoYykpKXtcbiAgICAgIGM9c3RyZWFtLmVhdCgvWyhcXFt7PFxcXidcIiF+XFwvXS8pO1xuICAgICAgaWYoYyl7XG4gICAgICAgIGlmKC9bXFxeJ1wiIX5cXC9dLy50ZXN0KGMpKXtcbiAgICAgICAgICByZXR1cm4gdG9rZW5DaGFpbihzdHJlYW0sc3RhdGUsW2NdLFJYc3R5bGUsUlhtb2RpZmllcnMpO31cbiAgICAgICAgaWYoYz09XCIoXCIpe1xuICAgICAgICAgIHJldHVybiB0b2tlbkNoYWluKHN0cmVhbSxzdGF0ZSxbXCIpXCJdLFJYc3R5bGUsUlhtb2RpZmllcnMpO31cbiAgICAgICAgaWYoYz09XCJbXCIpe1xuICAgICAgICAgIHJldHVybiB0b2tlbkNoYWluKHN0cmVhbSxzdGF0ZSxbXCJdXCJdLFJYc3R5bGUsUlhtb2RpZmllcnMpO31cbiAgICAgICAgaWYoYz09XCJ7XCIpe1xuICAgICAgICAgIHJldHVybiB0b2tlbkNoYWluKHN0cmVhbSxzdGF0ZSxbXCJ9XCJdLFJYc3R5bGUsUlhtb2RpZmllcnMpO31cbiAgICAgICAgaWYoYz09XCI8XCIpe1xuICAgICAgICAgIHJldHVybiB0b2tlbkNoYWluKHN0cmVhbSxzdGF0ZSxbXCI+XCJdLFJYc3R5bGUsUlhtb2RpZmllcnMpO319fX1cbiAgaWYoY2g9PVwic1wiKXtcbiAgICB2YXIgYz0vW1xcLz5cXF19KVxcd10vLnRlc3QobG9vayhzdHJlYW0sIC0yKSk7XG4gICAgaWYoIWMpe1xuICAgICAgYz1zdHJlYW0uZWF0KC9bKFxcW3s8XFxeJ1wiIX5cXC9dLyk7XG4gICAgICBpZihjKXtcbiAgICAgICAgaWYoYz09XCJbXCIpXG4gICAgICAgICAgcmV0dXJuIHRva2VuQ2hhaW4oc3RyZWFtLHN0YXRlLFtcIl1cIixcIl1cIl0sUlhzdHlsZSxSWG1vZGlmaWVycyk7XG4gICAgICAgIGlmKGM9PVwie1wiKVxuICAgICAgICAgIHJldHVybiB0b2tlbkNoYWluKHN0cmVhbSxzdGF0ZSxbXCJ9XCIsXCJ9XCJdLFJYc3R5bGUsUlhtb2RpZmllcnMpO1xuICAgICAgICBpZihjPT1cIjxcIilcbiAgICAgICAgICByZXR1cm4gdG9rZW5DaGFpbihzdHJlYW0sc3RhdGUsW1wiPlwiLFwiPlwiXSxSWHN0eWxlLFJYbW9kaWZpZXJzKTtcbiAgICAgICAgaWYoYz09XCIoXCIpXG4gICAgICAgICAgcmV0dXJuIHRva2VuQ2hhaW4oc3RyZWFtLHN0YXRlLFtcIilcIixcIilcIl0sUlhzdHlsZSxSWG1vZGlmaWVycyk7XG4gICAgICAgIHJldHVybiB0b2tlbkNoYWluKHN0cmVhbSxzdGF0ZSxbYyxjXSxSWHN0eWxlLFJYbW9kaWZpZXJzKTt9fX1cbiAgaWYoY2g9PVwieVwiKXtcbiAgICB2YXIgYz0vW1xcLz5cXF19KVxcd10vLnRlc3QobG9vayhzdHJlYW0sIC0yKSk7XG4gICAgaWYoIWMpe1xuICAgICAgYz1zdHJlYW0uZWF0KC9bKFxcW3s8XFxeJ1wiIX5cXC9dLyk7XG4gICAgICBpZihjKXtcbiAgICAgICAgaWYoYz09XCJbXCIpXG4gICAgICAgICAgcmV0dXJuIHRva2VuQ2hhaW4oc3RyZWFtLHN0YXRlLFtcIl1cIixcIl1cIl0sUlhzdHlsZSxSWG1vZGlmaWVycyk7XG4gICAgICAgIGlmKGM9PVwie1wiKVxuICAgICAgICAgIHJldHVybiB0b2tlbkNoYWluKHN0cmVhbSxzdGF0ZSxbXCJ9XCIsXCJ9XCJdLFJYc3R5bGUsUlhtb2RpZmllcnMpO1xuICAgICAgICBpZihjPT1cIjxcIilcbiAgICAgICAgICByZXR1cm4gdG9rZW5DaGFpbihzdHJlYW0sc3RhdGUsW1wiPlwiLFwiPlwiXSxSWHN0eWxlLFJYbW9kaWZpZXJzKTtcbiAgICAgICAgaWYoYz09XCIoXCIpXG4gICAgICAgICAgcmV0dXJuIHRva2VuQ2hhaW4oc3RyZWFtLHN0YXRlLFtcIilcIixcIilcIl0sUlhzdHlsZSxSWG1vZGlmaWVycyk7XG4gICAgICAgIHJldHVybiB0b2tlbkNoYWluKHN0cmVhbSxzdGF0ZSxbYyxjXSxSWHN0eWxlLFJYbW9kaWZpZXJzKTt9fX1cbiAgaWYoY2g9PVwidFwiKXtcbiAgICB2YXIgYz0vW1xcLz5cXF19KVxcd10vLnRlc3QobG9vayhzdHJlYW0sIC0yKSk7XG4gICAgaWYoIWMpe1xuICAgICAgYz1zdHJlYW0uZWF0KFwiclwiKTtpZihjKXtcbiAgICAgICAgYz1zdHJlYW0uZWF0KC9bKFxcW3s8XFxeJ1wiIX5cXC9dLyk7XG4gICAgICAgIGlmKGMpe1xuICAgICAgICAgIGlmKGM9PVwiW1wiKVxuICAgICAgICAgICAgcmV0dXJuIHRva2VuQ2hhaW4oc3RyZWFtLHN0YXRlLFtcIl1cIixcIl1cIl0sUlhzdHlsZSxSWG1vZGlmaWVycyk7XG4gICAgICAgICAgaWYoYz09XCJ7XCIpXG4gICAgICAgICAgICByZXR1cm4gdG9rZW5DaGFpbihzdHJlYW0sc3RhdGUsW1wifVwiLFwifVwiXSxSWHN0eWxlLFJYbW9kaWZpZXJzKTtcbiAgICAgICAgICBpZihjPT1cIjxcIilcbiAgICAgICAgICAgIHJldHVybiB0b2tlbkNoYWluKHN0cmVhbSxzdGF0ZSxbXCI+XCIsXCI+XCJdLFJYc3R5bGUsUlhtb2RpZmllcnMpO1xuICAgICAgICAgIGlmKGM9PVwiKFwiKVxuICAgICAgICAgICAgcmV0dXJuIHRva2VuQ2hhaW4oc3RyZWFtLHN0YXRlLFtcIilcIixcIilcIl0sUlhzdHlsZSxSWG1vZGlmaWVycyk7XG4gICAgICAgICAgcmV0dXJuIHRva2VuQ2hhaW4oc3RyZWFtLHN0YXRlLFtjLGNdLFJYc3R5bGUsUlhtb2RpZmllcnMpO319fX1cbiAgaWYoY2g9PVwiYFwiKXtcbiAgICByZXR1cm4gdG9rZW5DaGFpbihzdHJlYW0sc3RhdGUsW2NoXSxcImJ1aWx0aW5cIik7fVxuICBpZihjaD09XCIvXCIpe1xuICAgIGlmKCEvflxccyokLy50ZXN0KHByZWZpeChzdHJlYW0pKSlcbiAgICAgIHJldHVybiBcIm9wZXJhdG9yXCI7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRva2VuQ2hhaW4oc3RyZWFtLHN0YXRlLFtjaF0sUlhzdHlsZSxSWG1vZGlmaWVycyk7fVxuICBpZihjaD09XCIkXCIpe1xuICAgIHZhciBwPXN0cmVhbS5wb3M7XG4gICAgaWYoc3RyZWFtLmVhdFdoaWxlKC9cXGQvKXx8c3RyZWFtLmVhdChcIntcIikmJnN0cmVhbS5lYXRXaGlsZSgvXFxkLykmJnN0cmVhbS5lYXQoXCJ9XCIpKVxuICAgICAgcmV0dXJuIFwiYnVpbHRpblwiO1xuICAgIGVsc2VcbiAgICAgIHN0cmVhbS5wb3M9cDt9XG4gIGlmKC9bJEAlXS8udGVzdChjaCkpe1xuICAgIHZhciBwPXN0cmVhbS5wb3M7XG4gICAgaWYoc3RyZWFtLmVhdChcIl5cIikmJnN0cmVhbS5lYXQoL1tBLVpdLyl8fCEvW0AkJSZdLy50ZXN0KGxvb2soc3RyZWFtLCAtMikpJiZzdHJlYW0uZWF0KC9bPXxcXFxcXFwtIz9AOzomYH5cXF4hXFxbXFxdKidcIiQrLixcXC88PigpXS8pKXtcbiAgICAgIHZhciBjPXN0cmVhbS5jdXJyZW50KCk7XG4gICAgICBpZihQRVJMW2NdKVxuICAgICAgICByZXR1cm4gXCJidWlsdGluXCI7fVxuICAgIHN0cmVhbS5wb3M9cDt9XG4gIGlmKC9bJEAlJl0vLnRlc3QoY2gpKXtcbiAgICBpZihzdHJlYW0uZWF0V2hpbGUoL1tcXHckXS8pfHxzdHJlYW0uZWF0KFwie1wiKSYmc3RyZWFtLmVhdFdoaWxlKC9bXFx3JF0vKSYmc3RyZWFtLmVhdChcIn1cIikpe1xuICAgICAgdmFyIGM9c3RyZWFtLmN1cnJlbnQoKTtcbiAgICAgIGlmKFBFUkxbY10pXG4gICAgICAgIHJldHVybiBcImJ1aWx0aW5cIjtcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIFwidmFyaWFibGVcIjt9fVxuICBpZihjaD09XCIjXCIpe1xuICAgIGlmKGxvb2soc3RyZWFtLCAtMikhPVwiJFwiKXtcbiAgICAgIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgICAgIHJldHVybiBcImNvbW1lbnRcIjt9fVxuICBpZigvWzorXFwtXFxeKiQmJUA9PD4hP3xcXC9+XFwuXS8udGVzdChjaCkpe1xuICAgIHZhciBwPXN0cmVhbS5wb3M7XG4gICAgc3RyZWFtLmVhdFdoaWxlKC9bOitcXC1cXF4qJCYlQD08PiE/fFxcL35cXC5dLyk7XG4gICAgaWYoUEVSTFtzdHJlYW0uY3VycmVudCgpXSlcbiAgICAgIHJldHVybiBcIm9wZXJhdG9yXCI7XG4gICAgZWxzZVxuICAgICAgc3RyZWFtLnBvcz1wO31cbiAgaWYoY2g9PVwiX1wiKXtcbiAgICBpZihzdHJlYW0ucG9zPT0xKXtcbiAgICAgIGlmKHN1ZmZpeChzdHJlYW0sIDYpPT1cIl9FTkRfX1wiKXtcbiAgICAgICAgcmV0dXJuIHRva2VuQ2hhaW4oc3RyZWFtLHN0YXRlLFsnXFwwJ10sXCJjb21tZW50XCIpO31cbiAgICAgIGVsc2UgaWYoc3VmZml4KHN0cmVhbSwgNyk9PVwiX0RBVEFfX1wiKXtcbiAgICAgICAgcmV0dXJuIHRva2VuQ2hhaW4oc3RyZWFtLHN0YXRlLFsnXFwwJ10sXCJidWlsdGluXCIpO31cbiAgICAgIGVsc2UgaWYoc3VmZml4KHN0cmVhbSwgNyk9PVwiX0NfX1wiKXtcbiAgICAgICAgcmV0dXJuIHRva2VuQ2hhaW4oc3RyZWFtLHN0YXRlLFsnXFwwJ10sXCJzdHJpbmdcIik7fX19XG4gIGlmKC9cXHcvLnRlc3QoY2gpKXtcbiAgICB2YXIgcD1zdHJlYW0ucG9zO1xuICAgIGlmKGxvb2soc3RyZWFtLCAtMik9PVwie1wiJiYobG9vayhzdHJlYW0sIDApPT1cIn1cInx8c3RyZWFtLmVhdFdoaWxlKC9cXHcvKSYmbG9vayhzdHJlYW0sIDApPT1cIn1cIikpXG4gICAgICByZXR1cm4gXCJzdHJpbmdcIjtcbiAgICBlbHNlXG4gICAgICBzdHJlYW0ucG9zPXA7fVxuICBpZigvW0EtWl0vLnRlc3QoY2gpKXtcbiAgICB2YXIgbD1sb29rKHN0cmVhbSwgLTIpO1xuICAgIHZhciBwPXN0cmVhbS5wb3M7XG4gICAgc3RyZWFtLmVhdFdoaWxlKC9bQS1aX10vKTtcbiAgICBpZigvW1xcZGEtel0vLnRlc3QobG9vayhzdHJlYW0sIDApKSl7XG4gICAgICBzdHJlYW0ucG9zPXA7fVxuICAgIGVsc2V7XG4gICAgICB2YXIgYz1QRVJMW3N0cmVhbS5jdXJyZW50KCldO1xuICAgICAgaWYoIWMpXG4gICAgICAgIHJldHVybiBcIm1ldGFcIjtcbiAgICAgIGlmKGNbMV0pXG4gICAgICAgIGM9Y1swXTtcbiAgICAgIGlmKGwhPVwiOlwiKXtcbiAgICAgICAgaWYoYz09MSlcbiAgICAgICAgICByZXR1cm4gXCJrZXl3b3JkXCI7XG4gICAgICAgIGVsc2UgaWYoYz09MilcbiAgICAgICAgICByZXR1cm4gXCJkZWZcIjtcbiAgICAgICAgZWxzZSBpZihjPT0zKVxuICAgICAgICAgIHJldHVybiBcImF0b21cIjtcbiAgICAgICAgZWxzZSBpZihjPT00KVxuICAgICAgICAgIHJldHVybiBcIm9wZXJhdG9yXCI7XG4gICAgICAgIGVsc2UgaWYoYz09NSlcbiAgICAgICAgICByZXR1cm4gXCJidWlsdGluXCI7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXR1cm4gXCJtZXRhXCI7fVxuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gXCJtZXRhXCI7fX1cbiAgaWYoL1thLXpBLVpfXS8udGVzdChjaCkpe1xuICAgIHZhciBsPWxvb2soc3RyZWFtLCAtMik7XG4gICAgc3RyZWFtLmVhdFdoaWxlKC9cXHcvKTtcbiAgICB2YXIgYz1QRVJMW3N0cmVhbS5jdXJyZW50KCldO1xuICAgIGlmKCFjKVxuICAgICAgcmV0dXJuIFwibWV0YVwiO1xuICAgIGlmKGNbMV0pXG4gICAgICBjPWNbMF07XG4gICAgaWYobCE9XCI6XCIpe1xuICAgICAgaWYoYz09MSlcbiAgICAgICAgcmV0dXJuIFwia2V5d29yZFwiO1xuICAgICAgZWxzZSBpZihjPT0yKVxuICAgICAgICByZXR1cm4gXCJkZWZcIjtcbiAgICAgIGVsc2UgaWYoYz09MylcbiAgICAgICAgcmV0dXJuIFwiYXRvbVwiO1xuICAgICAgZWxzZSBpZihjPT00KVxuICAgICAgICByZXR1cm4gXCJvcGVyYXRvclwiO1xuICAgICAgZWxzZSBpZihjPT01KVxuICAgICAgICByZXR1cm4gXCJidWlsdGluXCI7XG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiBcIm1ldGFcIjt9XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIFwibWV0YVwiO31cbiAgcmV0dXJuIG51bGw7fVxuXG5leHBvcnQgY29uc3QgcGVybCA9IHtcbiAgc3RhcnRTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRva2VuaXplOiB0b2tlblBlcmwsXG4gICAgICBjaGFpbjogbnVsbCxcbiAgICAgIHN0eWxlOiBudWxsLFxuICAgICAgdGFpbDogbnVsbFxuICAgIH07XG4gIH0sXG4gIHRva2VuOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgcmV0dXJuIChzdGF0ZS50b2tlbml6ZSB8fCB0b2tlblBlcmwpKHN0cmVhbSwgc3RhdGUpO1xuICB9LFxuICBsYW5ndWFnZURhdGE6IHtcbiAgICBjb21tZW50VG9rZW5zOiB7bGluZTogXCIjXCJ9LFxuICAgIHdvcmRDaGFyczogXCIkXCJcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==