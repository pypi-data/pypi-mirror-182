"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_forth_js"],{

/***/ "./node_modules/@codemirror/legacy-modes/mode/forth.js":
/*!*************************************************************!*\
  !*** ./node_modules/@codemirror/legacy-modes/mode/forth.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "forth": () => (/* binding */ forth)
/* harmony export */ });
function toWordList(words) {
  var ret = [];
  words.split(' ').forEach(function(e){
    ret.push({name: e});
  });
  return ret;
}

var coreWordList = toWordList(
  'INVERT AND OR XOR\
 2* 2/ LSHIFT RSHIFT\
 0= = 0< < > U< MIN MAX\
 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP\
 >R R> R@\
 + - 1+ 1- ABS NEGATE\
 S>D * M* UM*\
 FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD\
 HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2!\
 ALIGN ALIGNED +! ALLOT\
 CHAR [CHAR] [ ] BL\
 FIND EXECUTE IMMEDIATE COUNT LITERAL STATE\
 ; DOES> >BODY\
 EVALUATE\
 SOURCE >IN\
 <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL\
 FILL MOVE\
 . CR EMIT SPACE SPACES TYPE U. .R U.R\
 ACCEPT\
 TRUE FALSE\
 <> U> 0<> 0>\
 NIP TUCK ROLL PICK\
 2>R 2R@ 2R>\
 WITHIN UNUSED MARKER\
 I J\
 TO\
 COMPILE, [COMPILE]\
 SAVE-INPUT RESTORE-INPUT\
 PAD ERASE\
 2LITERAL DNEGATE\
 D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS\
 M+ M*/ D. D.R 2ROT DU<\
 CATCH THROW\
 FREE RESIZE ALLOCATE\
 CS-PICK CS-ROLL\
 GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER\
 PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER\
 -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL');

var immediateWordList = toWordList('IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE');

function searchWordList (wordList, word) {
  var i;
  for (i = wordList.length - 1; i >= 0; i--) {
    if (wordList[i].name === word.toUpperCase()) {
      return wordList[i];
    }
  }
  return undefined;
}
const forth = {
  startState: function() {
    return {
      state: '',
      base: 10,
      coreWordList: coreWordList,
      immediateWordList: immediateWordList,
      wordList: []
    };
  },
  token: function (stream, stt) {
    var mat;
    if (stream.eatSpace()) {
      return null;
    }
    if (stt.state === '') { // interpretation
      if (stream.match(/^(\]|:NONAME)(\s|$)/i)) {
        stt.state = ' compilation';
        return 'builtin';
      }
      mat = stream.match(/^(\:)\s+(\S+)(\s|$)+/);
      if (mat) {
        stt.wordList.push({name: mat[2].toUpperCase()});
        stt.state = ' compilation';
        return 'def';
      }
      mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\s+(\S+)(\s|$)+/i);
      if (mat) {
        stt.wordList.push({name: mat[2].toUpperCase()});
        return 'def';
      }
      mat = stream.match(/^(\'|\[\'\])\s+(\S+)(\s|$)+/);
      if (mat) {
        return 'builtin'
      }
    } else { // compilation
      // ; [
      if (stream.match(/^(\;|\[)(\s)/)) {
        stt.state = '';
        stream.backUp(1);
        return 'builtin';
      }
      if (stream.match(/^(\;|\[)($)/)) {
        stt.state = '';
        return 'builtin';
      }
      if (stream.match(/^(POSTPONE)\s+\S+(\s|$)+/)) {
        return 'builtin';
      }
    }

    // dynamic wordlist
    mat = stream.match(/^(\S+)(\s+|$)/);
    if (mat) {
      if (searchWordList(stt.wordList, mat[1]) !== undefined) {
        return 'variable';
      }

      // comments
      if (mat[1] === '\\') {
        stream.skipToEnd();
        return 'comment';
      }

      // core words
      if (searchWordList(stt.coreWordList, mat[1]) !== undefined) {
        return 'builtin';
      }
      if (searchWordList(stt.immediateWordList, mat[1]) !== undefined) {
        return 'keyword';
      }

      if (mat[1] === '(') {
        stream.eatWhile(function (s) { return s !== ')'; });
        stream.eat(')');
        return 'comment';
      }

      // // strings
      if (mat[1] === '.(') {
        stream.eatWhile(function (s) { return s !== ')'; });
        stream.eat(')');
        return 'string';
      }
      if (mat[1] === 'S"' || mat[1] === '."' || mat[1] === 'C"') {
        stream.eatWhile(function (s) { return s !== '"'; });
        stream.eat('"');
        return 'string';
      }

      // numbers
      if (mat[1] - 0xfffffffff) {
        return 'number';
      }
      // if (mat[1].match(/^[-+]?[0-9]+\.[0-9]*/)) {
      //     return 'number';
      // }

      return 'atom';
    }
  }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfZm9ydGhfanMuNDhkMzA1YmZkNTE5ODk4ZjAzNmYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0QixHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsZ0NBQWdDLFFBQVE7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDJCQUEyQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDJCQUEyQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLE9BQU87QUFDYixXQUFXO0FBQ1gsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUNBQXVDLG1CQUFtQjtBQUMxRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVDQUF1QyxtQkFBbUI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsbUJBQW1CO0FBQzFEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci9sZWdhY3ktbW9kZXMvbW9kZS9mb3J0aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB0b1dvcmRMaXN0KHdvcmRzKSB7XG4gIHZhciByZXQgPSBbXTtcbiAgd29yZHMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe1xuICAgIHJldC5wdXNoKHtuYW1lOiBlfSk7XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufVxuXG52YXIgY29yZVdvcmRMaXN0ID0gdG9Xb3JkTGlzdChcbiAgJ0lOVkVSVCBBTkQgT1IgWE9SXFxcbiAyKiAyLyBMU0hJRlQgUlNISUZUXFxcbiAwPSA9IDA8IDwgPiBVPCBNSU4gTUFYXFxcbiAyRFJPUCAyRFVQIDJPVkVSIDJTV0FQID9EVVAgREVQVEggRFJPUCBEVVAgT1ZFUiBST1QgU1dBUFxcXG4gPlIgUj4gUkBcXFxuICsgLSAxKyAxLSBBQlMgTkVHQVRFXFxcbiBTPkQgKiBNKiBVTSpcXFxuIEZNL01PRCBTTS9SRU0gVU0vTU9EICovICovTU9EIC8gL01PRCBNT0RcXFxuIEhFUkUgLCBAICEgQ0VMTCsgQ0VMTFMgQywgQ0AgQyEgQ0hBUlMgMkAgMiFcXFxuIEFMSUdOIEFMSUdORUQgKyEgQUxMT1RcXFxuIENIQVIgW0NIQVJdIFsgXSBCTFxcXG4gRklORCBFWEVDVVRFIElNTUVESUFURSBDT1VOVCBMSVRFUkFMIFNUQVRFXFxcbiA7IERPRVM+ID5CT0RZXFxcbiBFVkFMVUFURVxcXG4gU09VUkNFID5JTlxcXG4gPCMgIyAjUyAjPiBIT0xEIFNJR04gQkFTRSA+TlVNQkVSIEhFWCBERUNJTUFMXFxcbiBGSUxMIE1PVkVcXFxuIC4gQ1IgRU1JVCBTUEFDRSBTUEFDRVMgVFlQRSBVLiAuUiBVLlJcXFxuIEFDQ0VQVFxcXG4gVFJVRSBGQUxTRVxcXG4gPD4gVT4gMDw+IDA+XFxcbiBOSVAgVFVDSyBST0xMIFBJQ0tcXFxuIDI+UiAyUkAgMlI+XFxcbiBXSVRISU4gVU5VU0VEIE1BUktFUlxcXG4gSSBKXFxcbiBUT1xcXG4gQ09NUElMRSwgW0NPTVBJTEVdXFxcbiBTQVZFLUlOUFVUIFJFU1RPUkUtSU5QVVRcXFxuIFBBRCBFUkFTRVxcXG4gMkxJVEVSQUwgRE5FR0FURVxcXG4gRC0gRCsgRDA8IEQwPSBEMiogRDIvIEQ8IEQ9IERNQVggRE1JTiBEPlMgREFCU1xcXG4gTSsgTSovIEQuIEQuUiAyUk9UIERVPFxcXG4gQ0FUQ0ggVEhST1dcXFxuIEZSRUUgUkVTSVpFIEFMTE9DQVRFXFxcbiBDUy1QSUNLIENTLVJPTExcXFxuIEdFVC1DVVJSRU5UIFNFVC1DVVJSRU5UIEZPUlRILVdPUkRMSVNUIEdFVC1PUkRFUiBTRVQtT1JERVJcXFxuIFBSRVZJT1VTIFNFQVJDSC1XT1JETElTVCBXT1JETElTVCBGSU5EIEFMU08gT05MWSBGT1JUSCBERUZJTklUSU9OUyBPUkRFUlxcXG4gLVRSQUlMSU5HIC9TVFJJTkcgU0VBUkNIIENPTVBBUkUgQ01PVkUgQ01PVkU+IEJMQU5LIFNMSVRFUkFMJyk7XG5cbnZhciBpbW1lZGlhdGVXb3JkTGlzdCA9IHRvV29yZExpc3QoJ0lGIEVMU0UgVEhFTiBCRUdJTiBXSElMRSBSRVBFQVQgVU5USUwgUkVDVVJTRSBbSUZdIFtFTFNFXSBbVEhFTl0gP0RPIERPIExPT1AgK0xPT1AgVU5MT09QIExFQVZFIEVYSVQgQUdBSU4gQ0FTRSBPRiBFTkRPRiBFTkRDQVNFJyk7XG5cbmZ1bmN0aW9uIHNlYXJjaFdvcmRMaXN0ICh3b3JkTGlzdCwgd29yZCkge1xuICB2YXIgaTtcbiAgZm9yIChpID0gd29yZExpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAod29yZExpc3RbaV0ubmFtZSA9PT0gd29yZC50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICByZXR1cm4gd29yZExpc3RbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5leHBvcnQgY29uc3QgZm9ydGggPSB7XG4gIHN0YXJ0U3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0ZTogJycsXG4gICAgICBiYXNlOiAxMCxcbiAgICAgIGNvcmVXb3JkTGlzdDogY29yZVdvcmRMaXN0LFxuICAgICAgaW1tZWRpYXRlV29yZExpc3Q6IGltbWVkaWF0ZVdvcmRMaXN0LFxuICAgICAgd29yZExpc3Q6IFtdXG4gICAgfTtcbiAgfSxcbiAgdG9rZW46IGZ1bmN0aW9uIChzdHJlYW0sIHN0dCkge1xuICAgIHZhciBtYXQ7XG4gICAgaWYgKHN0cmVhbS5lYXRTcGFjZSgpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHN0dC5zdGF0ZSA9PT0gJycpIHsgLy8gaW50ZXJwcmV0YXRpb25cbiAgICAgIGlmIChzdHJlYW0ubWF0Y2goL14oXFxdfDpOT05BTUUpKFxcc3wkKS9pKSkge1xuICAgICAgICBzdHQuc3RhdGUgPSAnIGNvbXBpbGF0aW9uJztcbiAgICAgICAgcmV0dXJuICdidWlsdGluJztcbiAgICAgIH1cbiAgICAgIG1hdCA9IHN0cmVhbS5tYXRjaCgvXihcXDopXFxzKyhcXFMrKShcXHN8JCkrLyk7XG4gICAgICBpZiAobWF0KSB7XG4gICAgICAgIHN0dC53b3JkTGlzdC5wdXNoKHtuYW1lOiBtYXRbMl0udG9VcHBlckNhc2UoKX0pO1xuICAgICAgICBzdHQuc3RhdGUgPSAnIGNvbXBpbGF0aW9uJztcbiAgICAgICAgcmV0dXJuICdkZWYnO1xuICAgICAgfVxuICAgICAgbWF0ID0gc3RyZWFtLm1hdGNoKC9eKFZBUklBQkxFfDJWQVJJQUJMRXxDT05TVEFOVHwyQ09OU1RBTlR8Q1JFQVRFfFBPU1RQT05FfFZBTFVFfFdPUkQpXFxzKyhcXFMrKShcXHN8JCkrL2kpO1xuICAgICAgaWYgKG1hdCkge1xuICAgICAgICBzdHQud29yZExpc3QucHVzaCh7bmFtZTogbWF0WzJdLnRvVXBwZXJDYXNlKCl9KTtcbiAgICAgICAgcmV0dXJuICdkZWYnO1xuICAgICAgfVxuICAgICAgbWF0ID0gc3RyZWFtLm1hdGNoKC9eKFxcJ3xcXFtcXCdcXF0pXFxzKyhcXFMrKShcXHN8JCkrLyk7XG4gICAgICBpZiAobWF0KSB7XG4gICAgICAgIHJldHVybiAnYnVpbHRpbidcbiAgICAgIH1cbiAgICB9IGVsc2UgeyAvLyBjb21waWxhdGlvblxuICAgICAgLy8gOyBbXG4gICAgICBpZiAoc3RyZWFtLm1hdGNoKC9eKFxcO3xcXFspKFxccykvKSkge1xuICAgICAgICBzdHQuc3RhdGUgPSAnJztcbiAgICAgICAgc3RyZWFtLmJhY2tVcCgxKTtcbiAgICAgICAgcmV0dXJuICdidWlsdGluJztcbiAgICAgIH1cbiAgICAgIGlmIChzdHJlYW0ubWF0Y2goL14oXFw7fFxcWykoJCkvKSkge1xuICAgICAgICBzdHQuc3RhdGUgPSAnJztcbiAgICAgICAgcmV0dXJuICdidWlsdGluJztcbiAgICAgIH1cbiAgICAgIGlmIChzdHJlYW0ubWF0Y2goL14oUE9TVFBPTkUpXFxzK1xcUysoXFxzfCQpKy8pKSB7XG4gICAgICAgIHJldHVybiAnYnVpbHRpbic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZHluYW1pYyB3b3JkbGlzdFxuICAgIG1hdCA9IHN0cmVhbS5tYXRjaCgvXihcXFMrKShcXHMrfCQpLyk7XG4gICAgaWYgKG1hdCkge1xuICAgICAgaWYgKHNlYXJjaFdvcmRMaXN0KHN0dC53b3JkTGlzdCwgbWF0WzFdKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAndmFyaWFibGUnO1xuICAgICAgfVxuXG4gICAgICAvLyBjb21tZW50c1xuICAgICAgaWYgKG1hdFsxXSA9PT0gJ1xcXFwnKSB7XG4gICAgICAgIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgICAgICAgcmV0dXJuICdjb21tZW50JztcbiAgICAgIH1cblxuICAgICAgLy8gY29yZSB3b3Jkc1xuICAgICAgaWYgKHNlYXJjaFdvcmRMaXN0KHN0dC5jb3JlV29yZExpc3QsIG1hdFsxXSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gJ2J1aWx0aW4nO1xuICAgICAgfVxuICAgICAgaWYgKHNlYXJjaFdvcmRMaXN0KHN0dC5pbW1lZGlhdGVXb3JkTGlzdCwgbWF0WzFdKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAna2V5d29yZCc7XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXRbMV0gPT09ICcoJykge1xuICAgICAgICBzdHJlYW0uZWF0V2hpbGUoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMgIT09ICcpJzsgfSk7XG4gICAgICAgIHN0cmVhbS5lYXQoJyknKTtcbiAgICAgICAgcmV0dXJuICdjb21tZW50JztcbiAgICAgIH1cblxuICAgICAgLy8gLy8gc3RyaW5nc1xuICAgICAgaWYgKG1hdFsxXSA9PT0gJy4oJykge1xuICAgICAgICBzdHJlYW0uZWF0V2hpbGUoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMgIT09ICcpJzsgfSk7XG4gICAgICAgIHN0cmVhbS5lYXQoJyknKTtcbiAgICAgICAgcmV0dXJuICdzdHJpbmcnO1xuICAgICAgfVxuICAgICAgaWYgKG1hdFsxXSA9PT0gJ1NcIicgfHwgbWF0WzFdID09PSAnLlwiJyB8fCBtYXRbMV0gPT09ICdDXCInKSB7XG4gICAgICAgIHN0cmVhbS5lYXRXaGlsZShmdW5jdGlvbiAocykgeyByZXR1cm4gcyAhPT0gJ1wiJzsgfSk7XG4gICAgICAgIHN0cmVhbS5lYXQoJ1wiJyk7XG4gICAgICAgIHJldHVybiAnc3RyaW5nJztcbiAgICAgIH1cblxuICAgICAgLy8gbnVtYmVyc1xuICAgICAgaWYgKG1hdFsxXSAtIDB4ZmZmZmZmZmZmKSB7XG4gICAgICAgIHJldHVybiAnbnVtYmVyJztcbiAgICAgIH1cbiAgICAgIC8vIGlmIChtYXRbMV0ubWF0Y2goL15bLStdP1swLTldK1xcLlswLTldKi8pKSB7XG4gICAgICAvLyAgICAgcmV0dXJuICdudW1iZXInO1xuICAgICAgLy8gfVxuXG4gICAgICByZXR1cm4gJ2F0b20nO1xuICAgIH1cbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==