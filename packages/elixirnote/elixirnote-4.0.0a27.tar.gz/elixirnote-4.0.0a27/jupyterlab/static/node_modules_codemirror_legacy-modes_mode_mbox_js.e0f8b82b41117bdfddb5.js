"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_mbox_js"],{

/***/ "./node_modules/@codemirror/legacy-modes/mode/mbox.js":
/*!************************************************************!*\
  !*** ./node_modules/@codemirror/legacy-modes/mode/mbox.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mbox": () => (/* binding */ mbox)
/* harmony export */ });
var rfc2822 = [
  "From", "Sender", "Reply-To", "To", "Cc", "Bcc", "Message-ID",
  "In-Reply-To", "References", "Resent-From", "Resent-Sender", "Resent-To",
  "Resent-Cc", "Resent-Bcc", "Resent-Message-ID", "Return-Path", "Received"
];
var rfc2822NoEmail = [
  "Date", "Subject", "Comments", "Keywords", "Resent-Date"
];

var whitespace = /^[ \t]/;
var separator = /^From /; // See RFC 4155
var rfc2822Header = new RegExp("^(" + rfc2822.join("|") + "): ");
var rfc2822HeaderNoEmail = new RegExp("^(" + rfc2822NoEmail.join("|") + "): ");
var header = /^[^:]+:/; // Optional fields defined in RFC 2822
var email = /^[^ ]+@[^ ]+/;
var untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;
var bracketedEmail = /^<.*?>/;
var untilBracketedEmail = /^.*?(?=<.*>)/;

function styleForHeader(header) {
  if (header === "Subject") return "header";
  return "string";
}

function readToken(stream, state) {
  if (stream.sol()) {
    // From last line
    state.inSeparator = false;
    if (state.inHeader && stream.match(whitespace)) {
      // Header folding
      return null;
    } else {
      state.inHeader = false;
      state.header = null;
    }

    if (stream.match(separator)) {
      state.inHeaders = true;
      state.inSeparator = true;
      return "atom";
    }

    var match;
    var emailPermitted = false;
    if ((match = stream.match(rfc2822HeaderNoEmail)) ||
        (emailPermitted = true) && (match = stream.match(rfc2822Header))) {
      state.inHeaders = true;
      state.inHeader = true;
      state.emailPermitted = emailPermitted;
      state.header = match[1];
      return "atom";
    }

    // Use vim's heuristics: recognize custom headers only if the line is in a
    // block of legitimate headers.
    if (state.inHeaders && (match = stream.match(header))) {
      state.inHeader = true;
      state.emailPermitted = true;
      state.header = match[1];
      return "atom";
    }

    state.inHeaders = false;
    stream.skipToEnd();
    return null;
  }

  if (state.inSeparator) {
    if (stream.match(email)) return "link";
    if (stream.match(untilEmail)) return "atom";
    stream.skipToEnd();
    return "atom";
  }

  if (state.inHeader) {
    var style = styleForHeader(state.header);

    if (state.emailPermitted) {
      if (stream.match(bracketedEmail)) return style + " link";
      if (stream.match(untilBracketedEmail)) return style;
    }
    stream.skipToEnd();
    return style;
  }

  stream.skipToEnd();
  return null;
};

const mbox = {
  startState: function() {
    return {
      // Is in a mbox separator
      inSeparator: false,
      // Is in a mail header
      inHeader: false,
      // If bracketed email is permitted. Only applicable when inHeader
      emailPermitted: false,
      // Name of current header
      header: null,
      // Is in a region of mail headers
      inHeaders: false
    };
  },
  token: readToken,
  blankLine: function(state) {
    state.inHeaders = state.inSeparator = state.inHeader = false;
  },
  languageData: {
    autocomplete: rfc2822.concat(rfc2822NoEmail)
  }
}



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfbWJveF9qcy5lMGY4YjgyYjQxMTE3YmRmZGRiNS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL21ib3guanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHJmYzI4MjIgPSBbXG4gIFwiRnJvbVwiLCBcIlNlbmRlclwiLCBcIlJlcGx5LVRvXCIsIFwiVG9cIiwgXCJDY1wiLCBcIkJjY1wiLCBcIk1lc3NhZ2UtSURcIixcbiAgXCJJbi1SZXBseS1Ub1wiLCBcIlJlZmVyZW5jZXNcIiwgXCJSZXNlbnQtRnJvbVwiLCBcIlJlc2VudC1TZW5kZXJcIiwgXCJSZXNlbnQtVG9cIixcbiAgXCJSZXNlbnQtQ2NcIiwgXCJSZXNlbnQtQmNjXCIsIFwiUmVzZW50LU1lc3NhZ2UtSURcIiwgXCJSZXR1cm4tUGF0aFwiLCBcIlJlY2VpdmVkXCJcbl07XG52YXIgcmZjMjgyMk5vRW1haWwgPSBbXG4gIFwiRGF0ZVwiLCBcIlN1YmplY3RcIiwgXCJDb21tZW50c1wiLCBcIktleXdvcmRzXCIsIFwiUmVzZW50LURhdGVcIlxuXTtcblxudmFyIHdoaXRlc3BhY2UgPSAvXlsgXFx0XS87XG52YXIgc2VwYXJhdG9yID0gL15Gcm9tIC87IC8vIFNlZSBSRkMgNDE1NVxudmFyIHJmYzI4MjJIZWFkZXIgPSBuZXcgUmVnRXhwKFwiXihcIiArIHJmYzI4MjIuam9pbihcInxcIikgKyBcIik6IFwiKTtcbnZhciByZmMyODIySGVhZGVyTm9FbWFpbCA9IG5ldyBSZWdFeHAoXCJeKFwiICsgcmZjMjgyMk5vRW1haWwuam9pbihcInxcIikgKyBcIik6IFwiKTtcbnZhciBoZWFkZXIgPSAvXlteOl0rOi87IC8vIE9wdGlvbmFsIGZpZWxkcyBkZWZpbmVkIGluIFJGQyAyODIyXG52YXIgZW1haWwgPSAvXlteIF0rQFteIF0rLztcbnZhciB1bnRpbEVtYWlsID0gL14uKj8oPz1bXiBdKz9AW14gXSspLztcbnZhciBicmFja2V0ZWRFbWFpbCA9IC9ePC4qPz4vO1xudmFyIHVudGlsQnJhY2tldGVkRW1haWwgPSAvXi4qPyg/PTwuKj4pLztcblxuZnVuY3Rpb24gc3R5bGVGb3JIZWFkZXIoaGVhZGVyKSB7XG4gIGlmIChoZWFkZXIgPT09IFwiU3ViamVjdFwiKSByZXR1cm4gXCJoZWFkZXJcIjtcbiAgcmV0dXJuIFwic3RyaW5nXCI7XG59XG5cbmZ1bmN0aW9uIHJlYWRUb2tlbihzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdHJlYW0uc29sKCkpIHtcbiAgICAvLyBGcm9tIGxhc3QgbGluZVxuICAgIHN0YXRlLmluU2VwYXJhdG9yID0gZmFsc2U7XG4gICAgaWYgKHN0YXRlLmluSGVhZGVyICYmIHN0cmVhbS5tYXRjaCh3aGl0ZXNwYWNlKSkge1xuICAgICAgLy8gSGVhZGVyIGZvbGRpbmdcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5pbkhlYWRlciA9IGZhbHNlO1xuICAgICAgc3RhdGUuaGVhZGVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoc3RyZWFtLm1hdGNoKHNlcGFyYXRvcikpIHtcbiAgICAgIHN0YXRlLmluSGVhZGVycyA9IHRydWU7XG4gICAgICBzdGF0ZS5pblNlcGFyYXRvciA9IHRydWU7XG4gICAgICByZXR1cm4gXCJhdG9tXCI7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoO1xuICAgIHZhciBlbWFpbFBlcm1pdHRlZCA9IGZhbHNlO1xuICAgIGlmICgobWF0Y2ggPSBzdHJlYW0ubWF0Y2gocmZjMjgyMkhlYWRlck5vRW1haWwpKSB8fFxuICAgICAgICAoZW1haWxQZXJtaXR0ZWQgPSB0cnVlKSAmJiAobWF0Y2ggPSBzdHJlYW0ubWF0Y2gocmZjMjgyMkhlYWRlcikpKSB7XG4gICAgICBzdGF0ZS5pbkhlYWRlcnMgPSB0cnVlO1xuICAgICAgc3RhdGUuaW5IZWFkZXIgPSB0cnVlO1xuICAgICAgc3RhdGUuZW1haWxQZXJtaXR0ZWQgPSBlbWFpbFBlcm1pdHRlZDtcbiAgICAgIHN0YXRlLmhlYWRlciA9IG1hdGNoWzFdO1xuICAgICAgcmV0dXJuIFwiYXRvbVwiO1xuICAgIH1cblxuICAgIC8vIFVzZSB2aW0ncyBoZXVyaXN0aWNzOiByZWNvZ25pemUgY3VzdG9tIGhlYWRlcnMgb25seSBpZiB0aGUgbGluZSBpcyBpbiBhXG4gICAgLy8gYmxvY2sgb2YgbGVnaXRpbWF0ZSBoZWFkZXJzLlxuICAgIGlmIChzdGF0ZS5pbkhlYWRlcnMgJiYgKG1hdGNoID0gc3RyZWFtLm1hdGNoKGhlYWRlcikpKSB7XG4gICAgICBzdGF0ZS5pbkhlYWRlciA9IHRydWU7XG4gICAgICBzdGF0ZS5lbWFpbFBlcm1pdHRlZCA9IHRydWU7XG4gICAgICBzdGF0ZS5oZWFkZXIgPSBtYXRjaFsxXTtcbiAgICAgIHJldHVybiBcImF0b21cIjtcbiAgICB9XG5cbiAgICBzdGF0ZS5pbkhlYWRlcnMgPSBmYWxzZTtcbiAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoc3RhdGUuaW5TZXBhcmF0b3IpIHtcbiAgICBpZiAoc3RyZWFtLm1hdGNoKGVtYWlsKSkgcmV0dXJuIFwibGlua1wiO1xuICAgIGlmIChzdHJlYW0ubWF0Y2godW50aWxFbWFpbCkpIHJldHVybiBcImF0b21cIjtcbiAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgcmV0dXJuIFwiYXRvbVwiO1xuICB9XG5cbiAgaWYgKHN0YXRlLmluSGVhZGVyKSB7XG4gICAgdmFyIHN0eWxlID0gc3R5bGVGb3JIZWFkZXIoc3RhdGUuaGVhZGVyKTtcblxuICAgIGlmIChzdGF0ZS5lbWFpbFBlcm1pdHRlZCkge1xuICAgICAgaWYgKHN0cmVhbS5tYXRjaChicmFja2V0ZWRFbWFpbCkpIHJldHVybiBzdHlsZSArIFwiIGxpbmtcIjtcbiAgICAgIGlmIChzdHJlYW0ubWF0Y2godW50aWxCcmFja2V0ZWRFbWFpbCkpIHJldHVybiBzdHlsZTtcbiAgICB9XG4gICAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgbWJveCA9IHtcbiAgc3RhcnRTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIElzIGluIGEgbWJveCBzZXBhcmF0b3JcbiAgICAgIGluU2VwYXJhdG9yOiBmYWxzZSxcbiAgICAgIC8vIElzIGluIGEgbWFpbCBoZWFkZXJcbiAgICAgIGluSGVhZGVyOiBmYWxzZSxcbiAgICAgIC8vIElmIGJyYWNrZXRlZCBlbWFpbCBpcyBwZXJtaXR0ZWQuIE9ubHkgYXBwbGljYWJsZSB3aGVuIGluSGVhZGVyXG4gICAgICBlbWFpbFBlcm1pdHRlZDogZmFsc2UsXG4gICAgICAvLyBOYW1lIG9mIGN1cnJlbnQgaGVhZGVyXG4gICAgICBoZWFkZXI6IG51bGwsXG4gICAgICAvLyBJcyBpbiBhIHJlZ2lvbiBvZiBtYWlsIGhlYWRlcnNcbiAgICAgIGluSGVhZGVyczogZmFsc2VcbiAgICB9O1xuICB9LFxuICB0b2tlbjogcmVhZFRva2VuLFxuICBibGFua0xpbmU6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgc3RhdGUuaW5IZWFkZXJzID0gc3RhdGUuaW5TZXBhcmF0b3IgPSBzdGF0ZS5pbkhlYWRlciA9IGZhbHNlO1xuICB9LFxuICBsYW5ndWFnZURhdGE6IHtcbiAgICBhdXRvY29tcGxldGU6IHJmYzI4MjIuY29uY2F0KHJmYzI4MjJOb0VtYWlsKVxuICB9XG59XG5cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==