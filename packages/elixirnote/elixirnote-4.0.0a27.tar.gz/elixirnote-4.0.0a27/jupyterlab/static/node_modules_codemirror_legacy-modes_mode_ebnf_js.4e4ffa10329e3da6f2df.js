"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_ebnf_js"],{

/***/ "./node_modules/@codemirror/legacy-modes/mode/ebnf.js":
/*!************************************************************!*\
  !*** ./node_modules/@codemirror/legacy-modes/mode/ebnf.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ebnf": () => (/* binding */ ebnf)
/* harmony export */ });
var commentType = {slash: 0, parenthesis: 1};
var stateType = {comment: 0, _string: 1, characterClass: 2};

const ebnf = {
  startState: function () {
    return {
      stringType: null,
      commentType: null,
      braced: 0,
      lhs: true,
      localState: null,
      stack: [],
      inDefinition: false
    };
  },
  token: function (stream, state) {
    if (!stream) return;

    //check for state changes
    if (state.stack.length === 0) {
      //strings
      if ((stream.peek() == '"') || (stream.peek() == "'")) {
        state.stringType = stream.peek();
        stream.next(); // Skip quote
        state.stack.unshift(stateType._string);
      } else if (stream.match('/*')) { //comments starting with /*
        state.stack.unshift(stateType.comment);
        state.commentType = commentType.slash;
      } else if (stream.match('(*')) { //comments starting with (*
        state.stack.unshift(stateType.comment);
        state.commentType = commentType.parenthesis;
      }
    }

    //return state
    //stack has
    switch (state.stack[0]) {
    case stateType._string:
      while (state.stack[0] === stateType._string && !stream.eol()) {
        if (stream.peek() === state.stringType) {
          stream.next(); // Skip quote
          state.stack.shift(); // Clear flag
        } else if (stream.peek() === "\\") {
          stream.next();
          stream.next();
        } else {
          stream.match(/^.[^\\\"\']*/);
        }
      }
      return state.lhs ? "property" : "string"; // Token style

    case stateType.comment:
      while (state.stack[0] === stateType.comment && !stream.eol()) {
        if (state.commentType === commentType.slash && stream.match('*/')) {
          state.stack.shift(); // Clear flag
          state.commentType = null;
        } else if (state.commentType === commentType.parenthesis && stream.match('*)')) {
          state.stack.shift(); // Clear flag
          state.commentType = null;
        } else {
          stream.match(/^.[^\*]*/);
        }
      }
      return "comment";

    case stateType.characterClass:
      while (state.stack[0] === stateType.characterClass && !stream.eol()) {
        if (!(stream.match(/^[^\]\\]+/) || stream.match('.'))) {
          state.stack.shift();
        }
      }
      return "operator";
    }

    var peek = stream.peek();

    //no stack
    switch (peek) {
    case "[":
      stream.next();
      state.stack.unshift(stateType.characterClass);
      return "bracket";
    case ":":
    case "|":
    case ";":
      stream.next();
      return "operator";
    case "%":
      if (stream.match("%%")) {
        return "header";
      } else if (stream.match(/[%][A-Za-z]+/)) {
        return "keyword";
      } else if (stream.match(/[%][}]/)) {
        return "bracket";
      }
      break;
    case "/":
      if (stream.match(/[\/][A-Za-z]+/)) {
        return "keyword";
      }
    case "\\":
      if (stream.match(/[\][a-z]+/)) {
        return "string.special";
      }
    case ".":
      if (stream.match(".")) {
        return "atom";
      }
    case "*":
    case "-":
    case "+":
    case "^":
      if (stream.match(peek)) {
        return "atom";
      }
    case "$":
      if (stream.match("$$")) {
        return "builtin";
      } else if (stream.match(/[$][0-9]+/)) {
        return "variableName.special";
      }
    case "<":
      if (stream.match(/<<[a-zA-Z_]+>>/)) {
        return "builtin";
      }
    }

    if (stream.match('//')) {
      stream.skipToEnd();
      return "comment";
    } else if (stream.match('return')) {
      return "operator";
    } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {
      if (stream.match(/(?=[\(.])/)) {
        return "variable";
      } else if (stream.match(/(?=[\s\n]*[:=])/)) {
        return "def";
      }
      return "variableName.special";
    } else if (["[", "]", "(", ")"].indexOf(stream.peek()) != -1) {
      stream.next();
      return "bracket";
    } else if (!stream.eatSpace()) {
      stream.next();
    }
    return null;
  }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfZWJuZl9qcy40ZTRmZmExMDMyOWUzZGE2ZjJkZi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsbUJBQW1CO0FBQ25CLGlCQUFpQjs7QUFFVjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBLFFBQVEsK0JBQStCO0FBQ3ZDO0FBQ0E7QUFDQSxRQUFRLCtCQUErQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIsK0JBQStCO0FBQy9CLFVBQVU7QUFDVjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDs7QUFFaEQ7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0EsVUFBVTtBQUNWLCtCQUErQjtBQUMvQjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVEsNEJBQTRCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvZWJuZi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29tbWVudFR5cGUgPSB7c2xhc2g6IDAsIHBhcmVudGhlc2lzOiAxfTtcbnZhciBzdGF0ZVR5cGUgPSB7Y29tbWVudDogMCwgX3N0cmluZzogMSwgY2hhcmFjdGVyQ2xhc3M6IDJ9O1xuXG5leHBvcnQgY29uc3QgZWJuZiA9IHtcbiAgc3RhcnRTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdHJpbmdUeXBlOiBudWxsLFxuICAgICAgY29tbWVudFR5cGU6IG51bGwsXG4gICAgICBicmFjZWQ6IDAsXG4gICAgICBsaHM6IHRydWUsXG4gICAgICBsb2NhbFN0YXRlOiBudWxsLFxuICAgICAgc3RhY2s6IFtdLFxuICAgICAgaW5EZWZpbml0aW9uOiBmYWxzZVxuICAgIH07XG4gIH0sXG4gIHRva2VuOiBmdW5jdGlvbiAoc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmICghc3RyZWFtKSByZXR1cm47XG5cbiAgICAvL2NoZWNrIGZvciBzdGF0ZSBjaGFuZ2VzXG4gICAgaWYgKHN0YXRlLnN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy9zdHJpbmdzXG4gICAgICBpZiAoKHN0cmVhbS5wZWVrKCkgPT0gJ1wiJykgfHwgKHN0cmVhbS5wZWVrKCkgPT0gXCInXCIpKSB7XG4gICAgICAgIHN0YXRlLnN0cmluZ1R5cGUgPSBzdHJlYW0ucGVlaygpO1xuICAgICAgICBzdHJlYW0ubmV4dCgpOyAvLyBTa2lwIHF1b3RlXG4gICAgICAgIHN0YXRlLnN0YWNrLnVuc2hpZnQoc3RhdGVUeXBlLl9zdHJpbmcpO1xuICAgICAgfSBlbHNlIGlmIChzdHJlYW0ubWF0Y2goJy8qJykpIHsgLy9jb21tZW50cyBzdGFydGluZyB3aXRoIC8qXG4gICAgICAgIHN0YXRlLnN0YWNrLnVuc2hpZnQoc3RhdGVUeXBlLmNvbW1lbnQpO1xuICAgICAgICBzdGF0ZS5jb21tZW50VHlwZSA9IGNvbW1lbnRUeXBlLnNsYXNoO1xuICAgICAgfSBlbHNlIGlmIChzdHJlYW0ubWF0Y2goJygqJykpIHsgLy9jb21tZW50cyBzdGFydGluZyB3aXRoICgqXG4gICAgICAgIHN0YXRlLnN0YWNrLnVuc2hpZnQoc3RhdGVUeXBlLmNvbW1lbnQpO1xuICAgICAgICBzdGF0ZS5jb21tZW50VHlwZSA9IGNvbW1lbnRUeXBlLnBhcmVudGhlc2lzO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vcmV0dXJuIHN0YXRlXG4gICAgLy9zdGFjayBoYXNcbiAgICBzd2l0Y2ggKHN0YXRlLnN0YWNrWzBdKSB7XG4gICAgY2FzZSBzdGF0ZVR5cGUuX3N0cmluZzpcbiAgICAgIHdoaWxlIChzdGF0ZS5zdGFja1swXSA9PT0gc3RhdGVUeXBlLl9zdHJpbmcgJiYgIXN0cmVhbS5lb2woKSkge1xuICAgICAgICBpZiAoc3RyZWFtLnBlZWsoKSA9PT0gc3RhdGUuc3RyaW5nVHlwZSkge1xuICAgICAgICAgIHN0cmVhbS5uZXh0KCk7IC8vIFNraXAgcXVvdGVcbiAgICAgICAgICBzdGF0ZS5zdGFjay5zaGlmdCgpOyAvLyBDbGVhciBmbGFnXG4gICAgICAgIH0gZWxzZSBpZiAoc3RyZWFtLnBlZWsoKSA9PT0gXCJcXFxcXCIpIHtcbiAgICAgICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgICAgIHN0cmVhbS5uZXh0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyZWFtLm1hdGNoKC9eLlteXFxcXFxcXCJcXCddKi8pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhdGUubGhzID8gXCJwcm9wZXJ0eVwiIDogXCJzdHJpbmdcIjsgLy8gVG9rZW4gc3R5bGVcblxuICAgIGNhc2Ugc3RhdGVUeXBlLmNvbW1lbnQ6XG4gICAgICB3aGlsZSAoc3RhdGUuc3RhY2tbMF0gPT09IHN0YXRlVHlwZS5jb21tZW50ICYmICFzdHJlYW0uZW9sKCkpIHtcbiAgICAgICAgaWYgKHN0YXRlLmNvbW1lbnRUeXBlID09PSBjb21tZW50VHlwZS5zbGFzaCAmJiBzdHJlYW0ubWF0Y2goJyovJykpIHtcbiAgICAgICAgICBzdGF0ZS5zdGFjay5zaGlmdCgpOyAvLyBDbGVhciBmbGFnXG4gICAgICAgICAgc3RhdGUuY29tbWVudFR5cGUgPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLmNvbW1lbnRUeXBlID09PSBjb21tZW50VHlwZS5wYXJlbnRoZXNpcyAmJiBzdHJlYW0ubWF0Y2goJyopJykpIHtcbiAgICAgICAgICBzdGF0ZS5zdGFjay5zaGlmdCgpOyAvLyBDbGVhciBmbGFnXG4gICAgICAgICAgc3RhdGUuY29tbWVudFR5cGUgPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0cmVhbS5tYXRjaCgvXi5bXlxcKl0qLyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBcImNvbW1lbnRcIjtcblxuICAgIGNhc2Ugc3RhdGVUeXBlLmNoYXJhY3RlckNsYXNzOlxuICAgICAgd2hpbGUgKHN0YXRlLnN0YWNrWzBdID09PSBzdGF0ZVR5cGUuY2hhcmFjdGVyQ2xhc3MgJiYgIXN0cmVhbS5lb2woKSkge1xuICAgICAgICBpZiAoIShzdHJlYW0ubWF0Y2goL15bXlxcXVxcXFxdKy8pIHx8IHN0cmVhbS5tYXRjaCgnLicpKSkge1xuICAgICAgICAgIHN0YXRlLnN0YWNrLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBcIm9wZXJhdG9yXCI7XG4gICAgfVxuXG4gICAgdmFyIHBlZWsgPSBzdHJlYW0ucGVlaygpO1xuXG4gICAgLy9ubyBzdGFja1xuICAgIHN3aXRjaCAocGVlaykge1xuICAgIGNhc2UgXCJbXCI6XG4gICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgc3RhdGUuc3RhY2sudW5zaGlmdChzdGF0ZVR5cGUuY2hhcmFjdGVyQ2xhc3MpO1xuICAgICAgcmV0dXJuIFwiYnJhY2tldFwiO1xuICAgIGNhc2UgXCI6XCI6XG4gICAgY2FzZSBcInxcIjpcbiAgICBjYXNlIFwiO1wiOlxuICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICAgIHJldHVybiBcIm9wZXJhdG9yXCI7XG4gICAgY2FzZSBcIiVcIjpcbiAgICAgIGlmIChzdHJlYW0ubWF0Y2goXCIlJVwiKSkge1xuICAgICAgICByZXR1cm4gXCJoZWFkZXJcIjtcbiAgICAgIH0gZWxzZSBpZiAoc3RyZWFtLm1hdGNoKC9bJV1bQS1aYS16XSsvKSkge1xuICAgICAgICByZXR1cm4gXCJrZXl3b3JkXCI7XG4gICAgICB9IGVsc2UgaWYgKHN0cmVhbS5tYXRjaCgvWyVdW31dLykpIHtcbiAgICAgICAgcmV0dXJuIFwiYnJhY2tldFwiO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIi9cIjpcbiAgICAgIGlmIChzdHJlYW0ubWF0Y2goL1tcXC9dW0EtWmEtel0rLykpIHtcbiAgICAgICAgcmV0dXJuIFwia2V5d29yZFwiO1xuICAgICAgfVxuICAgIGNhc2UgXCJcXFxcXCI6XG4gICAgICBpZiAoc3RyZWFtLm1hdGNoKC9bXFxdW2Etel0rLykpIHtcbiAgICAgICAgcmV0dXJuIFwic3RyaW5nLnNwZWNpYWxcIjtcbiAgICAgIH1cbiAgICBjYXNlIFwiLlwiOlxuICAgICAgaWYgKHN0cmVhbS5tYXRjaChcIi5cIikpIHtcbiAgICAgICAgcmV0dXJuIFwiYXRvbVwiO1xuICAgICAgfVxuICAgIGNhc2UgXCIqXCI6XG4gICAgY2FzZSBcIi1cIjpcbiAgICBjYXNlIFwiK1wiOlxuICAgIGNhc2UgXCJeXCI6XG4gICAgICBpZiAoc3RyZWFtLm1hdGNoKHBlZWspKSB7XG4gICAgICAgIHJldHVybiBcImF0b21cIjtcbiAgICAgIH1cbiAgICBjYXNlIFwiJFwiOlxuICAgICAgaWYgKHN0cmVhbS5tYXRjaChcIiQkXCIpKSB7XG4gICAgICAgIHJldHVybiBcImJ1aWx0aW5cIjtcbiAgICAgIH0gZWxzZSBpZiAoc3RyZWFtLm1hdGNoKC9bJF1bMC05XSsvKSkge1xuICAgICAgICByZXR1cm4gXCJ2YXJpYWJsZU5hbWUuc3BlY2lhbFwiO1xuICAgICAgfVxuICAgIGNhc2UgXCI8XCI6XG4gICAgICBpZiAoc3RyZWFtLm1hdGNoKC88PFthLXpBLVpfXSs+Pi8pKSB7XG4gICAgICAgIHJldHVybiBcImJ1aWx0aW5cIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RyZWFtLm1hdGNoKCcvLycpKSB7XG4gICAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgICByZXR1cm4gXCJjb21tZW50XCI7XG4gICAgfSBlbHNlIGlmIChzdHJlYW0ubWF0Y2goJ3JldHVybicpKSB7XG4gICAgICByZXR1cm4gXCJvcGVyYXRvclwiO1xuICAgIH0gZWxzZSBpZiAoc3RyZWFtLm1hdGNoKC9eW2EtekEtWl9dW2EtekEtWjAtOV9dKi8pKSB7XG4gICAgICBpZiAoc3RyZWFtLm1hdGNoKC8oPz1bXFwoLl0pLykpIHtcbiAgICAgICAgcmV0dXJuIFwidmFyaWFibGVcIjtcbiAgICAgIH0gZWxzZSBpZiAoc3RyZWFtLm1hdGNoKC8oPz1bXFxzXFxuXSpbOj1dKS8pKSB7XG4gICAgICAgIHJldHVybiBcImRlZlwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFwidmFyaWFibGVOYW1lLnNwZWNpYWxcIjtcbiAgICB9IGVsc2UgaWYgKFtcIltcIiwgXCJdXCIsIFwiKFwiLCBcIilcIl0uaW5kZXhPZihzdHJlYW0ucGVlaygpKSAhPSAtMSkge1xuICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICAgIHJldHVybiBcImJyYWNrZXRcIjtcbiAgICB9IGVsc2UgaWYgKCFzdHJlYW0uZWF0U3BhY2UoKSkge1xuICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=