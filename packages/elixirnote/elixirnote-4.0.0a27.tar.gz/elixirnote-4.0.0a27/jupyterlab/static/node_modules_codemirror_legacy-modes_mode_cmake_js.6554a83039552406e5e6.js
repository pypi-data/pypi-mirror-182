"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_cmake_js"],{

/***/ "./node_modules/@codemirror/legacy-modes/mode/cmake.js":
/*!*************************************************************!*\
  !*** ./node_modules/@codemirror/legacy-modes/mode/cmake.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cmake": () => (/* binding */ cmake)
/* harmony export */ });
var variable_regex = /({)?[a-zA-Z0-9_]+(})?/;

function tokenString(stream, state) {
  var current, prev, found_var = false;
  while (!stream.eol() && (current = stream.next()) != state.pending) {
    if (current === '$' && prev != '\\' && state.pending == '"') {
      found_var = true;
      break;
    }
    prev = current;
  }
  if (found_var) {
    stream.backUp(1);
  }
  if (current == state.pending) {
    state.continueString = false;
  } else {
    state.continueString = true;
  }
  return "string";
}

function tokenize(stream, state) {
  var ch = stream.next();

  // Have we found a variable?
  if (ch === '$') {
    if (stream.match(variable_regex)) {
      return 'variableName.special';
    }
    return 'variable';
  }
  // Should we still be looking for the end of a string?
  if (state.continueString) {
    // If so, go through the loop again
    stream.backUp(1);
    return tokenString(stream, state);
  }
  // Do we just have a function on our hands?
  // In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched
  if (stream.match(/(\s+)?\w+\(/) || stream.match(/(\s+)?\w+\ \(/)) {
    stream.backUp(1);
    return 'def';
  }
  if (ch == "#") {
    stream.skipToEnd();
    return "comment";
  }
  // Have we found a string?
  if (ch == "'" || ch == '"') {
    // Store the type (single or double)
    state.pending = ch;
    // Perform the looping function to find the end
    return tokenString(stream, state);
  }
  if (ch == '(' || ch == ')') {
    return 'bracket';
  }
  if (ch.match(/[0-9]/)) {
    return 'number';
  }
  stream.eatWhile(/[\w-]/);
  return null;
}
const cmake = {
  startState: function () {
    var state = {};
    state.inDefinition = false;
    state.inInclude = false;
    state.continueString = false;
    state.pending = false;
    return state;
  },
  token: function (stream, state) {
    if (stream.eatSpace()) return null;
    return tokenize(stream, state);
  }
};



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfY21ha2VfanMuNjU1NGE4MzAzOTU1MjQwNmU1ZTYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLHdCQUF3QixpQkFBaUI7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvY21ha2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHZhcmlhYmxlX3JlZ2V4ID0gLyh7KT9bYS16QS1aMC05X10rKH0pPy87XG5cbmZ1bmN0aW9uIHRva2VuU3RyaW5nKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGN1cnJlbnQsIHByZXYsIGZvdW5kX3ZhciA9IGZhbHNlO1xuICB3aGlsZSAoIXN0cmVhbS5lb2woKSAmJiAoY3VycmVudCA9IHN0cmVhbS5uZXh0KCkpICE9IHN0YXRlLnBlbmRpbmcpIHtcbiAgICBpZiAoY3VycmVudCA9PT0gJyQnICYmIHByZXYgIT0gJ1xcXFwnICYmIHN0YXRlLnBlbmRpbmcgPT0gJ1wiJykge1xuICAgICAgZm91bmRfdmFyID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBwcmV2ID0gY3VycmVudDtcbiAgfVxuICBpZiAoZm91bmRfdmFyKSB7XG4gICAgc3RyZWFtLmJhY2tVcCgxKTtcbiAgfVxuICBpZiAoY3VycmVudCA9PSBzdGF0ZS5wZW5kaW5nKSB7XG4gICAgc3RhdGUuY29udGludWVTdHJpbmcgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5jb250aW51ZVN0cmluZyA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIFwic3RyaW5nXCI7XG59XG5cbmZ1bmN0aW9uIHRva2VuaXplKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGNoID0gc3RyZWFtLm5leHQoKTtcblxuICAvLyBIYXZlIHdlIGZvdW5kIGEgdmFyaWFibGU/XG4gIGlmIChjaCA9PT0gJyQnKSB7XG4gICAgaWYgKHN0cmVhbS5tYXRjaCh2YXJpYWJsZV9yZWdleCkpIHtcbiAgICAgIHJldHVybiAndmFyaWFibGVOYW1lLnNwZWNpYWwnO1xuICAgIH1cbiAgICByZXR1cm4gJ3ZhcmlhYmxlJztcbiAgfVxuICAvLyBTaG91bGQgd2Ugc3RpbGwgYmUgbG9va2luZyBmb3IgdGhlIGVuZCBvZiBhIHN0cmluZz9cbiAgaWYgKHN0YXRlLmNvbnRpbnVlU3RyaW5nKSB7XG4gICAgLy8gSWYgc28sIGdvIHRocm91Z2ggdGhlIGxvb3AgYWdhaW5cbiAgICBzdHJlYW0uYmFja1VwKDEpO1xuICAgIHJldHVybiB0b2tlblN0cmluZyhzdHJlYW0sIHN0YXRlKTtcbiAgfVxuICAvLyBEbyB3ZSBqdXN0IGhhdmUgYSBmdW5jdGlvbiBvbiBvdXIgaGFuZHM/XG4gIC8vIEluICdjbWFrZV9taW5pbXVtX3JlcXVpcmVkIChWRVJTSU9OIDIuOC44KScsICdjbWFrZV9taW5pbXVtX3JlcXVpcmVkJyBpcyBtYXRjaGVkXG4gIGlmIChzdHJlYW0ubWF0Y2goLyhcXHMrKT9cXHcrXFwoLykgfHwgc3RyZWFtLm1hdGNoKC8oXFxzKyk/XFx3K1xcIFxcKC8pKSB7XG4gICAgc3RyZWFtLmJhY2tVcCgxKTtcbiAgICByZXR1cm4gJ2RlZic7XG4gIH1cbiAgaWYgKGNoID09IFwiI1wiKSB7XG4gICAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICAgIHJldHVybiBcImNvbW1lbnRcIjtcbiAgfVxuICAvLyBIYXZlIHdlIGZvdW5kIGEgc3RyaW5nP1xuICBpZiAoY2ggPT0gXCInXCIgfHwgY2ggPT0gJ1wiJykge1xuICAgIC8vIFN0b3JlIHRoZSB0eXBlIChzaW5nbGUgb3IgZG91YmxlKVxuICAgIHN0YXRlLnBlbmRpbmcgPSBjaDtcbiAgICAvLyBQZXJmb3JtIHRoZSBsb29waW5nIGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGVuZFxuICAgIHJldHVybiB0b2tlblN0cmluZyhzdHJlYW0sIHN0YXRlKTtcbiAgfVxuICBpZiAoY2ggPT0gJygnIHx8IGNoID09ICcpJykge1xuICAgIHJldHVybiAnYnJhY2tldCc7XG4gIH1cbiAgaWYgKGNoLm1hdGNoKC9bMC05XS8pKSB7XG4gICAgcmV0dXJuICdudW1iZXInO1xuICB9XG4gIHN0cmVhbS5lYXRXaGlsZSgvW1xcdy1dLyk7XG4gIHJldHVybiBudWxsO1xufVxuZXhwb3J0IGNvbnN0IGNtYWtlID0ge1xuICBzdGFydFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YXRlID0ge307XG4gICAgc3RhdGUuaW5EZWZpbml0aW9uID0gZmFsc2U7XG4gICAgc3RhdGUuaW5JbmNsdWRlID0gZmFsc2U7XG4gICAgc3RhdGUuY29udGludWVTdHJpbmcgPSBmYWxzZTtcbiAgICBzdGF0ZS5wZW5kaW5nID0gZmFsc2U7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9LFxuICB0b2tlbjogZnVuY3Rpb24gKHN0cmVhbSwgc3RhdGUpIHtcbiAgICBpZiAoc3RyZWFtLmVhdFNwYWNlKCkpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB0b2tlbml6ZShzdHJlYW0sIHN0YXRlKTtcbiAgfVxufTtcblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9