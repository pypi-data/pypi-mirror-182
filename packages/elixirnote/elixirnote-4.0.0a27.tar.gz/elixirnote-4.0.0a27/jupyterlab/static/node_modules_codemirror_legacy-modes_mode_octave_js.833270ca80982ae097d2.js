"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_octave_js"],{

/***/ "./node_modules/@codemirror/legacy-modes/mode/octave.js":
/*!**************************************************************!*\
  !*** ./node_modules/@codemirror/legacy-modes/mode/octave.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "octave": () => (/* binding */ octave)
/* harmony export */ });
function wordRegexp(words) {
  return new RegExp("^((" + words.join(")|(") + "))\\b");
}

var singleOperators = new RegExp("^[\\+\\-\\*/&|\\^~<>!@'\\\\]");
var singleDelimiters = new RegExp('^[\\(\\[\\{\\},:=;\\.]');
var doubleOperators = new RegExp("^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\.[\\+\\-\\*/\\^\\\\]))");
var doubleDelimiters = new RegExp("^((!=)|(\\+=)|(\\-=)|(\\*=)|(/=)|(&=)|(\\|=)|(\\^=))");
var tripleDelimiters = new RegExp("^((>>=)|(<<=))");
var expressionEnd = new RegExp("^[\\]\\)]");
var identifiers = new RegExp("^[_A-Za-z\xa1-\uffff][_A-Za-z0-9\xa1-\uffff]*");

var builtins = wordRegexp([
  'error', 'eval', 'function', 'abs', 'acos', 'atan', 'asin', 'cos',
  'cosh', 'exp', 'log', 'prod', 'sum', 'log10', 'max', 'min', 'sign', 'sin', 'sinh',
  'sqrt', 'tan', 'reshape', 'break', 'zeros', 'default', 'margin', 'round', 'ones',
  'rand', 'syn', 'ceil', 'floor', 'size', 'clear', 'zeros', 'eye', 'mean', 'std', 'cov',
  'det', 'eig', 'inv', 'norm', 'rank', 'trace', 'expm', 'logm', 'sqrtm', 'linspace', 'plot',
  'title', 'xlabel', 'ylabel', 'legend', 'text', 'grid', 'meshgrid', 'mesh', 'num2str',
  'fft', 'ifft', 'arrayfun', 'cellfun', 'input', 'fliplr', 'flipud', 'ismember'
]);

var keywords = wordRegexp([
  'return', 'case', 'switch', 'else', 'elseif', 'end', 'endif', 'endfunction',
  'if', 'otherwise', 'do', 'for', 'while', 'try', 'catch', 'classdef', 'properties', 'events',
  'methods', 'global', 'persistent', 'endfor', 'endwhile', 'printf', 'sprintf', 'disp', 'until',
  'continue', 'pkg'
]);


// tokenizers
function tokenTranspose(stream, state) {
  if (!stream.sol() && stream.peek() === '\'') {
    stream.next();
    state.tokenize = tokenBase;
    return 'operator';
  }
  state.tokenize = tokenBase;
  return tokenBase(stream, state);
}


function tokenComment(stream, state) {
  if (stream.match(/^.*%}/)) {
    state.tokenize = tokenBase;
    return 'comment';
  };
  stream.skipToEnd();
  return 'comment';
}

function tokenBase(stream, state) {
  // whitespaces
  if (stream.eatSpace()) return null;

  // Handle one line Comments
  if (stream.match('%{')){
    state.tokenize = tokenComment;
    stream.skipToEnd();
    return 'comment';
  }

  if (stream.match(/^[%#]/)){
    stream.skipToEnd();
    return 'comment';
  }

  // Handle Number Literals
  if (stream.match(/^[0-9\.+-]/, false)) {
    if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {
      stream.tokenize = tokenBase;
      return 'number'; };
    if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?[ij]?/)) { return 'number'; };
    if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?[ij]?/)) { return 'number'; };
  }
  if (stream.match(wordRegexp(['nan','NaN','inf','Inf']))) { return 'number'; };

  // Handle Strings
  var m = stream.match(/^"(?:[^"]|"")*("|$)/) || stream.match(/^'(?:[^']|'')*('|$)/)
  if (m) { return m[1] ? 'string' : "error"; }

  // Handle words
  if (stream.match(keywords)) { return 'keyword'; } ;
  if (stream.match(builtins)) { return 'builtin'; } ;
  if (stream.match(identifiers)) { return 'variable'; } ;

  if (stream.match(singleOperators) || stream.match(doubleOperators)) { return 'operator'; };
  if (stream.match(singleDelimiters) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) { return null; };

  if (stream.match(expressionEnd)) {
    state.tokenize = tokenTranspose;
    return null;
  };


  // Handle non-detected items
  stream.next();
  return 'error';
};


const octave = {
  startState: function() {
    return {
      tokenize: tokenBase
    };
  },

  token: function(stream, state) {
    var style = state.tokenize(stream, state);
    if (style === 'number' || style === 'variable'){
      state.tokenize = tokenTranspose;
    }
    return style;
  },

  languageData: {
    commentTokens: {line: "%"}
  }
};



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfb2N0YXZlX2pzLjgzMzI3MGNhODA5ODJhZTA5N2QyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4Q0FBOEMsR0FBRyxJQUFJO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRTtBQUNoRSwyREFBMkQ7QUFDM0Q7QUFDQSw2REFBNkQ7O0FBRTdEO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0EsZ0NBQWdDO0FBQ2hDLGdDQUFnQztBQUNoQyxtQ0FBbUM7O0FBRW5DLHdFQUF3RTtBQUN4RSw0R0FBNEc7O0FBRTVHO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL29jdGF2ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB3b3JkUmVnZXhwKHdvcmRzKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXigoXCIgKyB3b3Jkcy5qb2luKFwiKXwoXCIpICsgXCIpKVxcXFxiXCIpO1xufVxuXG52YXIgc2luZ2xlT3BlcmF0b3JzID0gbmV3IFJlZ0V4cChcIl5bXFxcXCtcXFxcLVxcXFwqLyZ8XFxcXF5+PD4hQCdcXFxcXFxcXF1cIik7XG52YXIgc2luZ2xlRGVsaW1pdGVycyA9IG5ldyBSZWdFeHAoJ15bXFxcXChcXFxcW1xcXFx7XFxcXH0sOj07XFxcXC5dJyk7XG52YXIgZG91YmxlT3BlcmF0b3JzID0gbmV3IFJlZ0V4cChcIl4oKD09KXwofj0pfCg8PSl8KD49KXwoPDwpfCg+Pil8KFxcXFwuW1xcXFwrXFxcXC1cXFxcKi9cXFxcXlxcXFxcXFxcXSkpXCIpO1xudmFyIGRvdWJsZURlbGltaXRlcnMgPSBuZXcgUmVnRXhwKFwiXigoIT0pfChcXFxcKz0pfChcXFxcLT0pfChcXFxcKj0pfCgvPSl8KCY9KXwoXFxcXHw9KXwoXFxcXF49KSlcIik7XG52YXIgdHJpcGxlRGVsaW1pdGVycyA9IG5ldyBSZWdFeHAoXCJeKCg+Pj0pfCg8PD0pKVwiKTtcbnZhciBleHByZXNzaW9uRW5kID0gbmV3IFJlZ0V4cChcIl5bXFxcXF1cXFxcKV1cIik7XG52YXIgaWRlbnRpZmllcnMgPSBuZXcgUmVnRXhwKFwiXltfQS1aYS16XFx4YTEtXFx1ZmZmZl1bX0EtWmEtejAtOVxceGExLVxcdWZmZmZdKlwiKTtcblxudmFyIGJ1aWx0aW5zID0gd29yZFJlZ2V4cChbXG4gICdlcnJvcicsICdldmFsJywgJ2Z1bmN0aW9uJywgJ2FicycsICdhY29zJywgJ2F0YW4nLCAnYXNpbicsICdjb3MnLFxuICAnY29zaCcsICdleHAnLCAnbG9nJywgJ3Byb2QnLCAnc3VtJywgJ2xvZzEwJywgJ21heCcsICdtaW4nLCAnc2lnbicsICdzaW4nLCAnc2luaCcsXG4gICdzcXJ0JywgJ3RhbicsICdyZXNoYXBlJywgJ2JyZWFrJywgJ3plcm9zJywgJ2RlZmF1bHQnLCAnbWFyZ2luJywgJ3JvdW5kJywgJ29uZXMnLFxuICAncmFuZCcsICdzeW4nLCAnY2VpbCcsICdmbG9vcicsICdzaXplJywgJ2NsZWFyJywgJ3plcm9zJywgJ2V5ZScsICdtZWFuJywgJ3N0ZCcsICdjb3YnLFxuICAnZGV0JywgJ2VpZycsICdpbnYnLCAnbm9ybScsICdyYW5rJywgJ3RyYWNlJywgJ2V4cG0nLCAnbG9nbScsICdzcXJ0bScsICdsaW5zcGFjZScsICdwbG90JyxcbiAgJ3RpdGxlJywgJ3hsYWJlbCcsICd5bGFiZWwnLCAnbGVnZW5kJywgJ3RleHQnLCAnZ3JpZCcsICdtZXNoZ3JpZCcsICdtZXNoJywgJ251bTJzdHInLFxuICAnZmZ0JywgJ2lmZnQnLCAnYXJyYXlmdW4nLCAnY2VsbGZ1bicsICdpbnB1dCcsICdmbGlwbHInLCAnZmxpcHVkJywgJ2lzbWVtYmVyJ1xuXSk7XG5cbnZhciBrZXl3b3JkcyA9IHdvcmRSZWdleHAoW1xuICAncmV0dXJuJywgJ2Nhc2UnLCAnc3dpdGNoJywgJ2Vsc2UnLCAnZWxzZWlmJywgJ2VuZCcsICdlbmRpZicsICdlbmRmdW5jdGlvbicsXG4gICdpZicsICdvdGhlcndpc2UnLCAnZG8nLCAnZm9yJywgJ3doaWxlJywgJ3RyeScsICdjYXRjaCcsICdjbGFzc2RlZicsICdwcm9wZXJ0aWVzJywgJ2V2ZW50cycsXG4gICdtZXRob2RzJywgJ2dsb2JhbCcsICdwZXJzaXN0ZW50JywgJ2VuZGZvcicsICdlbmR3aGlsZScsICdwcmludGYnLCAnc3ByaW50ZicsICdkaXNwJywgJ3VudGlsJyxcbiAgJ2NvbnRpbnVlJywgJ3BrZydcbl0pO1xuXG5cbi8vIHRva2VuaXplcnNcbmZ1bmN0aW9uIHRva2VuVHJhbnNwb3NlKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdHJlYW0uc29sKCkgJiYgc3RyZWFtLnBlZWsoKSA9PT0gJ1xcJycpIHtcbiAgICBzdHJlYW0ubmV4dCgpO1xuICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5CYXNlO1xuICAgIHJldHVybiAnb3BlcmF0b3InO1xuICB9XG4gIHN0YXRlLnRva2VuaXplID0gdG9rZW5CYXNlO1xuICByZXR1cm4gdG9rZW5CYXNlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG5cbmZ1bmN0aW9uIHRva2VuQ29tbWVudChzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdHJlYW0ubWF0Y2goL14uKiV9LykpIHtcbiAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQmFzZTtcbiAgICByZXR1cm4gJ2NvbW1lbnQnO1xuICB9O1xuICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gIHJldHVybiAnY29tbWVudCc7XG59XG5cbmZ1bmN0aW9uIHRva2VuQmFzZShzdHJlYW0sIHN0YXRlKSB7XG4gIC8vIHdoaXRlc3BhY2VzXG4gIGlmIChzdHJlYW0uZWF0U3BhY2UoKSkgcmV0dXJuIG51bGw7XG5cbiAgLy8gSGFuZGxlIG9uZSBsaW5lIENvbW1lbnRzXG4gIGlmIChzdHJlYW0ubWF0Y2goJyV7Jykpe1xuICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5Db21tZW50O1xuICAgIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgICByZXR1cm4gJ2NvbW1lbnQnO1xuICB9XG5cbiAgaWYgKHN0cmVhbS5tYXRjaCgvXlslI10vKSl7XG4gICAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICAgIHJldHVybiAnY29tbWVudCc7XG4gIH1cblxuICAvLyBIYW5kbGUgTnVtYmVyIExpdGVyYWxzXG4gIGlmIChzdHJlYW0ubWF0Y2goL15bMC05XFwuKy1dLywgZmFsc2UpKSB7XG4gICAgaWYgKHN0cmVhbS5tYXRjaCgvXlsrLV0/MHhbMC05YS1mQS1GXStbaWpdPy8pKSB7XG4gICAgICBzdHJlYW0udG9rZW5pemUgPSB0b2tlbkJhc2U7XG4gICAgICByZXR1cm4gJ251bWJlcic7IH07XG4gICAgaWYgKHN0cmVhbS5tYXRjaCgvXlsrLV0/XFxkKlxcLlxcZCsoW0VlRGRdWystXT9cXGQrKT9baWpdPy8pKSB7IHJldHVybiAnbnVtYmVyJzsgfTtcbiAgICBpZiAoc3RyZWFtLm1hdGNoKC9eWystXT9cXGQrKFtFZURkXVsrLV0/XFxkKyk/W2lqXT8vKSkgeyByZXR1cm4gJ251bWJlcic7IH07XG4gIH1cbiAgaWYgKHN0cmVhbS5tYXRjaCh3b3JkUmVnZXhwKFsnbmFuJywnTmFOJywnaW5mJywnSW5mJ10pKSkgeyByZXR1cm4gJ251bWJlcic7IH07XG5cbiAgLy8gSGFuZGxlIFN0cmluZ3NcbiAgdmFyIG0gPSBzdHJlYW0ubWF0Y2goL15cIig/OlteXCJdfFwiXCIpKihcInwkKS8pIHx8IHN0cmVhbS5tYXRjaCgvXicoPzpbXiddfCcnKSooJ3wkKS8pXG4gIGlmIChtKSB7IHJldHVybiBtWzFdID8gJ3N0cmluZycgOiBcImVycm9yXCI7IH1cblxuICAvLyBIYW5kbGUgd29yZHNcbiAgaWYgKHN0cmVhbS5tYXRjaChrZXl3b3JkcykpIHsgcmV0dXJuICdrZXl3b3JkJzsgfSA7XG4gIGlmIChzdHJlYW0ubWF0Y2goYnVpbHRpbnMpKSB7IHJldHVybiAnYnVpbHRpbic7IH0gO1xuICBpZiAoc3RyZWFtLm1hdGNoKGlkZW50aWZpZXJzKSkgeyByZXR1cm4gJ3ZhcmlhYmxlJzsgfSA7XG5cbiAgaWYgKHN0cmVhbS5tYXRjaChzaW5nbGVPcGVyYXRvcnMpIHx8IHN0cmVhbS5tYXRjaChkb3VibGVPcGVyYXRvcnMpKSB7IHJldHVybiAnb3BlcmF0b3InOyB9O1xuICBpZiAoc3RyZWFtLm1hdGNoKHNpbmdsZURlbGltaXRlcnMpIHx8IHN0cmVhbS5tYXRjaChkb3VibGVEZWxpbWl0ZXJzKSB8fCBzdHJlYW0ubWF0Y2godHJpcGxlRGVsaW1pdGVycykpIHsgcmV0dXJuIG51bGw7IH07XG5cbiAgaWYgKHN0cmVhbS5tYXRjaChleHByZXNzaW9uRW5kKSkge1xuICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5UcmFuc3Bvc2U7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cblxuICAvLyBIYW5kbGUgbm9uLWRldGVjdGVkIGl0ZW1zXG4gIHN0cmVhbS5uZXh0KCk7XG4gIHJldHVybiAnZXJyb3InO1xufTtcblxuXG5leHBvcnQgY29uc3Qgb2N0YXZlID0ge1xuICBzdGFydFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW5pemU6IHRva2VuQmFzZVxuICAgIH07XG4gIH0sXG5cbiAgdG9rZW46IGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICB2YXIgc3R5bGUgPSBzdGF0ZS50b2tlbml6ZShzdHJlYW0sIHN0YXRlKTtcbiAgICBpZiAoc3R5bGUgPT09ICdudW1iZXInIHx8IHN0eWxlID09PSAndmFyaWFibGUnKXtcbiAgICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5UcmFuc3Bvc2U7XG4gICAgfVxuICAgIHJldHVybiBzdHlsZTtcbiAgfSxcblxuICBsYW5ndWFnZURhdGE6IHtcbiAgICBjb21tZW50VG9rZW5zOiB7bGluZTogXCIlXCJ9XG4gIH1cbn07XG5cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==