"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_smalltalk_js"],{

/***/ "./node_modules/@codemirror/legacy-modes/mode/smalltalk.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@codemirror/legacy-modes/mode/smalltalk.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "smalltalk": () => (/* binding */ smalltalk)
/* harmony export */ });
var specialChars = /[+\-\/\\*~<>=@%|&?!.,:;^]/;
var keywords = /true|false|nil|self|super|thisContext/;

var Context = function(tokenizer, parent) {
  this.next = tokenizer;
  this.parent = parent;
};

var Token = function(name, context, eos) {
  this.name = name;
  this.context = context;
  this.eos = eos;
};

var State = function() {
  this.context = new Context(next, null);
  this.expectVariable = true;
  this.indentation = 0;
  this.userIndentationDelta = 0;
};

State.prototype.userIndent = function(indentation, indentUnit) {
  this.userIndentationDelta = indentation > 0 ? (indentation / indentUnit - this.indentation) : 0;
};

var next = function(stream, context, state) {
  var token = new Token(null, context, false);
  var aChar = stream.next();

  if (aChar === '"') {
    token = nextComment(stream, new Context(nextComment, context));

  } else if (aChar === '\'') {
    token = nextString(stream, new Context(nextString, context));

  } else if (aChar === '#') {
    if (stream.peek() === '\'') {
      stream.next();
      token = nextSymbol(stream, new Context(nextSymbol, context));
    } else {
      if (stream.eatWhile(/[^\s.{}\[\]()]/))
        token.name = 'string.special';
      else
        token.name = 'meta';
    }

  } else if (aChar === '$') {
    if (stream.next() === '<') {
      stream.eatWhile(/[^\s>]/);
      stream.next();
    }
    token.name = 'string.special';

  } else if (aChar === '|' && state.expectVariable) {
    token.context = new Context(nextTemporaries, context);

  } else if (/[\[\]{}()]/.test(aChar)) {
    token.name = 'bracket';
    token.eos = /[\[{(]/.test(aChar);

    if (aChar === '[') {
      state.indentation++;
    } else if (aChar === ']') {
      state.indentation = Math.max(0, state.indentation - 1);
    }

  } else if (specialChars.test(aChar)) {
    stream.eatWhile(specialChars);
    token.name = 'operator';
    token.eos = aChar !== ';'; // ; cascaded message expression

  } else if (/\d/.test(aChar)) {
    stream.eatWhile(/[\w\d]/);
    token.name = 'number';

  } else if (/[\w_]/.test(aChar)) {
    stream.eatWhile(/[\w\d_]/);
    token.name = state.expectVariable ? (keywords.test(stream.current()) ? 'keyword' : 'variable') : null;

  } else {
    token.eos = state.expectVariable;
  }

  return token;
};

var nextComment = function(stream, context) {
  stream.eatWhile(/[^"]/);
  return new Token('comment', stream.eat('"') ? context.parent : context, true);
};

var nextString = function(stream, context) {
  stream.eatWhile(/[^']/);
  return new Token('string', stream.eat('\'') ? context.parent : context, false);
};

var nextSymbol = function(stream, context) {
  stream.eatWhile(/[^']/);
  return new Token('string.special', stream.eat('\'') ? context.parent : context, false);
};

var nextTemporaries = function(stream, context) {
  var token = new Token(null, context, false);
  var aChar = stream.next();

  if (aChar === '|') {
    token.context = context.parent;
    token.eos = true;

  } else {
    stream.eatWhile(/[^|]/);
    token.name = 'variable';
  }

  return token;
};

const smalltalk = {
  startState: function() {
    return new State;
  },

  token: function(stream, state) {
    state.userIndent(stream.indentation(), stream.indentUnit);

    if (stream.eatSpace()) {
      return null;
    }

    var token = state.context.next(stream, state.context, state);
    state.context = token.context;
    state.expectVariable = token.eos;

    return token.name;
  },

  blankLine: function(state, indentUnit) {
    state.userIndent(0, indentUnit);
  },

  indent: function(state, textAfter, cx) {
    var i = state.context.next === next && textAfter && textAfter.charAt(0) === ']' ? -1 : state.userIndentationDelta;
    return (state.indentation + i) * cx.unit;
  },

  languageData: {
    indentOnInput: /^\s*\]$/
  }
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfc21hbGx0YWxrX2pzLjk2NmNlYTQzYjNmZmJiODUyZDA0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBMkM7QUFDM0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLElBQUk7QUFDSjs7QUFFQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJO0FBQ0o7O0FBRUEsSUFBSSxpQkFBaUI7QUFDckI7QUFDQSxxQkFBcUI7O0FBRXJCO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLDRCQUE0QixHQUFHLEtBQUs7O0FBRXBDLElBQUk7QUFDSjtBQUNBOztBQUVBLElBQUk7QUFDSjtBQUNBOztBQUVBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvc21hbGx0YWxrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBzcGVjaWFsQ2hhcnMgPSAvWytcXC1cXC9cXFxcKn48Pj1AJXwmPyEuLDo7Xl0vO1xudmFyIGtleXdvcmRzID0gL3RydWV8ZmFsc2V8bmlsfHNlbGZ8c3VwZXJ8dGhpc0NvbnRleHQvO1xuXG52YXIgQ29udGV4dCA9IGZ1bmN0aW9uKHRva2VuaXplciwgcGFyZW50KSB7XG4gIHRoaXMubmV4dCA9IHRva2VuaXplcjtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG59O1xuXG52YXIgVG9rZW4gPSBmdW5jdGlvbihuYW1lLCBjb250ZXh0LCBlb3MpIHtcbiAgdGhpcy5uYW1lID0gbmFtZTtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5lb3MgPSBlb3M7XG59O1xuXG52YXIgU3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jb250ZXh0ID0gbmV3IENvbnRleHQobmV4dCwgbnVsbCk7XG4gIHRoaXMuZXhwZWN0VmFyaWFibGUgPSB0cnVlO1xuICB0aGlzLmluZGVudGF0aW9uID0gMDtcbiAgdGhpcy51c2VySW5kZW50YXRpb25EZWx0YSA9IDA7XG59O1xuXG5TdGF0ZS5wcm90b3R5cGUudXNlckluZGVudCA9IGZ1bmN0aW9uKGluZGVudGF0aW9uLCBpbmRlbnRVbml0KSB7XG4gIHRoaXMudXNlckluZGVudGF0aW9uRGVsdGEgPSBpbmRlbnRhdGlvbiA+IDAgPyAoaW5kZW50YXRpb24gLyBpbmRlbnRVbml0IC0gdGhpcy5pbmRlbnRhdGlvbikgOiAwO1xufTtcblxudmFyIG5leHQgPSBmdW5jdGlvbihzdHJlYW0sIGNvbnRleHQsIHN0YXRlKSB7XG4gIHZhciB0b2tlbiA9IG5ldyBUb2tlbihudWxsLCBjb250ZXh0LCBmYWxzZSk7XG4gIHZhciBhQ2hhciA9IHN0cmVhbS5uZXh0KCk7XG5cbiAgaWYgKGFDaGFyID09PSAnXCInKSB7XG4gICAgdG9rZW4gPSBuZXh0Q29tbWVudChzdHJlYW0sIG5ldyBDb250ZXh0KG5leHRDb21tZW50LCBjb250ZXh0KSk7XG5cbiAgfSBlbHNlIGlmIChhQ2hhciA9PT0gJ1xcJycpIHtcbiAgICB0b2tlbiA9IG5leHRTdHJpbmcoc3RyZWFtLCBuZXcgQ29udGV4dChuZXh0U3RyaW5nLCBjb250ZXh0KSk7XG5cbiAgfSBlbHNlIGlmIChhQ2hhciA9PT0gJyMnKSB7XG4gICAgaWYgKHN0cmVhbS5wZWVrKCkgPT09ICdcXCcnKSB7XG4gICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgdG9rZW4gPSBuZXh0U3ltYm9sKHN0cmVhbSwgbmV3IENvbnRleHQobmV4dFN5bWJvbCwgY29udGV4dCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RyZWFtLmVhdFdoaWxlKC9bXlxccy57fVxcW1xcXSgpXS8pKVxuICAgICAgICB0b2tlbi5uYW1lID0gJ3N0cmluZy5zcGVjaWFsJztcbiAgICAgIGVsc2VcbiAgICAgICAgdG9rZW4ubmFtZSA9ICdtZXRhJztcbiAgICB9XG5cbiAgfSBlbHNlIGlmIChhQ2hhciA9PT0gJyQnKSB7XG4gICAgaWYgKHN0cmVhbS5uZXh0KCkgPT09ICc8Jykge1xuICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXlxccz5dLyk7XG4gICAgICBzdHJlYW0ubmV4dCgpO1xuICAgIH1cbiAgICB0b2tlbi5uYW1lID0gJ3N0cmluZy5zcGVjaWFsJztcblxuICB9IGVsc2UgaWYgKGFDaGFyID09PSAnfCcgJiYgc3RhdGUuZXhwZWN0VmFyaWFibGUpIHtcbiAgICB0b2tlbi5jb250ZXh0ID0gbmV3IENvbnRleHQobmV4dFRlbXBvcmFyaWVzLCBjb250ZXh0KTtcblxuICB9IGVsc2UgaWYgKC9bXFxbXFxde30oKV0vLnRlc3QoYUNoYXIpKSB7XG4gICAgdG9rZW4ubmFtZSA9ICdicmFja2V0JztcbiAgICB0b2tlbi5lb3MgPSAvW1xcW3soXS8udGVzdChhQ2hhcik7XG5cbiAgICBpZiAoYUNoYXIgPT09ICdbJykge1xuICAgICAgc3RhdGUuaW5kZW50YXRpb24rKztcbiAgICB9IGVsc2UgaWYgKGFDaGFyID09PSAnXScpIHtcbiAgICAgIHN0YXRlLmluZGVudGF0aW9uID0gTWF0aC5tYXgoMCwgc3RhdGUuaW5kZW50YXRpb24gLSAxKTtcbiAgICB9XG5cbiAgfSBlbHNlIGlmIChzcGVjaWFsQ2hhcnMudGVzdChhQ2hhcikpIHtcbiAgICBzdHJlYW0uZWF0V2hpbGUoc3BlY2lhbENoYXJzKTtcbiAgICB0b2tlbi5uYW1lID0gJ29wZXJhdG9yJztcbiAgICB0b2tlbi5lb3MgPSBhQ2hhciAhPT0gJzsnOyAvLyA7IGNhc2NhZGVkIG1lc3NhZ2UgZXhwcmVzc2lvblxuXG4gIH0gZWxzZSBpZiAoL1xcZC8udGVzdChhQ2hhcikpIHtcbiAgICBzdHJlYW0uZWF0V2hpbGUoL1tcXHdcXGRdLyk7XG4gICAgdG9rZW4ubmFtZSA9ICdudW1iZXInO1xuXG4gIH0gZWxzZSBpZiAoL1tcXHdfXS8udGVzdChhQ2hhcikpIHtcbiAgICBzdHJlYW0uZWF0V2hpbGUoL1tcXHdcXGRfXS8pO1xuICAgIHRva2VuLm5hbWUgPSBzdGF0ZS5leHBlY3RWYXJpYWJsZSA/IChrZXl3b3Jkcy50ZXN0KHN0cmVhbS5jdXJyZW50KCkpID8gJ2tleXdvcmQnIDogJ3ZhcmlhYmxlJykgOiBudWxsO1xuXG4gIH0gZWxzZSB7XG4gICAgdG9rZW4uZW9zID0gc3RhdGUuZXhwZWN0VmFyaWFibGU7XG4gIH1cblxuICByZXR1cm4gdG9rZW47XG59O1xuXG52YXIgbmV4dENvbW1lbnQgPSBmdW5jdGlvbihzdHJlYW0sIGNvbnRleHQpIHtcbiAgc3RyZWFtLmVhdFdoaWxlKC9bXlwiXS8pO1xuICByZXR1cm4gbmV3IFRva2VuKCdjb21tZW50Jywgc3RyZWFtLmVhdCgnXCInKSA/IGNvbnRleHQucGFyZW50IDogY29udGV4dCwgdHJ1ZSk7XG59O1xuXG52YXIgbmV4dFN0cmluZyA9IGZ1bmN0aW9uKHN0cmVhbSwgY29udGV4dCkge1xuICBzdHJlYW0uZWF0V2hpbGUoL1teJ10vKTtcbiAgcmV0dXJuIG5ldyBUb2tlbignc3RyaW5nJywgc3RyZWFtLmVhdCgnXFwnJykgPyBjb250ZXh0LnBhcmVudCA6IGNvbnRleHQsIGZhbHNlKTtcbn07XG5cbnZhciBuZXh0U3ltYm9sID0gZnVuY3Rpb24oc3RyZWFtLCBjb250ZXh0KSB7XG4gIHN0cmVhbS5lYXRXaGlsZSgvW14nXS8pO1xuICByZXR1cm4gbmV3IFRva2VuKCdzdHJpbmcuc3BlY2lhbCcsIHN0cmVhbS5lYXQoJ1xcJycpID8gY29udGV4dC5wYXJlbnQgOiBjb250ZXh0LCBmYWxzZSk7XG59O1xuXG52YXIgbmV4dFRlbXBvcmFyaWVzID0gZnVuY3Rpb24oc3RyZWFtLCBjb250ZXh0KSB7XG4gIHZhciB0b2tlbiA9IG5ldyBUb2tlbihudWxsLCBjb250ZXh0LCBmYWxzZSk7XG4gIHZhciBhQ2hhciA9IHN0cmVhbS5uZXh0KCk7XG5cbiAgaWYgKGFDaGFyID09PSAnfCcpIHtcbiAgICB0b2tlbi5jb250ZXh0ID0gY29udGV4dC5wYXJlbnQ7XG4gICAgdG9rZW4uZW9zID0gdHJ1ZTtcblxuICB9IGVsc2Uge1xuICAgIHN0cmVhbS5lYXRXaGlsZSgvW158XS8pO1xuICAgIHRva2VuLm5hbWUgPSAndmFyaWFibGUnO1xuICB9XG5cbiAgcmV0dXJuIHRva2VuO1xufTtcblxuZXhwb3J0IGNvbnN0IHNtYWxsdGFsayA9IHtcbiAgc3RhcnRTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBTdGF0ZTtcbiAgfSxcblxuICB0b2tlbjogZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgIHN0YXRlLnVzZXJJbmRlbnQoc3RyZWFtLmluZGVudGF0aW9uKCksIHN0cmVhbS5pbmRlbnRVbml0KTtcblxuICAgIGlmIChzdHJlYW0uZWF0U3BhY2UoKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHRva2VuID0gc3RhdGUuY29udGV4dC5uZXh0KHN0cmVhbSwgc3RhdGUuY29udGV4dCwgc3RhdGUpO1xuICAgIHN0YXRlLmNvbnRleHQgPSB0b2tlbi5jb250ZXh0O1xuICAgIHN0YXRlLmV4cGVjdFZhcmlhYmxlID0gdG9rZW4uZW9zO1xuXG4gICAgcmV0dXJuIHRva2VuLm5hbWU7XG4gIH0sXG5cbiAgYmxhbmtMaW5lOiBmdW5jdGlvbihzdGF0ZSwgaW5kZW50VW5pdCkge1xuICAgIHN0YXRlLnVzZXJJbmRlbnQoMCwgaW5kZW50VW5pdCk7XG4gIH0sXG5cbiAgaW5kZW50OiBmdW5jdGlvbihzdGF0ZSwgdGV4dEFmdGVyLCBjeCkge1xuICAgIHZhciBpID0gc3RhdGUuY29udGV4dC5uZXh0ID09PSBuZXh0ICYmIHRleHRBZnRlciAmJiB0ZXh0QWZ0ZXIuY2hhckF0KDApID09PSAnXScgPyAtMSA6IHN0YXRlLnVzZXJJbmRlbnRhdGlvbkRlbHRhO1xuICAgIHJldHVybiAoc3RhdGUuaW5kZW50YXRpb24gKyBpKSAqIGN4LnVuaXQ7XG4gIH0sXG5cbiAgbGFuZ3VhZ2VEYXRhOiB7XG4gICAgaW5kZW50T25JbnB1dDogL15cXHMqXFxdJC9cbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9