"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_elm_js"],{

/***/ "./node_modules/@codemirror/legacy-modes/mode/elm.js":
/*!***********************************************************!*\
  !*** ./node_modules/@codemirror/legacy-modes/mode/elm.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "elm": () => (/* binding */ elm)
/* harmony export */ });
function switchState(source, setState, f)
{
  setState(f);
  return f(source, setState);
}

var lowerRE = /[a-z]/;
var upperRE = /[A-Z]/;
var innerRE = /[a-zA-Z0-9_]/;

var digitRE = /[0-9]/;
var hexRE = /[0-9A-Fa-f]/;
var symbolRE = /[-&*+.\\/<>=?^|:]/;
var specialRE = /[(),[\]{}]/;
var spacesRE = /[ \v\f]/; // newlines are handled in tokenizer

function normal()
{
  return function(source, setState)
  {
    if (source.eatWhile(spacesRE))
    {
      return null;
    }

    var char = source.next();

    if (specialRE.test(char))
    {
      return (char === '{' && source.eat('-'))
        ? switchState(source, setState, chompMultiComment(1))
        : (char === '[' && source.match('glsl|'))
        ? switchState(source, setState, chompGlsl)
        : 'builtin';
    }

    if (char === '\'')
    {
      return switchState(source, setState, chompChar);
    }

    if (char === '"')
    {
      return source.eat('"')
        ? source.eat('"')
        ? switchState(source, setState, chompMultiString)
        : 'string'
      : switchState(source, setState, chompSingleString);
    }

    if (upperRE.test(char))
    {
      source.eatWhile(innerRE);
      return 'type';
    }

    if (lowerRE.test(char))
    {
      var isDef = source.pos === 1;
      source.eatWhile(innerRE);
      return isDef ? "def" : "variable";
    }

    if (digitRE.test(char))
    {
      if (char === '0')
      {
        if (source.eat(/[xX]/))
        {
          source.eatWhile(hexRE); // should require at least 1
          return "number";
        }
      }
      else
      {
        source.eatWhile(digitRE);
      }
      if (source.eat('.'))
      {
        source.eatWhile(digitRE); // should require at least 1
      }
      if (source.eat(/[eE]/))
      {
        source.eat(/[-+]/);
        source.eatWhile(digitRE); // should require at least 1
      }
      return "number";
    }

    if (symbolRE.test(char))
    {
      if (char === '-' && source.eat('-'))
      {
        source.skipToEnd();
        return "comment";
      }
      source.eatWhile(symbolRE);
      return "keyword";
    }

    if (char === '_')
    {
      return "keyword";
    }

    return "error";
  }
}

function chompMultiComment(nest)
{
  if (nest == 0)
  {
    return normal();
  }
  return function(source, setState)
  {
    while (!source.eol())
    {
      var char = source.next();
      if (char == '{' && source.eat('-'))
      {
        ++nest;
      }
      else if (char == '-' && source.eat('}'))
      {
        --nest;
        if (nest === 0)
        {
          setState(normal());
          return 'comment';
        }
      }
    }
    setState(chompMultiComment(nest));
    return 'comment';
  }
}

function chompMultiString(source, setState)
{
  while (!source.eol())
  {
    var char = source.next();
    if (char === '"' && source.eat('"') && source.eat('"'))
    {
      setState(normal());
      return 'string';
    }
  }
  return 'string';
}

function chompSingleString(source, setState)
{
  while (source.skipTo('\\"')) { source.next(); source.next(); }
  if (source.skipTo('"'))
  {
    source.next();
    setState(normal());
    return 'string';
  }
  source.skipToEnd();
  setState(normal());
  return 'error';
}

function chompChar(source, setState)
{
  while (source.skipTo("\\'")) { source.next(); source.next(); }
  if (source.skipTo("'"))
  {
    source.next();
    setState(normal());
    return 'string';
  }
  source.skipToEnd();
  setState(normal());
  return 'error';
}

function chompGlsl(source, setState)
{
  while (!source.eol())
  {
    var char = source.next();
    if (char === '|' && source.eat(']'))
    {
      setState(normal());
      return 'string';
    }
  }
  return 'string';
}

var wellKnownWords = {
  case: 1,
  of: 1,
  as: 1,
  if: 1,
  then: 1,
  else: 1,
  let: 1,
    in: 1,
  type: 1,
  alias: 1,
  module: 1,
  where: 1,
  import: 1,
  exposing: 1,
  port: 1
};

const elm = {
  startState: function ()  { return { f: normal() }; },
  copyState:  function (s) { return { f: s.f }; },

  token: function(stream, state) {
    var type = state.f(stream, function(s) { state.f = s; });
    var word = stream.current();
    return (wellKnownWords.hasOwnProperty(word)) ? 'keyword' : type;
  }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfZWxtX2pzLjhjYTlmN2E3MDBjY2RjZDNkZjhmLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIsMEJBQTBCOztBQUUxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUCw2QkFBNkIsU0FBUyxnQkFBZ0I7QUFDdEQsNkJBQTZCLFNBQVMsV0FBVzs7QUFFakQ7QUFDQSw2Q0FBNkMsY0FBYztBQUMzRDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci9sZWdhY3ktbW9kZXMvbW9kZS9lbG0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gc3dpdGNoU3RhdGUoc291cmNlLCBzZXRTdGF0ZSwgZilcbntcbiAgc2V0U3RhdGUoZik7XG4gIHJldHVybiBmKHNvdXJjZSwgc2V0U3RhdGUpO1xufVxuXG52YXIgbG93ZXJSRSA9IC9bYS16XS87XG52YXIgdXBwZXJSRSA9IC9bQS1aXS87XG52YXIgaW5uZXJSRSA9IC9bYS16QS1aMC05X10vO1xuXG52YXIgZGlnaXRSRSA9IC9bMC05XS87XG52YXIgaGV4UkUgPSAvWzAtOUEtRmEtZl0vO1xudmFyIHN5bWJvbFJFID0gL1stJiorLlxcXFwvPD49P158Ol0vO1xudmFyIHNwZWNpYWxSRSA9IC9bKCksW1xcXXt9XS87XG52YXIgc3BhY2VzUkUgPSAvWyBcXHZcXGZdLzsgLy8gbmV3bGluZXMgYXJlIGhhbmRsZWQgaW4gdG9rZW5pemVyXG5cbmZ1bmN0aW9uIG5vcm1hbCgpXG57XG4gIHJldHVybiBmdW5jdGlvbihzb3VyY2UsIHNldFN0YXRlKVxuICB7XG4gICAgaWYgKHNvdXJjZS5lYXRXaGlsZShzcGFjZXNSRSkpXG4gICAge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGNoYXIgPSBzb3VyY2UubmV4dCgpO1xuXG4gICAgaWYgKHNwZWNpYWxSRS50ZXN0KGNoYXIpKVxuICAgIHtcbiAgICAgIHJldHVybiAoY2hhciA9PT0gJ3snICYmIHNvdXJjZS5lYXQoJy0nKSlcbiAgICAgICAgPyBzd2l0Y2hTdGF0ZShzb3VyY2UsIHNldFN0YXRlLCBjaG9tcE11bHRpQ29tbWVudCgxKSlcbiAgICAgICAgOiAoY2hhciA9PT0gJ1snICYmIHNvdXJjZS5tYXRjaCgnZ2xzbHwnKSlcbiAgICAgICAgPyBzd2l0Y2hTdGF0ZShzb3VyY2UsIHNldFN0YXRlLCBjaG9tcEdsc2wpXG4gICAgICAgIDogJ2J1aWx0aW4nO1xuICAgIH1cblxuICAgIGlmIChjaGFyID09PSAnXFwnJylcbiAgICB7XG4gICAgICByZXR1cm4gc3dpdGNoU3RhdGUoc291cmNlLCBzZXRTdGF0ZSwgY2hvbXBDaGFyKTtcbiAgICB9XG5cbiAgICBpZiAoY2hhciA9PT0gJ1wiJylcbiAgICB7XG4gICAgICByZXR1cm4gc291cmNlLmVhdCgnXCInKVxuICAgICAgICA/IHNvdXJjZS5lYXQoJ1wiJylcbiAgICAgICAgPyBzd2l0Y2hTdGF0ZShzb3VyY2UsIHNldFN0YXRlLCBjaG9tcE11bHRpU3RyaW5nKVxuICAgICAgICA6ICdzdHJpbmcnXG4gICAgICA6IHN3aXRjaFN0YXRlKHNvdXJjZSwgc2V0U3RhdGUsIGNob21wU2luZ2xlU3RyaW5nKTtcbiAgICB9XG5cbiAgICBpZiAodXBwZXJSRS50ZXN0KGNoYXIpKVxuICAgIHtcbiAgICAgIHNvdXJjZS5lYXRXaGlsZShpbm5lclJFKTtcbiAgICAgIHJldHVybiAndHlwZSc7XG4gICAgfVxuXG4gICAgaWYgKGxvd2VyUkUudGVzdChjaGFyKSlcbiAgICB7XG4gICAgICB2YXIgaXNEZWYgPSBzb3VyY2UucG9zID09PSAxO1xuICAgICAgc291cmNlLmVhdFdoaWxlKGlubmVyUkUpO1xuICAgICAgcmV0dXJuIGlzRGVmID8gXCJkZWZcIiA6IFwidmFyaWFibGVcIjtcbiAgICB9XG5cbiAgICBpZiAoZGlnaXRSRS50ZXN0KGNoYXIpKVxuICAgIHtcbiAgICAgIGlmIChjaGFyID09PSAnMCcpXG4gICAgICB7XG4gICAgICAgIGlmIChzb3VyY2UuZWF0KC9beFhdLykpXG4gICAgICAgIHtcbiAgICAgICAgICBzb3VyY2UuZWF0V2hpbGUoaGV4UkUpOyAvLyBzaG91bGQgcmVxdWlyZSBhdCBsZWFzdCAxXG4gICAgICAgICAgcmV0dXJuIFwibnVtYmVyXCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2VcbiAgICAgIHtcbiAgICAgICAgc291cmNlLmVhdFdoaWxlKGRpZ2l0UkUpO1xuICAgICAgfVxuICAgICAgaWYgKHNvdXJjZS5lYXQoJy4nKSlcbiAgICAgIHtcbiAgICAgICAgc291cmNlLmVhdFdoaWxlKGRpZ2l0UkUpOyAvLyBzaG91bGQgcmVxdWlyZSBhdCBsZWFzdCAxXG4gICAgICB9XG4gICAgICBpZiAoc291cmNlLmVhdCgvW2VFXS8pKVxuICAgICAge1xuICAgICAgICBzb3VyY2UuZWF0KC9bLStdLyk7XG4gICAgICAgIHNvdXJjZS5lYXRXaGlsZShkaWdpdFJFKTsgLy8gc2hvdWxkIHJlcXVpcmUgYXQgbGVhc3QgMVxuICAgICAgfVxuICAgICAgcmV0dXJuIFwibnVtYmVyXCI7XG4gICAgfVxuXG4gICAgaWYgKHN5bWJvbFJFLnRlc3QoY2hhcikpXG4gICAge1xuICAgICAgaWYgKGNoYXIgPT09ICctJyAmJiBzb3VyY2UuZWF0KCctJykpXG4gICAgICB7XG4gICAgICAgIHNvdXJjZS5za2lwVG9FbmQoKTtcbiAgICAgICAgcmV0dXJuIFwiY29tbWVudFwiO1xuICAgICAgfVxuICAgICAgc291cmNlLmVhdFdoaWxlKHN5bWJvbFJFKTtcbiAgICAgIHJldHVybiBcImtleXdvcmRcIjtcbiAgICB9XG5cbiAgICBpZiAoY2hhciA9PT0gJ18nKVxuICAgIHtcbiAgICAgIHJldHVybiBcImtleXdvcmRcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJlcnJvclwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNob21wTXVsdGlDb21tZW50KG5lc3QpXG57XG4gIGlmIChuZXN0ID09IDApXG4gIHtcbiAgICByZXR1cm4gbm9ybWFsKCk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKHNvdXJjZSwgc2V0U3RhdGUpXG4gIHtcbiAgICB3aGlsZSAoIXNvdXJjZS5lb2woKSlcbiAgICB7XG4gICAgICB2YXIgY2hhciA9IHNvdXJjZS5uZXh0KCk7XG4gICAgICBpZiAoY2hhciA9PSAneycgJiYgc291cmNlLmVhdCgnLScpKVxuICAgICAge1xuICAgICAgICArK25lc3Q7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChjaGFyID09ICctJyAmJiBzb3VyY2UuZWF0KCd9JykpXG4gICAgICB7XG4gICAgICAgIC0tbmVzdDtcbiAgICAgICAgaWYgKG5lc3QgPT09IDApXG4gICAgICAgIHtcbiAgICAgICAgICBzZXRTdGF0ZShub3JtYWwoKSk7XG4gICAgICAgICAgcmV0dXJuICdjb21tZW50JztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBzZXRTdGF0ZShjaG9tcE11bHRpQ29tbWVudChuZXN0KSk7XG4gICAgcmV0dXJuICdjb21tZW50JztcbiAgfVxufVxuXG5mdW5jdGlvbiBjaG9tcE11bHRpU3RyaW5nKHNvdXJjZSwgc2V0U3RhdGUpXG57XG4gIHdoaWxlICghc291cmNlLmVvbCgpKVxuICB7XG4gICAgdmFyIGNoYXIgPSBzb3VyY2UubmV4dCgpO1xuICAgIGlmIChjaGFyID09PSAnXCInICYmIHNvdXJjZS5lYXQoJ1wiJykgJiYgc291cmNlLmVhdCgnXCInKSlcbiAgICB7XG4gICAgICBzZXRTdGF0ZShub3JtYWwoKSk7XG4gICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgfVxuICB9XG4gIHJldHVybiAnc3RyaW5nJztcbn1cblxuZnVuY3Rpb24gY2hvbXBTaW5nbGVTdHJpbmcoc291cmNlLCBzZXRTdGF0ZSlcbntcbiAgd2hpbGUgKHNvdXJjZS5za2lwVG8oJ1xcXFxcIicpKSB7IHNvdXJjZS5uZXh0KCk7IHNvdXJjZS5uZXh0KCk7IH1cbiAgaWYgKHNvdXJjZS5za2lwVG8oJ1wiJykpXG4gIHtcbiAgICBzb3VyY2UubmV4dCgpO1xuICAgIHNldFN0YXRlKG5vcm1hbCgpKTtcbiAgICByZXR1cm4gJ3N0cmluZyc7XG4gIH1cbiAgc291cmNlLnNraXBUb0VuZCgpO1xuICBzZXRTdGF0ZShub3JtYWwoKSk7XG4gIHJldHVybiAnZXJyb3InO1xufVxuXG5mdW5jdGlvbiBjaG9tcENoYXIoc291cmNlLCBzZXRTdGF0ZSlcbntcbiAgd2hpbGUgKHNvdXJjZS5za2lwVG8oXCJcXFxcJ1wiKSkgeyBzb3VyY2UubmV4dCgpOyBzb3VyY2UubmV4dCgpOyB9XG4gIGlmIChzb3VyY2Uuc2tpcFRvKFwiJ1wiKSlcbiAge1xuICAgIHNvdXJjZS5uZXh0KCk7XG4gICAgc2V0U3RhdGUobm9ybWFsKCkpO1xuICAgIHJldHVybiAnc3RyaW5nJztcbiAgfVxuICBzb3VyY2Uuc2tpcFRvRW5kKCk7XG4gIHNldFN0YXRlKG5vcm1hbCgpKTtcbiAgcmV0dXJuICdlcnJvcic7XG59XG5cbmZ1bmN0aW9uIGNob21wR2xzbChzb3VyY2UsIHNldFN0YXRlKVxue1xuICB3aGlsZSAoIXNvdXJjZS5lb2woKSlcbiAge1xuICAgIHZhciBjaGFyID0gc291cmNlLm5leHQoKTtcbiAgICBpZiAoY2hhciA9PT0gJ3wnICYmIHNvdXJjZS5lYXQoJ10nKSlcbiAgICB7XG4gICAgICBzZXRTdGF0ZShub3JtYWwoKSk7XG4gICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgfVxuICB9XG4gIHJldHVybiAnc3RyaW5nJztcbn1cblxudmFyIHdlbGxLbm93bldvcmRzID0ge1xuICBjYXNlOiAxLFxuICBvZjogMSxcbiAgYXM6IDEsXG4gIGlmOiAxLFxuICB0aGVuOiAxLFxuICBlbHNlOiAxLFxuICBsZXQ6IDEsXG4gICAgaW46IDEsXG4gIHR5cGU6IDEsXG4gIGFsaWFzOiAxLFxuICBtb2R1bGU6IDEsXG4gIHdoZXJlOiAxLFxuICBpbXBvcnQ6IDEsXG4gIGV4cG9zaW5nOiAxLFxuICBwb3J0OiAxXG59O1xuXG5leHBvcnQgY29uc3QgZWxtID0ge1xuICBzdGFydFN0YXRlOiBmdW5jdGlvbiAoKSAgeyByZXR1cm4geyBmOiBub3JtYWwoKSB9OyB9LFxuICBjb3B5U3RhdGU6ICBmdW5jdGlvbiAocykgeyByZXR1cm4geyBmOiBzLmYgfTsgfSxcblxuICB0b2tlbjogZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgIHZhciB0eXBlID0gc3RhdGUuZihzdHJlYW0sIGZ1bmN0aW9uKHMpIHsgc3RhdGUuZiA9IHM7IH0pO1xuICAgIHZhciB3b3JkID0gc3RyZWFtLmN1cnJlbnQoKTtcbiAgICByZXR1cm4gKHdlbGxLbm93bldvcmRzLmhhc093blByb3BlcnR5KHdvcmQpKSA/ICdrZXl3b3JkJyA6IHR5cGU7XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=