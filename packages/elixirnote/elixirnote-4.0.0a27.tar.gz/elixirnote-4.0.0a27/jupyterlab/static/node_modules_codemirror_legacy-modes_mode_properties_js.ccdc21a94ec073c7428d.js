"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_properties_js"],{

/***/ "./node_modules/@codemirror/legacy-modes/mode/properties.js":
/*!******************************************************************!*\
  !*** ./node_modules/@codemirror/legacy-modes/mode/properties.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "properties": () => (/* binding */ properties)
/* harmony export */ });
const properties = {
  token: function(stream, state) {
    var sol = stream.sol() || state.afterSection;
    var eol = stream.eol();

    state.afterSection = false;

    if (sol) {
      if (state.nextMultiline) {
        state.inMultiline = true;
        state.nextMultiline = false;
      } else {
        state.position = "def";
      }
    }

    if (eol && ! state.nextMultiline) {
      state.inMultiline = false;
      state.position = "def";
    }

    if (sol) {
      while(stream.eatSpace()) {}
    }

    var ch = stream.next();

    if (sol && (ch === "#" || ch === "!" || ch === ";")) {
      state.position = "comment";
      stream.skipToEnd();
      return "comment";
    } else if (sol && ch === "[") {
      state.afterSection = true;
      stream.skipTo("]"); stream.eat("]");
      return "header";
    } else if (ch === "=" || ch === ":") {
      state.position = "quote";
      return null;
    } else if (ch === "\\" && state.position === "quote") {
      if (stream.eol()) {  // end of line?
        // Multiline value
        state.nextMultiline = true;
      }
    }

    return state.position;
  },

  startState: function() {
    return {
      position : "def",       // Current position, "def", "quote" or "comment"
      nextMultiline : false,  // Is the next line multiline value
      inMultiline : false,    // Is the current line a multiline value
      afterSection : false    // Did we just open a section
    };
  }

};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfcHJvcGVydGllc19qcy5jY2RjMjFhOTRlYzA3M2M3NDI4ZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ04sMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL3Byb3BlcnRpZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gIHRva2VuOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgdmFyIHNvbCA9IHN0cmVhbS5zb2woKSB8fCBzdGF0ZS5hZnRlclNlY3Rpb247XG4gICAgdmFyIGVvbCA9IHN0cmVhbS5lb2woKTtcblxuICAgIHN0YXRlLmFmdGVyU2VjdGlvbiA9IGZhbHNlO1xuXG4gICAgaWYgKHNvbCkge1xuICAgICAgaWYgKHN0YXRlLm5leHRNdWx0aWxpbmUpIHtcbiAgICAgICAgc3RhdGUuaW5NdWx0aWxpbmUgPSB0cnVlO1xuICAgICAgICBzdGF0ZS5uZXh0TXVsdGlsaW5lID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5wb3NpdGlvbiA9IFwiZGVmXCI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVvbCAmJiAhIHN0YXRlLm5leHRNdWx0aWxpbmUpIHtcbiAgICAgIHN0YXRlLmluTXVsdGlsaW5lID0gZmFsc2U7XG4gICAgICBzdGF0ZS5wb3NpdGlvbiA9IFwiZGVmXCI7XG4gICAgfVxuXG4gICAgaWYgKHNvbCkge1xuICAgICAgd2hpbGUoc3RyZWFtLmVhdFNwYWNlKCkpIHt9XG4gICAgfVxuXG4gICAgdmFyIGNoID0gc3RyZWFtLm5leHQoKTtcblxuICAgIGlmIChzb2wgJiYgKGNoID09PSBcIiNcIiB8fCBjaCA9PT0gXCIhXCIgfHwgY2ggPT09IFwiO1wiKSkge1xuICAgICAgc3RhdGUucG9zaXRpb24gPSBcImNvbW1lbnRcIjtcbiAgICAgIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgICAgIHJldHVybiBcImNvbW1lbnRcIjtcbiAgICB9IGVsc2UgaWYgKHNvbCAmJiBjaCA9PT0gXCJbXCIpIHtcbiAgICAgIHN0YXRlLmFmdGVyU2VjdGlvbiA9IHRydWU7XG4gICAgICBzdHJlYW0uc2tpcFRvKFwiXVwiKTsgc3RyZWFtLmVhdChcIl1cIik7XG4gICAgICByZXR1cm4gXCJoZWFkZXJcIjtcbiAgICB9IGVsc2UgaWYgKGNoID09PSBcIj1cIiB8fCBjaCA9PT0gXCI6XCIpIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uID0gXCJxdW90ZVwiO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gXCJcXFxcXCIgJiYgc3RhdGUucG9zaXRpb24gPT09IFwicXVvdGVcIikge1xuICAgICAgaWYgKHN0cmVhbS5lb2woKSkgeyAgLy8gZW5kIG9mIGxpbmU/XG4gICAgICAgIC8vIE11bHRpbGluZSB2YWx1ZVxuICAgICAgICBzdGF0ZS5uZXh0TXVsdGlsaW5lID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdGUucG9zaXRpb247XG4gIH0sXG5cbiAgc3RhcnRTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvc2l0aW9uIDogXCJkZWZcIiwgICAgICAgLy8gQ3VycmVudCBwb3NpdGlvbiwgXCJkZWZcIiwgXCJxdW90ZVwiIG9yIFwiY29tbWVudFwiXG4gICAgICBuZXh0TXVsdGlsaW5lIDogZmFsc2UsICAvLyBJcyB0aGUgbmV4dCBsaW5lIG11bHRpbGluZSB2YWx1ZVxuICAgICAgaW5NdWx0aWxpbmUgOiBmYWxzZSwgICAgLy8gSXMgdGhlIGN1cnJlbnQgbGluZSBhIG11bHRpbGluZSB2YWx1ZVxuICAgICAgYWZ0ZXJTZWN0aW9uIDogZmFsc2UgICAgLy8gRGlkIHdlIGp1c3Qgb3BlbiBhIHNlY3Rpb25cbiAgICB9O1xuICB9XG5cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=