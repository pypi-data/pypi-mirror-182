"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_lang-wast_dist_index_js"],{

/***/ "./node_modules/@codemirror/lang-wast/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@codemirror/lang-wast/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "wast": () => (/* binding */ wast),
/* harmony export */   "wastLanguage": () => (/* binding */ wastLanguage)
/* harmony export */ });
/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/language */ "./node_modules/@codemirror/language/dist/index.js");
/* harmony import */ var _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lezer/highlight */ "./node_modules/@lezer/highlight/dist/index.js");
/* harmony import */ var _lezer_lr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lezer/lr */ "./node_modules/@lezer/lr/dist/index.js");




// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_Keyword = {__proto__:null,anyref:34, dataref:34, eqref:34, externref:34, i31ref:34, funcref:34, i8:34, i16:34, i32:34, i64:34, f32:34, f64:34};
const parser = /*@__PURE__*/_lezer_lr__WEBPACK_IMPORTED_MODULE_1__.LRParser.deserialize({
  version: 14,
  states: "!^Q]QPOOOqQPO'#CbOOQO'#Cd'#CdOOQO'#Cl'#ClOOQO'#Ch'#ChQ]QPOOOOQO,58|,58|OxQPO,58|OOQO-E6f-E6fOOQO1G.h1G.h",
  stateData: "!P~O_OSPOSQOS~OTPOVROXROYROZROaQO~OSUO~P]OSXO~P]O",
  goto: "xaPPPPPPbPbPPPhPPPrXROPTVQTOQVPTWTVXSOPTV",
  nodeNames: "âš  LineComment BlockComment Module ) ( App Identifier Type Keyword Number String",
  maxTerm: 17,
  nodeProps: [
    ["openedBy", 4,"("],
    ["closedBy", 5,")"],
    ["group", -6,6,7,8,9,10,11,"Expression"]
  ],
  skippedNodes: [0,1,2],
  repeatNodeCount: 1,
  tokenData: "/Q~R^XY}YZ}]^}pq}rs!Stu!qxy&Vyz'S{|'X}!O'X!Q!R'b!R![)_!]!^,{#T#o-^~!SO_~~!VTOr!Srs!fs#O!S#O#P!k#P~!S~!kOZ~~!nPO~!S~!tiqr$cst$ctu$cuv$cvw$cwx$cz{$c{|$c}!O$c!O!P$c!P!Q$c!Q![$c![!]$c!^!_$c!_!`$c!`!a$c!a!b$c!b!c$c!c!}$c#Q#R$c#R#S$c#S#T$c#T#o$c#p#q$c#r#s$c~$hiV~qr$cst$ctu$cuv$cvw$cwx$cz{$c{|$c}!O$c!O!P$c!P!Q$c!Q![$c![!]$c!^!_$c!_!`$c!`!a$c!a!b$c!b!c$c!c!}$c#Q#R$c#R#S$c#S#T$c#T#o$c#p#q$c#r#s$c~&[PT~!]!^&_~&bRO!]&_!]!^&k!^~&_~&nTOy&_yz&}z!]&_!]!^&k!^~&_~'SOQ~~'XOS~~'[Q!Q!R'b!R![)_~'gUY~!O!P'y!Q![)_!g!h(j#R#S)s#X#Y(j#l#m)y~(ORY~!Q![(X!g!h(j#X#Y(j~(^SY~!Q![(X!g!h(j#R#S)X#X#Y(j~(mR{|(v}!O(v!Q![(|~(yP!Q![(|~)RQY~!Q![(|#R#S(v~)[P!Q![(X~)dTY~!O!P'y!Q![)_!g!h(j#R#S)s#X#Y(j~)vP!Q![)_~)|R!Q![*V!c!i*V#T#Z*V~*[VY~!O!P*q!Q![*V!c!i*V!r!s+n#R#S)y#T#Z*V#d#e+n~*vTY~!Q![+V!c!i+V!r!s+n#T#Z+V#d#e+n~+[UY~!Q![+V!c!i+V!r!s+n#R#S,o#T#Z+V#d#e+n~+qT{|,Q}!O,Q!Q![,^!c!i,^#T#Z,^~,TR!Q![,^!c!i,^#T#Z,^~,cSY~!Q![,^!c!i,^#R#S,Q#T#Z,^~,rR!Q![+V!c!i+V#T#Z+V~-OP!]!^-R~-WQP~OY-RZ~-R~-ciX~qr-^st-^tu-^uv-^vw-^wx-^z{-^{|-^}!O-^!O!P-^!P!Q-^!Q![-^![!]-^!^!_-^!_!`-^!`!a-^!a!b-^!b!c-^!c!}-^#Q#R-^#R#S-^#S#T-^#T#o-^#p#q-^#r#s-^",
  tokenizers: [0],
  topRules: {"Module":[0,3]},
  specialized: [{term: 9, get: value => spec_Keyword[value] || -1}],
  tokenPrec: 0
});

const wastLanguage = /*@__PURE__*/_codemirror_language__WEBPACK_IMPORTED_MODULE_2__.LRLanguage.define({
    parser: /*@__PURE__*/parser.configure({
        props: [
            /*@__PURE__*/_codemirror_language__WEBPACK_IMPORTED_MODULE_2__.indentNodeProp.add({
                App: /*@__PURE__*/(0,_codemirror_language__WEBPACK_IMPORTED_MODULE_2__.delimitedIndent)({ closing: ")", align: false })
            }),
            /*@__PURE__*/_codemirror_language__WEBPACK_IMPORTED_MODULE_2__.foldNodeProp.add({
                App: _codemirror_language__WEBPACK_IMPORTED_MODULE_2__.foldInside,
                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
            }),
            /*@__PURE__*/(0,_lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.styleTags)({
                Keyword: _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.keyword,
                Type: _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.typeName,
                Number: _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.number,
                String: _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.string,
                Identifier: _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.variableName,
                LineComment: _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.lineComment,
                BlockComment: _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.blockComment,
                "( )": _lezer_highlight__WEBPACK_IMPORTED_MODULE_0__.tags.paren
            })
        ]
    }),
    languageData: {
        commentTokens: { line: ";;", block: { open: "(;", close: ";)" } },
        closeBrackets: { brackets: ["(", '"'] }
    }
});
function wast() {
    return new _codemirror_language__WEBPACK_IMPORTED_MODULE_2__.LanguageSupport(wastLanguage);
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGFuZy13YXN0X2Rpc3RfaW5kZXhfanMuNjhlYmRkNWQ5MjgxNjM3YzEyYzkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBOEg7QUFDM0U7QUFDZDs7QUFFckM7QUFDQSxzQkFBc0I7QUFDdEIsNEJBQTRCLDJEQUFvQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixHQUFHLEdBQUcsR0FBRyxpQkFBaUIsSUFBSSxzQkFBc0Isb0ZBQW9GLEdBQUcsSUFBSSw4REFBOEQsc0VBQXNFLEdBQUcsSUFBSSw4REFBOEQsa0ZBQWtGLGlKQUFpSixJQUFJLHVQQUF1UCxJQUFJLHdKQUF3SixHQUFHLElBQUksOERBQThEO0FBQzdpQztBQUNBLGFBQWEsZUFBZTtBQUM1QixpQkFBaUIsaURBQWlEO0FBQ2xFO0FBQ0EsQ0FBQzs7QUFFRCxrQ0FBa0MsbUVBQWlCO0FBQ25EO0FBQ0E7QUFDQSx5QkFBeUIsb0VBQWtCO0FBQzNDLGtDQUFrQyxxRUFBZSxHQUFHLDRCQUE0QjtBQUNoRixhQUFhO0FBQ2IseUJBQXlCLGtFQUFnQjtBQUN6QyxxQkFBcUIsNERBQVU7QUFDL0IscUNBQXFDLFNBQVM7QUFDOUMsYUFBYTtBQUNiLHlCQUF5QiwyREFBUztBQUNsQyx5QkFBeUIsMERBQVk7QUFDckMsc0JBQXNCLDJEQUFhO0FBQ25DLHdCQUF3Qix5REFBVztBQUNuQyx3QkFBd0IseURBQVc7QUFDbkMsNEJBQTRCLCtEQUFpQjtBQUM3Qyw2QkFBNkIsOERBQWdCO0FBQzdDLDhCQUE4QiwrREFBaUI7QUFDL0MsdUJBQXVCLHdEQUFVO0FBQ2pDLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBLHlCQUF5QixTQUFTLFlBQVksU0FBUyxZQUFZLE1BQU07QUFDekUseUJBQXlCO0FBQ3pCO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsZUFBZSxpRUFBZTtBQUM5Qjs7QUFFOEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGFuZy13YXN0L2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTFJMYW5ndWFnZSwgaW5kZW50Tm9kZVByb3AsIGRlbGltaXRlZEluZGVudCwgZm9sZE5vZGVQcm9wLCBmb2xkSW5zaWRlLCBMYW5ndWFnZVN1cHBvcnQgfSBmcm9tICdAY29kZW1pcnJvci9sYW5ndWFnZSc7XG5pbXBvcnQgeyBzdHlsZVRhZ3MsIHRhZ3MgfSBmcm9tICdAbGV6ZXIvaGlnaGxpZ2h0JztcbmltcG9ydCB7IExSUGFyc2VyIH0gZnJvbSAnQGxlemVyL2xyJztcblxuLy8gVGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgbGV6ZXItZ2VuZXJhdG9yLiBZb3UgcHJvYmFibHkgc2hvdWxkbid0IGVkaXQgaXQuXG5jb25zdCBzcGVjX0tleXdvcmQgPSB7X19wcm90b19fOm51bGwsYW55cmVmOjM0LCBkYXRhcmVmOjM0LCBlcXJlZjozNCwgZXh0ZXJucmVmOjM0LCBpMzFyZWY6MzQsIGZ1bmNyZWY6MzQsIGk4OjM0LCBpMTY6MzQsIGkzMjozNCwgaTY0OjM0LCBmMzI6MzQsIGY2NDozNH07XG5jb25zdCBwYXJzZXIgPSAvKkBfX1BVUkVfXyovTFJQYXJzZXIuZGVzZXJpYWxpemUoe1xuICB2ZXJzaW9uOiAxNCxcbiAgc3RhdGVzOiBcIiFeUV1RUE9PT3FRUE8nI0NiT09RTycjQ2QnI0NkT09RTycjQ2wnI0NsT09RTycjQ2gnI0NoUV1RUE9PT09RTyw1OHwsNTh8T3hRUE8sNTh8T09RTy1FNmYtRTZmT09RTzFHLmgxRy5oXCIsXG4gIHN0YXRlRGF0YTogXCIhUH5PX09TUE9TUU9Tfk9UUE9WUk9YUk9ZUk9aUk9hUU9+T1NVT35QXU9TWE9+UF1PXCIsXG4gIGdvdG86IFwieGFQUFBQUFBiUGJQUFBoUFBQclhST1BUVlFUT1FWUFRXVFZYU09QVFZcIixcbiAgbm9kZU5hbWVzOiBcIuKaoCBMaW5lQ29tbWVudCBCbG9ja0NvbW1lbnQgTW9kdWxlICkgKCBBcHAgSWRlbnRpZmllciBUeXBlIEtleXdvcmQgTnVtYmVyIFN0cmluZ1wiLFxuICBtYXhUZXJtOiAxNyxcbiAgbm9kZVByb3BzOiBbXG4gICAgW1wib3BlbmVkQnlcIiwgNCxcIihcIl0sXG4gICAgW1wiY2xvc2VkQnlcIiwgNSxcIilcIl0sXG4gICAgW1wiZ3JvdXBcIiwgLTYsNiw3LDgsOSwxMCwxMSxcIkV4cHJlc3Npb25cIl1cbiAgXSxcbiAgc2tpcHBlZE5vZGVzOiBbMCwxLDJdLFxuICByZXBlYXROb2RlQ291bnQ6IDEsXG4gIHRva2VuRGF0YTogXCIvUX5SXlhZfVlafV1efXBxfXJzIVN0dSFxeHkmVnl6J1N7fCdYfSFPJ1ghUSFSJ2IhUiFbKV8hXSFeLHsjVCNvLV5+IVNPX35+IVZUT3IhU3JzIWZzI08hUyNPI1AhayNQfiFTfiFrT1p+fiFuUE9+IVN+IXRpcXIkY3N0JGN0dSRjdXYkY3Z3JGN3eCRjenskY3t8JGN9IU8kYyFPIVAkYyFQIVEkYyFRIVskYyFbIV0kYyFeIV8kYyFfIWAkYyFgIWEkYyFhIWIkYyFiIWMkYyFjIX0kYyNRI1IkYyNSI1MkYyNTI1QkYyNUI28kYyNwI3EkYyNyI3MkY34kaGlWfnFyJGNzdCRjdHUkY3V2JGN2dyRjd3gkY3p7JGN7fCRjfSFPJGMhTyFQJGMhUCFRJGMhUSFbJGMhWyFdJGMhXiFfJGMhXyFgJGMhYCFhJGMhYSFiJGMhYiFjJGMhYyF9JGMjUSNSJGMjUiNTJGMjUyNUJGMjVCNvJGMjcCNxJGMjciNzJGN+JltQVH4hXSFeJl9+JmJSTyFdJl8hXSFeJmshXn4mX34mblRPeSZfeXomfXohXSZfIV0hXiZrIV5+Jl9+J1NPUX5+J1hPU35+J1tRIVEhUidiIVIhWylffidnVVl+IU8hUCd5IVEhWylfIWchaChqI1IjUylzI1gjWShqI2wjbSl5fihPUll+IVEhWyhYIWchaChqI1gjWShqfiheU1l+IVEhWyhYIWchaChqI1IjUylYI1gjWShqfihtUnt8KHZ9IU8odiFRIVsofH4oeVAhUSFbKHx+KVJRWX4hUSFbKHwjUiNTKHZ+KVtQIVEhWyhYfilkVFl+IU8hUCd5IVEhWylfIWchaChqI1IjUylzI1gjWShqfil2UCFRIVspX34pfFIhUSFbKlYhYyFpKlYjVCNaKlZ+KltWWX4hTyFQKnEhUSFbKlYhYyFpKlYhciFzK24jUiNTKXkjVCNaKlYjZCNlK25+KnZUWX4hUSFbK1YhYyFpK1YhciFzK24jVCNaK1YjZCNlK25+K1tVWX4hUSFbK1YhYyFpK1YhciFzK24jUiNTLG8jVCNaK1YjZCNlK25+K3FUe3wsUX0hTyxRIVEhWyxeIWMhaSxeI1QjWixefixUUiFRIVssXiFjIWksXiNUI1osXn4sY1NZfiFRIVssXiFjIWksXiNSI1MsUSNUI1osXn4sclIhUSFbK1YhYyFpK1YjVCNaK1Z+LU9QIV0hXi1Sfi1XUVB+T1ktUlp+LVJ+LWNpWH5xci1ec3QtXnR1LV51di1ednctXnd4LV56ey1ee3wtXn0hTy1eIU8hUC1eIVAhUS1eIVEhWy1eIVshXS1eIV4hXy1eIV8hYC1eIWAhYS1eIWEhYi1eIWIhYy1eIWMhfS1eI1EjUi1eI1IjUy1eI1MjVC1eI1Qjby1eI3AjcS1eI3Ijcy1eXCIsXG4gIHRva2VuaXplcnM6IFswXSxcbiAgdG9wUnVsZXM6IHtcIk1vZHVsZVwiOlswLDNdfSxcbiAgc3BlY2lhbGl6ZWQ6IFt7dGVybTogOSwgZ2V0OiB2YWx1ZSA9PiBzcGVjX0tleXdvcmRbdmFsdWVdIHx8IC0xfV0sXG4gIHRva2VuUHJlYzogMFxufSk7XG5cbmNvbnN0IHdhc3RMYW5ndWFnZSA9IC8qQF9fUFVSRV9fKi9MUkxhbmd1YWdlLmRlZmluZSh7XG4gICAgcGFyc2VyOiAvKkBfX1BVUkVfXyovcGFyc2VyLmNvbmZpZ3VyZSh7XG4gICAgICAgIHByb3BzOiBbXG4gICAgICAgICAgICAvKkBfX1BVUkVfXyovaW5kZW50Tm9kZVByb3AuYWRkKHtcbiAgICAgICAgICAgICAgICBBcHA6IC8qQF9fUFVSRV9fKi9kZWxpbWl0ZWRJbmRlbnQoeyBjbG9zaW5nOiBcIilcIiwgYWxpZ246IGZhbHNlIH0pXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIC8qQF9fUFVSRV9fKi9mb2xkTm9kZVByb3AuYWRkKHtcbiAgICAgICAgICAgICAgICBBcHA6IGZvbGRJbnNpZGUsXG4gICAgICAgICAgICAgICAgQmxvY2tDb21tZW50KHRyZWUpIHsgcmV0dXJuIHsgZnJvbTogdHJlZS5mcm9tICsgMiwgdG86IHRyZWUudG8gLSAyIH07IH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgLypAX19QVVJFX18qL3N0eWxlVGFncyh7XG4gICAgICAgICAgICAgICAgS2V5d29yZDogdGFncy5rZXl3b3JkLFxuICAgICAgICAgICAgICAgIFR5cGU6IHRhZ3MudHlwZU5hbWUsXG4gICAgICAgICAgICAgICAgTnVtYmVyOiB0YWdzLm51bWJlcixcbiAgICAgICAgICAgICAgICBTdHJpbmc6IHRhZ3Muc3RyaW5nLFxuICAgICAgICAgICAgICAgIElkZW50aWZpZXI6IHRhZ3MudmFyaWFibGVOYW1lLFxuICAgICAgICAgICAgICAgIExpbmVDb21tZW50OiB0YWdzLmxpbmVDb21tZW50LFxuICAgICAgICAgICAgICAgIEJsb2NrQ29tbWVudDogdGFncy5ibG9ja0NvbW1lbnQsXG4gICAgICAgICAgICAgICAgXCIoIClcIjogdGFncy5wYXJlblxuICAgICAgICAgICAgfSlcbiAgICAgICAgXVxuICAgIH0pLFxuICAgIGxhbmd1YWdlRGF0YToge1xuICAgICAgICBjb21tZW50VG9rZW5zOiB7IGxpbmU6IFwiOztcIiwgYmxvY2s6IHsgb3BlbjogXCIoO1wiLCBjbG9zZTogXCI7KVwiIH0gfSxcbiAgICAgICAgY2xvc2VCcmFja2V0czogeyBicmFja2V0czogW1wiKFwiLCAnXCInXSB9XG4gICAgfVxufSk7XG5mdW5jdGlvbiB3YXN0KCkge1xuICAgIHJldHVybiBuZXcgTGFuZ3VhZ2VTdXBwb3J0KHdhc3RMYW5ndWFnZSk7XG59XG5cbmV4cG9ydCB7IHdhc3QsIHdhc3RMYW5ndWFnZSB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9