"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_yacas_js"],{

/***/ "../../node_modules/@codemirror/legacy-modes/mode/yacas.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/@codemirror/legacy-modes/mode/yacas.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "yacas": () => (/* binding */ yacas)
/* harmony export */ });
function words(str) {
  var obj = {}, words = str.split(" ");
  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
  return obj;
}

var bodiedOps = words("Assert BackQuote D Defun Deriv For ForEach FromFile " +
                      "FromString Function Integrate InverseTaylor Limit " +
                      "LocalSymbols Macro MacroRule MacroRulePattern " +
                      "NIntegrate Rule RulePattern Subst TD TExplicitSum " +
                      "TSum Taylor Taylor1 Taylor2 Taylor3 ToFile " +
                      "ToStdout ToString TraceRule Until While");

// patterns
var pFloatForm  = "(?:(?:\\.\\d+|\\d+\\.\\d*|\\d+)(?:[eE][+-]?\\d+)?)";
var pIdentifier = "(?:[a-zA-Z\\$'][a-zA-Z0-9\\$']*)";

// regular expressions
var reFloatForm    = new RegExp(pFloatForm);
var reIdentifier   = new RegExp(pIdentifier);
var rePattern      = new RegExp(pIdentifier + "?_" + pIdentifier);
var reFunctionLike = new RegExp(pIdentifier + "\\s*\\(");

function tokenBase(stream, state) {
  var ch;

  // get next character
  ch = stream.next();

  // string
  if (ch === '"') {
    state.tokenize = tokenString;
    return state.tokenize(stream, state);
  }

  // comment
  if (ch === '/') {
    if (stream.eat('*')) {
      state.tokenize = tokenComment;
      return state.tokenize(stream, state);
    }
    if (stream.eat("/")) {
      stream.skipToEnd();
      return "comment";
    }
  }

  // go back one character
  stream.backUp(1);

  // update scope info
  var m = stream.match(/^(\w+)\s*\(/, false);
  if (m !== null && bodiedOps.hasOwnProperty(m[1]))
    state.scopes.push('bodied');

  var scope = currentScope(state);

  if (scope === 'bodied' && ch === '[')
    state.scopes.pop();

  if (ch === '[' || ch === '{' || ch === '(')
    state.scopes.push(ch);

  scope = currentScope(state);

  if (scope === '[' && ch === ']' ||
      scope === '{' && ch === '}' ||
      scope === '(' && ch === ')')
    state.scopes.pop();

  if (ch === ';') {
    while (scope === 'bodied') {
      state.scopes.pop();
      scope = currentScope(state);
    }
  }

  // look for ordered rules
  if (stream.match(/\d+ *#/, true, false)) {
    return 'qualifier';
  }

  // look for numbers
  if (stream.match(reFloatForm, true, false)) {
    return 'number';
  }

  // look for placeholders
  if (stream.match(rePattern, true, false)) {
    return 'variableName.special';
  }

  // match all braces separately
  if (stream.match(/(?:\[|\]|{|}|\(|\))/, true, false)) {
    return 'bracket';
  }

  // literals looking like function calls
  if (stream.match(reFunctionLike, true, false)) {
    stream.backUp(1);
    return 'variableName.function';
  }

  // all other identifiers
  if (stream.match(reIdentifier, true, false)) {
    return 'variable';
  }

  // operators; note that operators like @@ or /; are matched separately for each symbol.
  if (stream.match(/(?:\\|\+|\-|\*|\/|,|;|\.|:|@|~|=|>|<|&|\||_|`|'|\^|\?|!|%|#)/, true, false)) {
    return 'operator';
  }

  // everything else is an error
  return 'error';
}

function tokenString(stream, state) {
  var next, end = false, escaped = false;
  while ((next = stream.next()) != null) {
    if (next === '"' && !escaped) {
      end = true;
      break;
    }
    escaped = !escaped && next === '\\';
  }
  if (end && !escaped) {
    state.tokenize = tokenBase;
  }
  return 'string';
};

function tokenComment(stream, state) {
  var prev, next;
  while((next = stream.next()) != null) {
    if (prev === '*' && next === '/') {
      state.tokenize = tokenBase;
      break;
    }
    prev = next;
  }
  return 'comment';
}

function currentScope(state) {
  var scope = null;
  if (state.scopes.length > 0)
    scope = state.scopes[state.scopes.length - 1];
  return scope;
}

const yacas = {
  startState: function() {
    return {
      tokenize: tokenBase,
      scopes: []
    };
  },
  token: function(stream, state) {
    if (stream.eatSpace()) return null;
    return state.tokenize(stream, state);
  },
  indent: function(state, textAfter, cx) {
    if (state.tokenize !== tokenBase && state.tokenize !== null)
      return null;

    var delta = 0;
    if (textAfter === ']' || textAfter === '];' ||
        textAfter === '}' || textAfter === '};' ||
        textAfter === ');')
      delta = -1;

    return (state.scopes.length + delta) * cx.unit;
  },

  languageData: {
    electricInput: /[{}\[\]()\;]/,
    commentTokens: {line: "//", block: {open: "/*", close: "*/"}}
  }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfeWFjYXNfanMuY2I5Yjk0MTliNmNjNDBmZGMxM2EuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0EsY0FBYztBQUNkLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsNkJBQTZCO0FBQzdCOztBQUVBOztBQUVBO0FBQ0Esa0JBQWtCLGNBQWM7QUFDaEM7QUFDQTs7QUFFQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhCQUE4QixFQUFFO0FBQ2hDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0Isa0NBQWtDO0FBQ2xELHlDQUF5QztBQUN6QztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOENBQThDO0FBQzlDLHdCQUF3QixzQkFBc0I7QUFDOUMseUJBQXlCO0FBQ3pCOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLHVCQUF1QixRQUFRO0FBQy9CLG9CQUFvQixvQkFBb0I7QUFDeEM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUveWFjYXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gd29yZHMoc3RyKSB7XG4gIHZhciBvYmogPSB7fSwgd29yZHMgPSBzdHIuc3BsaXQoXCIgXCIpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHdvcmRzLmxlbmd0aDsgKytpKSBvYmpbd29yZHNbaV1dID0gdHJ1ZTtcbiAgcmV0dXJuIG9iajtcbn1cblxudmFyIGJvZGllZE9wcyA9IHdvcmRzKFwiQXNzZXJ0IEJhY2tRdW90ZSBEIERlZnVuIERlcml2IEZvciBGb3JFYWNoIEZyb21GaWxlIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICBcIkZyb21TdHJpbmcgRnVuY3Rpb24gSW50ZWdyYXRlIEludmVyc2VUYXlsb3IgTGltaXQgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgIFwiTG9jYWxTeW1ib2xzIE1hY3JvIE1hY3JvUnVsZSBNYWNyb1J1bGVQYXR0ZXJuIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICBcIk5JbnRlZ3JhdGUgUnVsZSBSdWxlUGF0dGVybiBTdWJzdCBURCBURXhwbGljaXRTdW0gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgIFwiVFN1bSBUYXlsb3IgVGF5bG9yMSBUYXlsb3IyIFRheWxvcjMgVG9GaWxlIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICBcIlRvU3Rkb3V0IFRvU3RyaW5nIFRyYWNlUnVsZSBVbnRpbCBXaGlsZVwiKTtcblxuLy8gcGF0dGVybnNcbnZhciBwRmxvYXRGb3JtICA9IFwiKD86KD86XFxcXC5cXFxcZCt8XFxcXGQrXFxcXC5cXFxcZCp8XFxcXGQrKSg/OltlRV1bKy1dP1xcXFxkKyk/KVwiO1xudmFyIHBJZGVudGlmaWVyID0gXCIoPzpbYS16QS1aXFxcXCQnXVthLXpBLVowLTlcXFxcJCddKilcIjtcblxuLy8gcmVndWxhciBleHByZXNzaW9uc1xudmFyIHJlRmxvYXRGb3JtICAgID0gbmV3IFJlZ0V4cChwRmxvYXRGb3JtKTtcbnZhciByZUlkZW50aWZpZXIgICA9IG5ldyBSZWdFeHAocElkZW50aWZpZXIpO1xudmFyIHJlUGF0dGVybiAgICAgID0gbmV3IFJlZ0V4cChwSWRlbnRpZmllciArIFwiP19cIiArIHBJZGVudGlmaWVyKTtcbnZhciByZUZ1bmN0aW9uTGlrZSA9IG5ldyBSZWdFeHAocElkZW50aWZpZXIgKyBcIlxcXFxzKlxcXFwoXCIpO1xuXG5mdW5jdGlvbiB0b2tlbkJhc2Uoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgY2g7XG5cbiAgLy8gZ2V0IG5leHQgY2hhcmFjdGVyXG4gIGNoID0gc3RyZWFtLm5leHQoKTtcblxuICAvLyBzdHJpbmdcbiAgaWYgKGNoID09PSAnXCInKSB7XG4gICAgc3RhdGUudG9rZW5pemUgPSB0b2tlblN0cmluZztcbiAgICByZXR1cm4gc3RhdGUudG9rZW5pemUoc3RyZWFtLCBzdGF0ZSk7XG4gIH1cblxuICAvLyBjb21tZW50XG4gIGlmIChjaCA9PT0gJy8nKSB7XG4gICAgaWYgKHN0cmVhbS5lYXQoJyonKSkge1xuICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbkNvbW1lbnQ7XG4gICAgICByZXR1cm4gc3RhdGUudG9rZW5pemUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuICAgIGlmIChzdHJlYW0uZWF0KFwiL1wiKSkge1xuICAgICAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICAgICAgcmV0dXJuIFwiY29tbWVudFwiO1xuICAgIH1cbiAgfVxuXG4gIC8vIGdvIGJhY2sgb25lIGNoYXJhY3RlclxuICBzdHJlYW0uYmFja1VwKDEpO1xuXG4gIC8vIHVwZGF0ZSBzY29wZSBpbmZvXG4gIHZhciBtID0gc3RyZWFtLm1hdGNoKC9eKFxcdyspXFxzKlxcKC8sIGZhbHNlKTtcbiAgaWYgKG0gIT09IG51bGwgJiYgYm9kaWVkT3BzLmhhc093blByb3BlcnR5KG1bMV0pKVxuICAgIHN0YXRlLnNjb3Blcy5wdXNoKCdib2RpZWQnKTtcblxuICB2YXIgc2NvcGUgPSBjdXJyZW50U2NvcGUoc3RhdGUpO1xuXG4gIGlmIChzY29wZSA9PT0gJ2JvZGllZCcgJiYgY2ggPT09ICdbJylcbiAgICBzdGF0ZS5zY29wZXMucG9wKCk7XG5cbiAgaWYgKGNoID09PSAnWycgfHwgY2ggPT09ICd7JyB8fCBjaCA9PT0gJygnKVxuICAgIHN0YXRlLnNjb3Blcy5wdXNoKGNoKTtcblxuICBzY29wZSA9IGN1cnJlbnRTY29wZShzdGF0ZSk7XG5cbiAgaWYgKHNjb3BlID09PSAnWycgJiYgY2ggPT09ICddJyB8fFxuICAgICAgc2NvcGUgPT09ICd7JyAmJiBjaCA9PT0gJ30nIHx8XG4gICAgICBzY29wZSA9PT0gJygnICYmIGNoID09PSAnKScpXG4gICAgc3RhdGUuc2NvcGVzLnBvcCgpO1xuXG4gIGlmIChjaCA9PT0gJzsnKSB7XG4gICAgd2hpbGUgKHNjb3BlID09PSAnYm9kaWVkJykge1xuICAgICAgc3RhdGUuc2NvcGVzLnBvcCgpO1xuICAgICAgc2NvcGUgPSBjdXJyZW50U2NvcGUoc3RhdGUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGxvb2sgZm9yIG9yZGVyZWQgcnVsZXNcbiAgaWYgKHN0cmVhbS5tYXRjaCgvXFxkKyAqIy8sIHRydWUsIGZhbHNlKSkge1xuICAgIHJldHVybiAncXVhbGlmaWVyJztcbiAgfVxuXG4gIC8vIGxvb2sgZm9yIG51bWJlcnNcbiAgaWYgKHN0cmVhbS5tYXRjaChyZUZsb2F0Rm9ybSwgdHJ1ZSwgZmFsc2UpKSB7XG4gICAgcmV0dXJuICdudW1iZXInO1xuICB9XG5cbiAgLy8gbG9vayBmb3IgcGxhY2Vob2xkZXJzXG4gIGlmIChzdHJlYW0ubWF0Y2gocmVQYXR0ZXJuLCB0cnVlLCBmYWxzZSkpIHtcbiAgICByZXR1cm4gJ3ZhcmlhYmxlTmFtZS5zcGVjaWFsJztcbiAgfVxuXG4gIC8vIG1hdGNoIGFsbCBicmFjZXMgc2VwYXJhdGVseVxuICBpZiAoc3RyZWFtLm1hdGNoKC8oPzpcXFt8XFxdfHt8fXxcXCh8XFwpKS8sIHRydWUsIGZhbHNlKSkge1xuICAgIHJldHVybiAnYnJhY2tldCc7XG4gIH1cblxuICAvLyBsaXRlcmFscyBsb29raW5nIGxpa2UgZnVuY3Rpb24gY2FsbHNcbiAgaWYgKHN0cmVhbS5tYXRjaChyZUZ1bmN0aW9uTGlrZSwgdHJ1ZSwgZmFsc2UpKSB7XG4gICAgc3RyZWFtLmJhY2tVcCgxKTtcbiAgICByZXR1cm4gJ3ZhcmlhYmxlTmFtZS5mdW5jdGlvbic7XG4gIH1cblxuICAvLyBhbGwgb3RoZXIgaWRlbnRpZmllcnNcbiAgaWYgKHN0cmVhbS5tYXRjaChyZUlkZW50aWZpZXIsIHRydWUsIGZhbHNlKSkge1xuICAgIHJldHVybiAndmFyaWFibGUnO1xuICB9XG5cbiAgLy8gb3BlcmF0b3JzOyBub3RlIHRoYXQgb3BlcmF0b3JzIGxpa2UgQEAgb3IgLzsgYXJlIG1hdGNoZWQgc2VwYXJhdGVseSBmb3IgZWFjaCBzeW1ib2wuXG4gIGlmIChzdHJlYW0ubWF0Y2goLyg/OlxcXFx8XFwrfFxcLXxcXCp8XFwvfCx8O3xcXC58OnxAfH58PXw+fDx8JnxcXHx8X3xgfCd8XFxefFxcP3whfCV8IykvLCB0cnVlLCBmYWxzZSkpIHtcbiAgICByZXR1cm4gJ29wZXJhdG9yJztcbiAgfVxuXG4gIC8vIGV2ZXJ5dGhpbmcgZWxzZSBpcyBhbiBlcnJvclxuICByZXR1cm4gJ2Vycm9yJztcbn1cblxuZnVuY3Rpb24gdG9rZW5TdHJpbmcoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbmV4dCwgZW5kID0gZmFsc2UsIGVzY2FwZWQgPSBmYWxzZTtcbiAgd2hpbGUgKChuZXh0ID0gc3RyZWFtLm5leHQoKSkgIT0gbnVsbCkge1xuICAgIGlmIChuZXh0ID09PSAnXCInICYmICFlc2NhcGVkKSB7XG4gICAgICBlbmQgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGVzY2FwZWQgPSAhZXNjYXBlZCAmJiBuZXh0ID09PSAnXFxcXCc7XG4gIH1cbiAgaWYgKGVuZCAmJiAhZXNjYXBlZCkge1xuICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5CYXNlO1xuICB9XG4gIHJldHVybiAnc3RyaW5nJztcbn07XG5cbmZ1bmN0aW9uIHRva2VuQ29tbWVudChzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBwcmV2LCBuZXh0O1xuICB3aGlsZSgobmV4dCA9IHN0cmVhbS5uZXh0KCkpICE9IG51bGwpIHtcbiAgICBpZiAocHJldiA9PT0gJyonICYmIG5leHQgPT09ICcvJykge1xuICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbkJhc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcHJldiA9IG5leHQ7XG4gIH1cbiAgcmV0dXJuICdjb21tZW50Jztcbn1cblxuZnVuY3Rpb24gY3VycmVudFNjb3BlKHN0YXRlKSB7XG4gIHZhciBzY29wZSA9IG51bGw7XG4gIGlmIChzdGF0ZS5zY29wZXMubGVuZ3RoID4gMClcbiAgICBzY29wZSA9IHN0YXRlLnNjb3Blc1tzdGF0ZS5zY29wZXMubGVuZ3RoIC0gMV07XG4gIHJldHVybiBzY29wZTtcbn1cblxuZXhwb3J0IGNvbnN0IHlhY2FzID0ge1xuICBzdGFydFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW5pemU6IHRva2VuQmFzZSxcbiAgICAgIHNjb3BlczogW11cbiAgICB9O1xuICB9LFxuICB0b2tlbjogZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdHJlYW0uZWF0U3BhY2UoKSkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHN0YXRlLnRva2VuaXplKHN0cmVhbSwgc3RhdGUpO1xuICB9LFxuICBpbmRlbnQ6IGZ1bmN0aW9uKHN0YXRlLCB0ZXh0QWZ0ZXIsIGN4KSB7XG4gICAgaWYgKHN0YXRlLnRva2VuaXplICE9PSB0b2tlbkJhc2UgJiYgc3RhdGUudG9rZW5pemUgIT09IG51bGwpXG4gICAgICByZXR1cm4gbnVsbDtcblxuICAgIHZhciBkZWx0YSA9IDA7XG4gICAgaWYgKHRleHRBZnRlciA9PT0gJ10nIHx8IHRleHRBZnRlciA9PT0gJ107JyB8fFxuICAgICAgICB0ZXh0QWZ0ZXIgPT09ICd9JyB8fCB0ZXh0QWZ0ZXIgPT09ICd9OycgfHxcbiAgICAgICAgdGV4dEFmdGVyID09PSAnKTsnKVxuICAgICAgZGVsdGEgPSAtMTtcblxuICAgIHJldHVybiAoc3RhdGUuc2NvcGVzLmxlbmd0aCArIGRlbHRhKSAqIGN4LnVuaXQ7XG4gIH0sXG5cbiAgbGFuZ3VhZ2VEYXRhOiB7XG4gICAgZWxlY3RyaWNJbnB1dDogL1t7fVxcW1xcXSgpXFw7XS8sXG4gICAgY29tbWVudFRva2Vuczoge2xpbmU6IFwiLy9cIiwgYmxvY2s6IHtvcGVuOiBcIi8qXCIsIGNsb3NlOiBcIiovXCJ9fVxuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9