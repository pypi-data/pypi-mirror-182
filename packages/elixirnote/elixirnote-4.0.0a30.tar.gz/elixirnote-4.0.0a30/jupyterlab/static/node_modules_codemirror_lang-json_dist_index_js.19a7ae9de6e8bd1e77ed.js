"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_lang-json_dist_index_js"],{

/***/ "../../node_modules/@codemirror/lang-json/dist/index.js":
/*!**************************************************************!*\
  !*** ../../node_modules/@codemirror/lang-json/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json),
/* harmony export */   "jsonLanguage": () => (/* binding */ jsonLanguage),
/* harmony export */   "jsonParseLinter": () => (/* binding */ jsonParseLinter)
/* harmony export */ });
/* harmony import */ var _lezer_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lezer/json */ "../../node_modules/@lezer/json/dist/index.es.js");
/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/language */ "../../node_modules/@codemirror/language/dist/index.js");



/**
Calls
[`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)
on the document and, if that throws an error, reports it as a
single diagnostic.
*/
const jsonParseLinter = () => (view) => {
    try {
        JSON.parse(view.state.doc.toString());
    }
    catch (e) {
        if (!(e instanceof SyntaxError))
            throw e;
        const pos = getErrorPosition(e, view.state.doc);
        return [{
                from: pos,
                message: e.message,
                severity: 'error',
                to: pos
            }];
    }
    return [];
};
function getErrorPosition(error, doc) {
    let m;
    if (m = error.message.match(/at position (\d+)/))
        return Math.min(+m[1], doc.length);
    if (m = error.message.match(/at line (\d+) column (\d+)/))
        return Math.min(doc.line(+m[1]).from + (+m[2]) - 1, doc.length);
    return 0;
}

/**
A language provider that provides JSON parsing.
*/
const jsonLanguage = /*@__PURE__*/_codemirror_language__WEBPACK_IMPORTED_MODULE_1__.LRLanguage.define({
    parser: /*@__PURE__*/_lezer_json__WEBPACK_IMPORTED_MODULE_0__.parser.configure({
        props: [
            /*@__PURE__*/_codemirror_language__WEBPACK_IMPORTED_MODULE_1__.indentNodeProp.add({
                Object: /*@__PURE__*/(0,_codemirror_language__WEBPACK_IMPORTED_MODULE_1__.continuedIndent)({ except: /^\s*\}/ }),
                Array: /*@__PURE__*/(0,_codemirror_language__WEBPACK_IMPORTED_MODULE_1__.continuedIndent)({ except: /^\s*\]/ })
            }),
            /*@__PURE__*/_codemirror_language__WEBPACK_IMPORTED_MODULE_1__.foldNodeProp.add({
                "Object Array": _codemirror_language__WEBPACK_IMPORTED_MODULE_1__.foldInside
            })
        ]
    }),
    languageData: {
        closeBrackets: { brackets: ["[", "{", '"'] },
        indentOnInput: /^\s*[\}\]]$/
    }
});
/**
JSON language support.
*/
function json() {
    return new _codemirror_language__WEBPACK_IMPORTED_MODULE_1__.LanguageSupport(jsonLanguage);
}




/***/ }),

/***/ "../../node_modules/@lezer/json/dist/index.es.js":
/*!*******************************************************!*\
  !*** ../../node_modules/@lezer/json/dist/index.es.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parser": () => (/* binding */ parser)
/* harmony export */ });
/* harmony import */ var _lezer_lr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lezer/lr */ "../../node_modules/@lezer/lr/dist/index.js");
/* harmony import */ var _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lezer/highlight */ "../../node_modules/@lezer/highlight/dist/index.js");



const jsonHighlighting = (0,_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.styleTags)({
  String: _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.string,
  Number: _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.number,
  "True False": _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.bool,
  PropertyName: _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.propertyName,
  Null: _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags["null"],
  ",": _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.separator,
  "[ ]": _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.squareBracket,
  "{ }": _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.brace
});

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = _lezer_lr__WEBPACK_IMPORTED_MODULE_0__.LRParser.deserialize({
  version: 14,
  states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j",
  stateData: "#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O",
  goto: "!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
  nodeNames: "âš  JsonText True False Null Number String } { Object Property PropertyName ] [ Array",
  maxTerm: 25,
  nodeProps: [
    ["openedBy", 7,"{",12,"["],
    ["closedBy", 8,"}",13,"]"]
  ],
  propSources: [jsonHighlighting],
  skippedNodes: [0],
  repeatNodeCount: 2,
  tokenData: "(p~RaXY!WYZ!W]^!Wpq!Wrs!]|}$i}!O$n!Q!R$w!R![&V![!]&h!}#O&m#P#Q&r#Y#Z&w#b#c'f#h#i'}#o#p(f#q#r(k~!]Oc~~!`Upq!]qr!]rs!rs#O!]#O#P!w#P~!]~!wOe~~!zXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#g~#jR!Q![#s!c!i#s#T#Z#s~#vR!Q![$P!c!i$P#T#Z$P~$SR!Q![$]!c!i$]#T#Z$]~$`R!Q![!]!c!i!]#T#Z!]~$nOh~~$qQ!Q!R$w!R![&V~$|RT~!O!P%V!g!h%k#X#Y%k~%YP!Q![%]~%bRT~!Q![%]!g!h%k#X#Y%k~%nR{|%w}!O%w!Q![%}~%zP!Q![%}~&SPT~!Q![%}~&[ST~!O!P%V!Q![&V!g!h%k#X#Y%k~&mOg~~&rO]~~&wO[~~&zP#T#U&}~'QP#`#a'T~'WP#g#h'Z~'^P#X#Y'a~'fOR~~'iP#i#j'l~'oP#`#a'r~'uP#`#a'x~'}OS~~(QP#f#g(T~(WP#i#j(Z~(^P#X#Y(a~(fOQ~~(kOW~~(pOV~",
  tokenizers: [0],
  topRules: {"JsonText":[0,1]},
  tokenPrec: 0
});




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGFuZy1qc29uX2Rpc3RfaW5kZXhfanMuMTlhN2FlOWRlNmU4YmQxZTc3ZWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBcUM7QUFDeUY7O0FBRTlIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLG1FQUFpQjtBQUNuRCx5QkFBeUIseURBQWdCO0FBQ3pDO0FBQ0EseUJBQXlCLG9FQUFrQjtBQUMzQyxxQ0FBcUMscUVBQWUsR0FBRyxlQUFlLEdBQUc7QUFDekUsb0NBQW9DLHFFQUFlLEdBQUcsa0JBQWtCO0FBQ3hFLGFBQWE7QUFDYix5QkFBeUIsa0VBQWdCO0FBQ3pDLGdDQUFnQyw0REFBVTtBQUMxQyxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQSx5QkFBeUIsa0JBQWtCLFNBQVM7QUFDcEQsK0JBQStCO0FBQy9CO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpRUFBZTtBQUM5Qjs7QUFFK0M7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDOURWO0FBQ2M7O0FBRW5ELHlCQUF5QiwyREFBUztBQUNsQyxVQUFVLHlEQUFXO0FBQ3JCLFVBQVUseURBQVc7QUFDckIsZ0JBQWdCLHVEQUFTO0FBQ3pCLGdCQUFnQiwrREFBaUI7QUFDakMsUUFBUSwwREFBUztBQUNqQixPQUFPLDREQUFjO0FBQ3JCLFNBQVMsZ0VBQWtCO0FBQzNCLE1BQU0sR0FBRyx3REFBVTtBQUNuQixDQUFDOztBQUVEO0FBQ0EsZUFBZSwyREFBb0I7QUFDbkM7QUFDQSxpRkFBaUY7QUFDakY7QUFDQSw0QkFBNEI7QUFDNUIsMkRBQTJEO0FBQzNEO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLEdBQUcsd0JBQXdCLDRCQUE0Qiw2UkFBNlIsSUFBSSxVQUFVLFVBQVUsWUFBWSwwREFBMEQscUVBQXFFO0FBQ2hpQjtBQUNBLGFBQWEsaUJBQWlCO0FBQzlCO0FBQ0EsQ0FBQzs7QUFFaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL0Bjb2RlbWlycm9yL2xhbmctanNvbi9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi8uLi9ub2RlX21vZHVsZXMvQGxlemVyL2pzb24vZGlzdC9pbmRleC5lcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZXIgfSBmcm9tICdAbGV6ZXIvanNvbic7XG5pbXBvcnQgeyBMUkxhbmd1YWdlLCBpbmRlbnROb2RlUHJvcCwgY29udGludWVkSW5kZW50LCBmb2xkTm9kZVByb3AsIGZvbGRJbnNpZGUsIExhbmd1YWdlU3VwcG9ydCB9IGZyb20gJ0Bjb2RlbWlycm9yL2xhbmd1YWdlJztcblxuLyoqXG5DYWxsc1xuW2BKU09OLnBhcnNlYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvSlNPTi9wYXJzZSlcbm9uIHRoZSBkb2N1bWVudCBhbmQsIGlmIHRoYXQgdGhyb3dzIGFuIGVycm9yLCByZXBvcnRzIGl0IGFzIGFcbnNpbmdsZSBkaWFnbm9zdGljLlxuKi9cbmNvbnN0IGpzb25QYXJzZUxpbnRlciA9ICgpID0+ICh2aWV3KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgSlNPTi5wYXJzZSh2aWV3LnN0YXRlLmRvYy50b1N0cmluZygpKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKCEoZSBpbnN0YW5jZW9mIFN5bnRheEVycm9yKSlcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIGNvbnN0IHBvcyA9IGdldEVycm9yUG9zaXRpb24oZSwgdmlldy5zdGF0ZS5kb2MpO1xuICAgICAgICByZXR1cm4gW3tcbiAgICAgICAgICAgICAgICBmcm9tOiBwb3MsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogZS5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIHNldmVyaXR5OiAnZXJyb3InLFxuICAgICAgICAgICAgICAgIHRvOiBwb3NcbiAgICAgICAgICAgIH1dO1xuICAgIH1cbiAgICByZXR1cm4gW107XG59O1xuZnVuY3Rpb24gZ2V0RXJyb3JQb3NpdGlvbihlcnJvciwgZG9jKSB7XG4gICAgbGV0IG07XG4gICAgaWYgKG0gPSBlcnJvci5tZXNzYWdlLm1hdGNoKC9hdCBwb3NpdGlvbiAoXFxkKykvKSlcbiAgICAgICAgcmV0dXJuIE1hdGgubWluKCttWzFdLCBkb2MubGVuZ3RoKTtcbiAgICBpZiAobSA9IGVycm9yLm1lc3NhZ2UubWF0Y2goL2F0IGxpbmUgKFxcZCspIGNvbHVtbiAoXFxkKykvKSlcbiAgICAgICAgcmV0dXJuIE1hdGgubWluKGRvYy5saW5lKCttWzFdKS5mcm9tICsgKCttWzJdKSAtIDEsIGRvYy5sZW5ndGgpO1xuICAgIHJldHVybiAwO1xufVxuXG4vKipcbkEgbGFuZ3VhZ2UgcHJvdmlkZXIgdGhhdCBwcm92aWRlcyBKU09OIHBhcnNpbmcuXG4qL1xuY29uc3QganNvbkxhbmd1YWdlID0gLypAX19QVVJFX18qL0xSTGFuZ3VhZ2UuZGVmaW5lKHtcbiAgICBwYXJzZXI6IC8qQF9fUFVSRV9fKi9wYXJzZXIuY29uZmlndXJlKHtcbiAgICAgICAgcHJvcHM6IFtcbiAgICAgICAgICAgIC8qQF9fUFVSRV9fKi9pbmRlbnROb2RlUHJvcC5hZGQoe1xuICAgICAgICAgICAgICAgIE9iamVjdDogLypAX19QVVJFX18qL2NvbnRpbnVlZEluZGVudCh7IGV4Y2VwdDogL15cXHMqXFx9LyB9KSxcbiAgICAgICAgICAgICAgICBBcnJheTogLypAX19QVVJFX18qL2NvbnRpbnVlZEluZGVudCh7IGV4Y2VwdDogL15cXHMqXFxdLyB9KVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAvKkBfX1BVUkVfXyovZm9sZE5vZGVQcm9wLmFkZCh7XG4gICAgICAgICAgICAgICAgXCJPYmplY3QgQXJyYXlcIjogZm9sZEluc2lkZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgXVxuICAgIH0pLFxuICAgIGxhbmd1YWdlRGF0YToge1xuICAgICAgICBjbG9zZUJyYWNrZXRzOiB7IGJyYWNrZXRzOiBbXCJbXCIsIFwie1wiLCAnXCInXSB9LFxuICAgICAgICBpbmRlbnRPbklucHV0OiAvXlxccypbXFx9XFxdXSQvXG4gICAgfVxufSk7XG4vKipcbkpTT04gbGFuZ3VhZ2Ugc3VwcG9ydC5cbiovXG5mdW5jdGlvbiBqc29uKCkge1xuICAgIHJldHVybiBuZXcgTGFuZ3VhZ2VTdXBwb3J0KGpzb25MYW5ndWFnZSk7XG59XG5cbmV4cG9ydCB7IGpzb24sIGpzb25MYW5ndWFnZSwganNvblBhcnNlTGludGVyIH07XG4iLCJpbXBvcnQgeyBMUlBhcnNlciB9IGZyb20gJ0BsZXplci9scic7XG5pbXBvcnQgeyBzdHlsZVRhZ3MsIHRhZ3MgfSBmcm9tICdAbGV6ZXIvaGlnaGxpZ2h0JztcblxuY29uc3QganNvbkhpZ2hsaWdodGluZyA9IHN0eWxlVGFncyh7XG4gIFN0cmluZzogdGFncy5zdHJpbmcsXG4gIE51bWJlcjogdGFncy5udW1iZXIsXG4gIFwiVHJ1ZSBGYWxzZVwiOiB0YWdzLmJvb2wsXG4gIFByb3BlcnR5TmFtZTogdGFncy5wcm9wZXJ0eU5hbWUsXG4gIE51bGw6IHRhZ3MubnVsbCxcbiAgXCIsXCI6IHRhZ3Muc2VwYXJhdG9yLFxuICBcIlsgXVwiOiB0YWdzLnNxdWFyZUJyYWNrZXQsXG4gIFwieyB9XCI6IHRhZ3MuYnJhY2Vcbn0pO1xuXG4vLyBUaGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSBsZXplci1nZW5lcmF0b3IuIFlvdSBwcm9iYWJseSBzaG91bGRuJ3QgZWRpdCBpdC5cbmNvbnN0IHBhcnNlciA9IExSUGFyc2VyLmRlc2VyaWFsaXplKHtcbiAgdmVyc2lvbjogMTQsXG4gIHN0YXRlczogXCIkYk9WUVBPT09PUU8nI0NiJyNDYk9uUVBPJyNDZU92UVBPJyNDak9PUU8nI0NwJyNDcFFPUVBPT09PUU8nI0NnJyNDZ099UVBPJyNDZk8hU1FQTycjQ3JPT1FPLDU5UCw1OVBPIVtRUE8sNTlQTyFhUVBPJyNDdU9PUU8sNTlVLDU5VU8haVFQTyw1OVVPVlFQTyw1OVFPcVFQTycjQ2tPIW5RUE8sNTleT09RTzFHLmsxRy5rT1ZRUE8nI0NsTyF2UVBPLDU5YU9PUU8xRy5wMUcucE9PUU8xRy5sMUcubE9PUU8sNTlWLDU5Vk9PUU8tRTZpLUU2aU9PUU8sNTlXLDU5V09PUU8tRTZqLUU2alwiLFxuICBzdGF0ZURhdGE6IFwiI09+T2NPU35PUVNPUlNPU1NPVFNPV1FPXVJPZVBPfk9WWE9lVU9+T1tbT35QVk9nXk9+T2hfT1ZmWH5PVmFPfk9oYk9baVh+T1tkT35PaF9PVmZhfk9oYk9baWF+T1wiLFxuICBnb3RvOiBcIiFralBQUFBQUGtQUGtxd1BQa3shUlBQUCFYUCFlUFAhaFhTT1JeYlFXUVJmX1RWUV9RYFdSZ2BRY1pSaWNRVE9RWlJRZV5SaGJSWVFSXVJcIixcbiAgbm9kZU5hbWVzOiBcIuKaoCBKc29uVGV4dCBUcnVlIEZhbHNlIE51bGwgTnVtYmVyIFN0cmluZyB9IHsgT2JqZWN0IFByb3BlcnR5IFByb3BlcnR5TmFtZSBdIFsgQXJyYXlcIixcbiAgbWF4VGVybTogMjUsXG4gIG5vZGVQcm9wczogW1xuICAgIFtcIm9wZW5lZEJ5XCIsIDcsXCJ7XCIsMTIsXCJbXCJdLFxuICAgIFtcImNsb3NlZEJ5XCIsIDgsXCJ9XCIsMTMsXCJdXCJdXG4gIF0sXG4gIHByb3BTb3VyY2VzOiBbanNvbkhpZ2hsaWdodGluZ10sXG4gIHNraXBwZWROb2RlczogWzBdLFxuICByZXBlYXROb2RlQ291bnQ6IDIsXG4gIHRva2VuRGF0YTogXCIocH5SYVhZIVdZWiFXXV4hV3BxIVdycyFdfH0kaX0hTyRuIVEhUiR3IVIhWyZWIVshXSZoIX0jTyZtI1AjUSZyI1kjWiZ3I2IjYydmI2gjaSd9I28jcChmI3EjcihrfiFdT2N+fiFgVXBxIV1xciFdcnMhcnMjTyFdI08jUCF3I1B+IV1+IXdPZX5+IXpYcnMhXSFQIVEhXSNPI1AhXSNVI1YhXSNZI1ohXSNiI2MhXSNmI2chXSNoI2khXSNpI2ojZ34jalIhUSFbI3MhYyFpI3MjVCNaI3N+I3ZSIVEhWyRQIWMhaSRQI1QjWiRQfiRTUiFRIVskXSFjIWkkXSNUI1okXX4kYFIhUSFbIV0hYyFpIV0jVCNaIV1+JG5PaH5+JHFRIVEhUiR3IVIhWyZWfiR8UlR+IU8hUCVWIWchaCVrI1gjWSVrfiVZUCFRIVslXX4lYlJUfiFRIVslXSFnIWglayNYI1kla34lblJ7fCV3fSFPJXchUSFbJX1+JXpQIVEhWyV9fiZTUFR+IVEhWyV9fiZbU1R+IU8hUCVWIVEhWyZWIWchaCVrI1gjWSVrfiZtT2d+fiZyT11+fiZ3T1t+fiZ6UCNUI1UmfX4nUVAjYCNhJ1R+J1dQI2cjaCdafideUCNYI1knYX4nZk9Sfn4naVAjaSNqJ2x+J29QI2AjYSdyfid1UCNgI2EneH4nfU9Tfn4oUVAjZiNnKFR+KFdQI2kjaihafiheUCNYI1koYX4oZk9Rfn4oa09Xfn4ocE9WflwiLFxuICB0b2tlbml6ZXJzOiBbMF0sXG4gIHRvcFJ1bGVzOiB7XCJKc29uVGV4dFwiOlswLDFdfSxcbiAgdG9rZW5QcmVjOiAwXG59KTtcblxuZXhwb3J0IHsgcGFyc2VyIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=