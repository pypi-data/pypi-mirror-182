"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_http_js"],{

/***/ "../../node_modules/@codemirror/legacy-modes/mode/http.js":
/*!****************************************************************!*\
  !*** ../../node_modules/@codemirror/legacy-modes/mode/http.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "http": () => (/* binding */ http)
/* harmony export */ });
function failFirstLine(stream, state) {
  stream.skipToEnd();
  state.cur = header;
  return "error";
}

function start(stream, state) {
  if (stream.match(/^HTTP\/\d\.\d/)) {
    state.cur = responseStatusCode;
    return "keyword";
  } else if (stream.match(/^[A-Z]+/) && /[ \t]/.test(stream.peek())) {
    state.cur = requestPath;
    return "keyword";
  } else {
    return failFirstLine(stream, state);
  }
}

function responseStatusCode(stream, state) {
  var code = stream.match(/^\d+/);
  if (!code) return failFirstLine(stream, state);

  state.cur = responseStatusText;
  var status = Number(code[0]);
  if (status >= 100 && status < 400) {
    return "atom";
  } else {
    return "error";
  }
}

function responseStatusText(stream, state) {
  stream.skipToEnd();
  state.cur = header;
  return null;
}

function requestPath(stream, state) {
  stream.eatWhile(/\S/);
  state.cur = requestProtocol;
  return "string.special";
}

function requestProtocol(stream, state) {
  if (stream.match(/^HTTP\/\d\.\d$/)) {
    state.cur = header;
    return "keyword";
  } else {
    return failFirstLine(stream, state);
  }
}

function header(stream) {
  if (stream.sol() && !stream.eat(/[ \t]/)) {
    if (stream.match(/^.*?:/)) {
      return "atom";
    } else {
      stream.skipToEnd();
      return "error";
    }
  } else {
    stream.skipToEnd();
    return "string";
  }
}

function body(stream) {
  stream.skipToEnd();
  return null;
}

const http = {
  token: function(stream, state) {
    var cur = state.cur;
    if (cur != header && cur != body && stream.eatSpace()) return null;
    return cur(stream, state);
  },

  blankLine: function(state) {
    state.cur = body;
  },

  startState: function() {
    return {cur: start};
  }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfaHR0cF9qcy5jODAzOTQxMzg3MTA4MzU0YTI4MS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsWUFBWTtBQUNaO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vLi4vbm9kZV9tb2R1bGVzL0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL2h0dHAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZmFpbEZpcnN0TGluZShzdHJlYW0sIHN0YXRlKSB7XG4gIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgc3RhdGUuY3VyID0gaGVhZGVyO1xuICByZXR1cm4gXCJlcnJvclwiO1xufVxuXG5mdW5jdGlvbiBzdGFydChzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdHJlYW0ubWF0Y2goL15IVFRQXFwvXFxkXFwuXFxkLykpIHtcbiAgICBzdGF0ZS5jdXIgPSByZXNwb25zZVN0YXR1c0NvZGU7XG4gICAgcmV0dXJuIFwia2V5d29yZFwiO1xuICB9IGVsc2UgaWYgKHN0cmVhbS5tYXRjaCgvXltBLVpdKy8pICYmIC9bIFxcdF0vLnRlc3Qoc3RyZWFtLnBlZWsoKSkpIHtcbiAgICBzdGF0ZS5jdXIgPSByZXF1ZXN0UGF0aDtcbiAgICByZXR1cm4gXCJrZXl3b3JkXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhaWxGaXJzdExpbmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzcG9uc2VTdGF0dXNDb2RlKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGNvZGUgPSBzdHJlYW0ubWF0Y2goL15cXGQrLyk7XG4gIGlmICghY29kZSkgcmV0dXJuIGZhaWxGaXJzdExpbmUoc3RyZWFtLCBzdGF0ZSk7XG5cbiAgc3RhdGUuY3VyID0gcmVzcG9uc2VTdGF0dXNUZXh0O1xuICB2YXIgc3RhdHVzID0gTnVtYmVyKGNvZGVbMF0pO1xuICBpZiAoc3RhdHVzID49IDEwMCAmJiBzdGF0dXMgPCA0MDApIHtcbiAgICByZXR1cm4gXCJhdG9tXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiZXJyb3JcIjtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNwb25zZVN0YXR1c1RleHQoc3RyZWFtLCBzdGF0ZSkge1xuICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gIHN0YXRlLmN1ciA9IGhlYWRlcjtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHJlcXVlc3RQYXRoKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RyZWFtLmVhdFdoaWxlKC9cXFMvKTtcbiAgc3RhdGUuY3VyID0gcmVxdWVzdFByb3RvY29sO1xuICByZXR1cm4gXCJzdHJpbmcuc3BlY2lhbFwiO1xufVxuXG5mdW5jdGlvbiByZXF1ZXN0UHJvdG9jb2woc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RyZWFtLm1hdGNoKC9eSFRUUFxcL1xcZFxcLlxcZCQvKSkge1xuICAgIHN0YXRlLmN1ciA9IGhlYWRlcjtcbiAgICByZXR1cm4gXCJrZXl3b3JkXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhaWxGaXJzdExpbmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGVhZGVyKHN0cmVhbSkge1xuICBpZiAoc3RyZWFtLnNvbCgpICYmICFzdHJlYW0uZWF0KC9bIFxcdF0vKSkge1xuICAgIGlmIChzdHJlYW0ubWF0Y2goL14uKj86LykpIHtcbiAgICAgIHJldHVybiBcImF0b21cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICAgICAgcmV0dXJuIFwiZXJyb3JcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICAgIHJldHVybiBcInN0cmluZ1wiO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJvZHkoc3RyZWFtKSB7XG4gIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBjb25zdCBodHRwID0ge1xuICB0b2tlbjogZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgIHZhciBjdXIgPSBzdGF0ZS5jdXI7XG4gICAgaWYgKGN1ciAhPSBoZWFkZXIgJiYgY3VyICE9IGJvZHkgJiYgc3RyZWFtLmVhdFNwYWNlKCkpIHJldHVybiBudWxsO1xuICAgIHJldHVybiBjdXIoc3RyZWFtLCBzdGF0ZSk7XG4gIH0sXG5cbiAgYmxhbmtMaW5lOiBmdW5jdGlvbihzdGF0ZSkge1xuICAgIHN0YXRlLmN1ciA9IGJvZHk7XG4gIH0sXG5cbiAgc3RhcnRTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtjdXI6IHN0YXJ0fTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==