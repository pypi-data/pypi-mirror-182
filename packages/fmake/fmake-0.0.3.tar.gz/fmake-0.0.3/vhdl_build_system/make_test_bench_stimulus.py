import pandas as pd
import numpy as np
import uproot
import argparse

from vhdl_build_system.vhdl_programm_list import add_programm
import vhdl_build_system.vhdl_load_file_without_comments as ld
from vhdl_build_system.vhdl_dependency_db import  get_dependency_db

from  vhdl_build_system.generic_helper               import save_file, try_make_dir, cl_add_entity, join_str
from  vhdl_build_system.vhdl_programm_list           import add_programm 
from  vhdl_build_system.generic_helper               import  vprint, extract_cl_arguments



def append_dataframe(df, df_append, event_axis =None):
    df_append = df_append[[x for x in df_append.columns if x in df.columns]]
    if event_axis is not None and event_axis in df_append.columns:
        df1 = pd.DataFrame({  df.columns[0] : np.zeros(100) })
        for x in df_append[event_axis].unique():
            df = pd.concat( [df, df_append[df_append[event_axis] == x ]] )
            df = pd.concat( [df, df1] ) 
    else:
        df = pd.concat( [df, df_append] )
        
    df.fillna(0,inplace=True)
    return df


def make_input_table(FileName):
    src = ld.load_file_witout_comments(FileName )
    columns = [x.split("data.")[1].replace(")","").strip() for x in src.split(";") if "csv_from_integer" in x] 
    return  pd.DataFrame(columns= columns)


def read_file(fileName, branch):
    if fileName[-3:].lower() == "csv":
        return pd.read_csv(fileName)
    
    if fileName[-4:].lower() == "root":
        up  = uproot.open(fileName)
        return up[branch].pandas.df()
    

def make_input_file(entity, file_list ,branch , event_axis ):
    entity  = "subdetector_top_wrap_tb_csv"
    fileList = get_dependency_db().get_dependencies(entity)
    print(fileList[0])
    df = make_input_table(fileList[0])
    df = df.rename(columns=lambda x: x.strip())

    for x in file_list:
        df1 = read_file(x,branch)
        df1 = df1.rename(columns=lambda x: x.strip())
        df = append_dataframe(df , df1, event_axis = event_axis)


    df = df.astype(int)
    df.to_csv( "build/" + entity +"/"+ entity +".csv" , sep = " " ,  index=False)




def make_input_file_wrap(x):
    parser = argparse.ArgumentParser(description='Creates stimulus file from csv files and root files')
    
    cl_add_entity(parser)
    parser.add_argument('--filelist', help='Path to where the test bench should be created',default="" ,required=True)
    parser.add_argument('--branch', help='Number of Rows in the Autogenerated CSV Files',default="KLMDigits")
    parser.add_argument('--event_axis', help='Number of Rows in the Autogenerated CSV Files',default="inklmdigits.event_nr")
    
    args = extract_cl_arguments(parser= parser,x=x)
    
    make_input_file(    entity  = args.entity , file_list = args.filelist.split(",") , branch = args.branch, event_axis=args.event_axis)

add_programm("make-stimulus",make_input_file_wrap )