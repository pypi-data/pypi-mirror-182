# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_deck.ipynb.

# %% auto 0
__all__ = ['Deck', 'draw_n']

# %% ../nbs/01_deck.ipynb 3
from .card import *
from fastcore.utils import *
import random

# %% ../nbs/01_deck.ipynb 4
class Deck: 
    "A deck of cards, not including jokers"
    def __init__(self):
        self.cards = [Card(s, r) for s in range(4) for r in range(1,14)]
    def __str__(self):
        return '; '.join(map(str, self.cards))
    def __len__(self):
        return len(self.cards)
    def __contains__(self, card):
        return card in self.cards
    __repr__ = __str__
    def shuffle(self):
        "Shuffles the cards in this dekc"
        random.shuffle(self.cards)

# %% ../nbs/01_deck.ipynb 14
@patch
def pop(self:Deck,
        idx:int=-1): # The index of the card to remove, defaulting to the last one
    "Remove one card from the deck"
    return self.cards.pop(idx)

# %% ../nbs/01_deck.ipynb 16
@patch
def remove(self:Deck,
           card:Card):
    "Removes`Card` from the deck or raises exception if it is not there"
    self.cards.remove(card)

# %% ../nbs/01_deck.ipynb 18
def draw_n(n:int, # number of cards to draw
           replace:bool=True): # Whether or not draw with replacement
    "Drawn `n` cards, with replacement if `replace`"
    import random
    d = Deck()
    d.shuffle()
    if replace:
        return [d.cards[random.choice(range(len(d.cards)))] for _ in range(n)]
    else:
        return d.cards[:n]
