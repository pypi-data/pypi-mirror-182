Metadata-Version: 2.1
Name: node.ext.yaml
Version: 0.3
Summary: Node tree implementation for yaml files
Home-page: https://github.com/conestack/node.ext.yaml
Author: Node Contributors
Author-email: dev@conestack.org
License: Simplified BSD
Keywords: node yaml
Platform: UNKNOWN
Classifier: License :: OSI Approved :: BSD License
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Requires-Dist: node.ext.fs
Requires-Dist: node (>=1.0)
Requires-Dist: pyyaml
Requires-Dist: setuptools
Provides-Extra: test
Requires-Dist: coverage ; extra == 'test'
Requires-Dist: zope.testrunner ; extra == 'test'

.. image:: https://img.shields.io/pypi/v/node.ext.yaml.svg
    :target: https://pypi.python.org/pypi/node.ext.yaml
    :alt: Latest PyPI version

.. image:: https://img.shields.io/pypi/dm/node.ext.yaml.svg
    :target: https://pypi.python.org/pypi/node.ext.yaml
    :alt: Number of PyPI downloads

``node.ext.yaml`` provides a node implementation to yaml files.

For more information on nodes see `node <http://pypi.python.org/pypi/node>`_
package.

For more information on plumbing see
`plumber <http://pypi.python.org/pypi/plumber>`_ package.


Usage
-----

Create a yaml file:

.. code-block:: python

    from node.ext.yaml import YamlFile

    class MyYamlFile(YamlFile):

        @property
        def fs_path(self):
            return '/path/to/file.yaml'

    file = MyYamlFile()
    file['child'] = 'Value'

    # write file to disk
    file()

Define factories for child nodes:

.. code-block:: python

    from node.ext.yaml import YamlNode

    class SpecificChild(YamlNode):
        pass

    class DefaultChild(YamlNode):
        pass

    class MyYamlFile(YamlFile):
        factories = {
            'child': SpecificChild,
            '*': DefaultChild
        }

Define a schema for node members:

.. code-block:: python

    from node import schema
    from node.behaviors import SchemaAsAttributes
    from plumber import plumbing

    @plumbing(SchemaAsAttributes)
    class MyYamlFile(YamlFile):
        schema = {
            'int_member': schema.Int(),
            'str_member': schema.Str()
        }

    file = MyYamlFile()
    file.attr['int_member'] = 1
    file.attr['str_member'] = u'String'

Schema members can be defined directly on class.

**Note**: Be careful not to override existing API members.

.. code-block:: python

    from node.behaviors import SchemaProperties

    @plumbing(SchemaProperties)
    class MyYamlFile(YamlFile):
        int_member = schema.Int()
        str_member = schema.Str()

    file = MyYamlFile()
    file.int_member = 1
    file.str_member = u'String'


Python Versions
===============

- Python 2.7, 3.3+


Contributors
============

- Robert Niederreiter


Changes
=======

0.3 (2022-12-21)
----------------

- ``node.ext.yaml.behaviors.YamlSequenceStorage`` implements now
  ``__contains__``, which compares the storage values directly. This is needed
  to make containment checks work because yaml child nodes are not cached on
  ``__getitem__``.
  [rnix]

- ``node.ext.yaml.behaviors.YamlMember`` provides now
  ``default_mapping_factory`` and ``default_sequence_factory`` settings.
  [rnix]

- ``node.ext.yaml.behaviors.YamlMember`` inherits from
  ``node.behaviors.WildcardFactory`` now.
  [rnix]

- Use ``node.behaviors.SequenceAdopt`` and ``node.behaviors.SequenceOrder``
  behaviors on ``node.ext.yaml.YamlSequence``.
  [rnix]

- Use ``node.behaviors.MappingOrder`` behavior in favor of
  ``node.behaviors.Order`` as introduced in
  ``node`` 1.2 on ``node.ext.yaml.YamlMapping`` and ``node.ext.yaml.YamlFile``.
  [rnix]


0.2 (2022-10-06)
----------------

- Inherit ``YamlRootStorage`` from ``node.ext.fs.FSLocation``, which provides
  ``fs_path`` property. Note that ``fs_path`` is handled as list now.
  [rnix]

- Inherit ``IYamlRoot`` from  ``node.ext.fs.interfaces.IFile``.
  [rnix]

- Package depends on ``node.ext.fs`` now.
  [rnix]

- Replace deprecated use of ``Adopt`` by ``MappingAdopt``.
  [rnix]

- ``node.ext.yaml.YamlNode`` and ``node.ext.yaml.YamlFile`` not provides a
  default child factory any more.
  [rnix]


0.1 (2021-11-22)
----------------

- Initial work
  [rnix]


License
=======

Copyright (c) 2021-2022, Node Contributors
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice, this
  list of conditions and the following disclaimer in the documentation and/or
  other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

