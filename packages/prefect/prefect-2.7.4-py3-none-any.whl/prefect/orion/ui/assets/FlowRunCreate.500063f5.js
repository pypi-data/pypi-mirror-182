import{d as k,f as b,I as v,s as D,c as p,h as t,a as F,w as d,k as x,b as B,e as I,o as S,g as i,ao as T,ap as V,aq as N,ar as q,D as y,ak as f}from"./index.0bc657b0.js";import{u as L}from"./usePageTitle.5e5763d0.js";const j=k({__name:"FlowRunCreate",setup(M){const c=b(),a=v("deploymentId"),n=B(),w=D(c.deployments.getDeployment,[a]),e=p(()=>w.response),_=async s=>{var r,o,u;try{const l=await c.deployments.createDeploymentFlowRun(a.value,s),m=(u=(o=(r=s.state)==null?void 0:r.stateDetails)==null?void 0:o.scheduledTime)!=null?u:void 0,g=!m,C=N(q,{flowRun:l,flowRunRoute:y.flowRun,router:n,immediate:g,startTime:m});f(C,"success"),n.push(y.deployment(a.value))}catch(l){f("Something went wrong trying to create a flow run","error"),console.error(l)}},h=()=>{n.back()},R=p(()=>e.value?`Create Flow Run for Deployment: ${e.value.name}`:"Create Flow Run for Deployment");return L(R),(s,r)=>{const o=I("p-layout-default");return t(e)?(S(),F(o,{key:0},{header:d(()=>[i(t(T),{deployment:t(e)},null,8,["deployment"])]),default:d(()=>[i(t(V),{deployment:t(e),onSubmit:_,onCancel:h},null,8,["deployment"])]),_:1})):x("",!0)}}});export{j as default};
