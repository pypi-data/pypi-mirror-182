[tool.poetry]
name = "nautobot-welcome-wizard"
version = "v1.1.3"
description = "Nautobot's Welcome Wizard"
authors = ["Network to Code, LLC <info@networktocode.com>"]

license = "Apache-2.0"

readme = "README.md"
homepage = "https://github.com/nautobot/nautobot-plugin-welcome-wizard"
repository = "https://github.com/nautobot/nautobot-plugin-welcome-wizard"
keywords = ["nautobot", "nautobot-plugin"]
include = [

    "LICENSE",

    "README.md",
]
packages = [
    { include = "welcome_wizard" },
]

[tool.poetry.dependencies]
python = "^3.7"
nautobot = "^1.2.0"

[tool.poetry.dev-dependencies]
invoke = "~1.6.0"
black = "~22.3.0"
yamllint = "~1.28.0"
bandit = "~1.7.4"
pylint = "~2.13.9"
pylint-django = "~2.5.3"
pydocstyle = "~6.1.1"
flake8 = "~3.9.1"
django-debug-toolbar = "~3.2.4"
coverage = "~6.3.2"
mkdocs = "~1.3.0"
coverage-badge = "^1.0.1"

[tool.black]
line-length = 120
target-version = ['py37']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | settings.py     # This is where you define files that should not be stylized by black
                     # the root of the project
)
'''

[tool.pylint.master]
# Include the pylint_django plugin to avoid spurious warnings about Django patterns
load-plugins="pylint_django"

[tool.pylint.basic]
# No docstrings required for private methods (Pylint default), or for test_ functions, or for inner Meta classes.
no-docstring-rgx="^(_|test_|Meta$)"

[tool.pylint.messages_control]
# Line length is enforced by Black, so pylint doesn't need to check it.
# Pylint and Black disagree about how to format multi-line arrays; Black wins.
disable = """,
    line-too-long,
    bad-continuation,
    """

[tool.pylint.miscellaneous]
# Don't flag TODO as a failure, let us commit with things that still need to be done in the code
notes = """,
    FIXME,
    XXX,
    """

[tool.pytest.ini_options]
python_paths = "./"
testpaths = "tests/"
adopts = "-vv"
[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
