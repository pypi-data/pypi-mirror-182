[tool]
[tool.poetry]
name = "dsdlsdk"
version = "0.1.0.post203"
homepage = "https://github.com/opendatalab/dsdl-sdk/tree/dev"
description = "made for opendatalab dsdl-sdk dev branch(ignore other branches)."
authors = ["dsdl-team <dsdl-team@pjlab.org.cn>", "suizhihao <suizhihao@pjlab.org.cn>"]
readme = "README.md"
license = "Apache-2.0"
keywords = ['odl-cli', 'opendatalab', 'pjlab']
classifiers = [
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: Apache Software License',
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
]
packages = [{ include = "dsdlsdk" }, { include = "cli"  }, { include = "dsdl" }, ]
[tool.poetry.scripts]
odl-cli = 'cli.cli:main'
dsdl = 'dsdl.cli:cli'



[tool.poetry.dependencies]
python = ">=3.8,<4.0, !=3.9.7"
pyyaml = { version = "^6.0" }
click = { version = "^8.1.3" }
networkx = { version = "^2.8.4" }
Pillow = { version = "^9.1.0" }
oss2 = { version = "^2.15.0" }
prettytable = { version = "^3.3.0" }
opencv-python = { version = "^4.6.0.66" }
loguru = "^0.6.0"
tabulate = "^0.9.0"

jsonmodels = "^2.6.0"
rich = "^12.6.0"
jinja2 = "^3.0.0"
toml = { version = "^0.10.2" }
tqdm = "^4.64.1"
duckdb = "^0.6.0"
pyarrow = "^10.0.0"
boto3 = "^1.26.14"
smart-open = {extras = ["all"], version = "^6.2.0"}
pandas = "^1.5.1"
psutil = "^5.9.4"
streamlit = "^1.15.1"
termgraph = "^0.5.3"
stqdm = "^0.0.4"
setuptools-scm = "^7.0.5"
python-dotenv = "^0.21.0"
pexpect = "^4.8.0"
human-readable = "^1.3.0"
dsdl = "^0.1.10.3"
matplotlib = "^3.6.2"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = { version = "^6.2.4" }
pylint = ">=2.15.5"
environs = ">=9.5.0"
tunas2dsdl = "^0.1.15.8"
tunas2dsdl-c = "^1.0.4"

[tool.poetry.group.mkdocs]
optional = true

[tool.poetry.group.mkdocs.dependencies]
markupsafe = { version = "2.0.1" }
mkdocs = { version = "^1.1.2" }
mkdocs-include-markdown-plugin = { version = "^1.0.0" }
mkdocs-material = { version = "^6.1.7" }
mkdocstrings = { version = "^0.15.2" }
mkdocs-material-extensions = { version = "^1.0.1" }
mkdocs-autorefs = { version = "^0.2.1" }
twine = { version = "^3.3.0" }
bump2version = { version = "^1.0.1" }



[tool.setuptools_scm]
# write_to = "cli/commands/__version__.py"

## semantic_release [start]
# [tool.semantic_release]
# version_variable = [
#     "cli/commands/__version__.py:__version__",
#     "cli/commands/__init__.py:__version__"
# ]
# version_toml = [
#     "pyproject.toml:tool.poetry.version"
# ]
# version_pattern = [
#     "README.md:rev: v{version}",
#     "docs/CONTRIBUTING.md:tryceratops, version {version}"
# ]
# major_on_zero = false
# branch = "dev-cli"
# upload_to_PyPI = true
# upload_to_release = true
# build_command = "pip install poetry && poetry build"
## semantic_release [end]


## poetry-dynamic-versioning [start]
# [tool.poetry-dynamic-versioning]
# enable = true
# vcs = "git"
# format-jinja =  """
# {%- if distance == 0 -%}
# {{ serialize_pep440(base, stage, revision) }}
# {%- elif revision is not none -%}
# {{ serialize_pep440(base, stage, revision + 1, dev=distance, metadata=[commit]) }}
# {%- else -%}
# {{ serialize_pep440(bump_version(base), stage, revision, dev=distance, metadata=[commit]) }}
# {%- endif -%}
# """

# [tool.poetry-dynamic-versioning.substitution]
# files = ["cli/commands/__init__.py", "cli/commands/__version__.py", "cli/commands/_version.py"]
# # pattern  = "^(?P<base>\\d+\\.\\d+\\.\\d+)(-?((?P<stage>[a-zA-Z]+)\\.?(?P<revision>\\d+)?))?"

# [build-system]
# requires = ["poetry>=1.1.0", "poetry-dynamic-versioning"]
# build-backend = "poetry.masonry.api"

# fix mypy yaml error
[[tool.mypy.overrides]]
module = "yaml"
ignore_missing_imports = true
