# Generated by Lapidary.
# All manual changes will be lost!

from __future__ import annotations

import typing
import lapidary.runtime
import pydantic
import datetime
import enum
import lapidary.runtime.absent
import uhubspot.components.schemas.association
import uhubspot.components.schemas.object_id_ref


class BatchGetAssociations20XResponseStatus(enum.Enum):
    COMPLETE = "COMPLETE"


class BatchGetAssociations20XResponseResultsItem(pydantic.BaseModel):
    from_: typing.Annotated[
        uhubspot.components.schemas.object_id_ref.objectIdRef,
        pydantic.Field(
            alias="from",
        ),
    ]

    to: typing.Annotated[
        list[
            uhubspot.components.schemas.association.association,
        ],
        pydantic.Field(),
    ]

    class Config(pydantic.BaseConfig):
        use_enum_values = True
        allow_population_by_field_name = True
        extra = pydantic.Extra.forbid


class BatchGetAssociations20XResponseErrorsItem(pydantic.BaseModel):
    class Config(pydantic.BaseConfig):
        use_enum_values = True
        extra = pydantic.Extra.allow


class BatchGetAssociations20XResponse(pydantic.BaseModel):
    status: typing.Annotated[BatchGetAssociations20XResponseStatus, pydantic.Field()]

    results: typing.Annotated[
        list[
            BatchGetAssociations20XResponseResultsItem,
        ],
        pydantic.Field(),
    ]

    startedAt: typing.Annotated[datetime.datetime, pydantic.Field()]

    completedAt: typing.Annotated[datetime.datetime, pydantic.Field()]

    numErrors: typing.Annotated[
        typing.Union[
            int,
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(
            ge=1.0,
        ),
    ] = lapidary.runtime.absent.ABSENT

    errors: typing.Annotated[
        typing.Union[
            list[
                BatchGetAssociations20XResponseErrorsItem,
            ],
            lapidary.runtime.absent.Absent,
        ],
        pydantic.Field(
            min_items=1,
        ),
    ] = lapidary.runtime.absent.ABSENT

    class Config(pydantic.BaseConfig):
        use_enum_values = True
        extra = pydantic.Extra.forbid


BatchGetAssociations20XResponseResultsItem.update_forward_refs()
BatchGetAssociations20XResponseErrorsItem.update_forward_refs()
BatchGetAssociations20XResponse.update_forward_refs()
