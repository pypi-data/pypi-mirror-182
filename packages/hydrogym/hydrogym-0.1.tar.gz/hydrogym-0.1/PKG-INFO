Metadata-Version: 2.1
Name: hydrogym
Version: 0.1
Summary: A Reinforcement Learning Benchmarking Environment for Fluid Dynamics
Home-page: https://github.com/dynamicslab/hydrogym
License: LICENSE
Keywords: Reinforcement Learning,Scientific Machine Learning,Benchmarking,Computational Fluid Dynamics
Author: Jared Callaham
Author-email: jared.callaham@gmail.com
Requires-Python: >=3.8,<4.0
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: License :: Other/Proprietary License
Classifier: Operating System :: MacOS
Classifier: Operating System :: Unix
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Atmospheric Science
Classifier: Topic :: Scientific/Engineering :: Hydrology
Classifier: Topic :: Scientific/Engineering :: Physics
Requires-Dist: control (>=0.9.2,<0.10.0)
Requires-Dist: dmsuite (>=0.1.1,<0.2.0)
Requires-Dist: evotorch (>=0.3.0,<0.4.0)
Requires-Dist: gmsh (>=4.11.1,<5.0.0)
Requires-Dist: gym (>=0.26.2,<0.27.0)
Requires-Dist: modred (>=2.1.0,<3.0.0)
Requires-Dist: torch (==1.13)
Project-URL: Documentation, https://hydrogym.readthedocs.io/
Project-URL: Repository, https://github.com/dynamicslab/hydrogym
Project-URL: issues, https://github.com/dynamicslab/hydrogym/issues
Description-Content-Type: text/markdown

<p align="center">
	<a rel="nofollow">	
		<img src="docs/source/_static/imgs/logo.svg" />
	</a>
</p>


HydroGym provides is an open-source library of challenge problems in data-driven modeling and control of fluid dynamics.

### Features
* __Hierarchical:__ Designed for analysis and controller design from a high-level black-box interface to low-level operator access
    - High-level: `hydrogym.env.FlowEnv` classes implement the OpenAI `gym.Env` interface
    - Intermediate: Typical CFD interface with `hydrogym.FlowConfig` and `hydrogym.TransientSolver` classes
    - Low-level: Access to linearized operators and sparse scipy or PETSc CSR matrices
* __Differentiable:__ Adjoint-enabled for PDE-constrained optimization via pyadjoint (extensible to PyTorch, Jax, etc... planned for future)
* __Modeling and anlysis tools:__ Global stability analysis (via SLEPc) and modal decompositions (via modred)
* __Scalable:__ Since linear algebra backend is PETSc, fully parallelized with MPI (including pyadjoint, SLEPc, modred)

# Quick Start

To begin using Hydrogym we need to first recursively clone the Hydrogym repository

```bash
git clone --recursive https://github.com/dynamicslab/hydrogym.git
```

After which we can build the package with its dependencies with

```bash
python old_setup.py build_ext
```

by default it will build with Firedrake as its simulation engine. With our wheel built, we then only need to install it

```bash
pip install .
```

with which we then have the latest version of Hydrogym, and all of its dependencies inside of the virtualenv, installed.

```bash
source $VENV/bin/activate
```

If you try to run something and get an error like "python: command not found" you probably missed this step.

Then you can get running in the interpreter as easy as:


```python
import hydrogym as gym
env = gym.env.CylEnv(Re=100) # Cylinder wake flow configuration
for i in range(num_steps):
	action = 0.0   # Put your control law here
    (lift, drag), reward, done, info = env.step(action)
```

Or to test that you can run things in parallel, try to run the steady-state Newton solver on the cylinder wake with 4 processors:

```bash
cd /home/hydrogym/examples/cylinder
mpiexec -np 4 python solve-steady.py
```

For more detail, check out:

* A quick tour of features in `notebooks/overview.ipynb`
* Example codes for various simulation, modeling, and control tasks in `examples`

# Flow configurations

There are currently a number of main flow configurations, the most prominent of which are:

- Periodic cyclinder wake at Re=100
- Chaotic pinball at Re=130
- Open cavity at Re=7500

with visualizations of the flow configurations available in the [docs](docs/FlowConfigurations.md). For the time being the cylinder wake is the most well-developed flow configuration, although the pinball should also be pretty reliable.  The cavity is in development (the boundary conditions are a little iffy and there's no actuation implemented yet) and the backwards-facing step is still planned.

