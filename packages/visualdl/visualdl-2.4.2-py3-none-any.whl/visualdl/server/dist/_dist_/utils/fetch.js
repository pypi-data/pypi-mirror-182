import*as l from"../../__snowpack__/env.js";import y from"../../__snowpack__/pkg/i18next.js";import E from"../../__snowpack__/pkg/query-string.js";const f=l.SNOWPACK_PUBLIC_API_TOKEN_KEY,g=l.SNOWPACK_PUBLIC_API_URL,h="X-VisualDL-Instance-ID",u=f?E.parse(window.location.search)[f]:"";export function getApiToken(){return u!=null?u:null}function m(n){const o=getApiToken();if(!f||!o)return n;const{headers:e,...p}=n||{},a=new Headers(e);return Array.isArray(o)?o.forEach(r=>a.append(h,r)):a.append(h,o),{...p,headers:a}}function A(){return new Promise(n=>{y.changeLanguage(void 0).then(o=>n(o))})}function c(n){return l.MODE==="development"&&console.error(n),A()}export async function fetcher(n,o){var a;let e;try{e=await fetch(g+n,m(o))}catch(r){const t=await c(r);throw new Error(t("errors:network-error"))}if(!e.ok){const r=await c(e);throw new Error(r([`errors:response-error.${e.status}`,"errors:response-error.unknown"]))}const p=(a=e.headers.get("content-type"))!=null?a:"";if(p.includes("application/json")){let r;try{r=await e.json()}catch(t){const i=await c(t);throw new Error(i("errors:parse-error"))}if(r&&"status"in r)if(r.status!==0){const t=await c(r);throw new Error(r.msg||t("errors:error"))}else return r.data;return r}else if(p.startsWith("text/")){let r;try{r=await e.text()}catch(t){const i=await c(t);throw new Error(i("errors:parse-error"))}return r}else{let r;try{r=await e.blob()}catch(s){const w=await c(s);throw new Error(w("errors:parse-error"))}const t=e.headers.get("Content-Disposition");r.arrayBuffer||(r.arrayBuffer=async()=>new Promise((s,w)=>{const _=new FileReader;_.addEventListener("load",d=>d.target?s(d.target.result):w()),_.readAsArrayBuffer(r)}));let i=null;if(t&&t.indexOf("attachment")!==-1){const s=/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/.exec(t);s!=null&&s[1]&&(i=s[1].replace(/['"]/g,""))}return{data:r,type:e.headers.get("Content-Type"),filename:i}}}export const cycleFetcher=async(n,o)=>await Promise.all(n.map(e=>fetcher(e,o)));
