# -*- coding: utf-8 -*-
"""
Created on Wed Apr  7 10:38:31 2021

@author: amarmore
"""
#@jit(nopython=True)
def accelerated_triadic_tonnetz_distance_symbol(chord_1, chord_2):
    circle_sharp =  ['C','Am','F','Dm','A#','Gm','D#','Cm','G#','Fm','C#','A#m','F#','D#m','B','G#m','E','C#m','A','F#m','D','Bm','G','Em']
    circle_flat = ['C','Am','F','Dm','Bb','Gm','Eb','Cm','Ab','Fm','Db','Bbm','Gb','Ebm','B','Abm','E','Dbm','A','Gbm','D','Bm','G','Em']
    tonnetz_distance_matrix = [[0, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 4, 3, 2, 3, 2, 3, 4, 3,
        2, 1],
       [1, 0, 1, 2, 3, 4, 3, 2, 3, 2, 3, 4, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4,
        3, 2],
       [2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 4, 3, 2, 3, 2, 3,
        4, 3],
       [3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 3, 2, 3, 4, 3, 4, 5, 4, 3, 2, 1, 2,
        3, 4],
       [4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 4, 3, 2, 3,
        2, 3],
       [3, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 3, 2, 3, 4, 3, 4, 5, 4, 3, 2,
        1, 2],
       [2, 3, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 4, 3,
        2, 3],
       [1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 3, 2, 3, 4, 3, 4, 5, 4,
        3, 2],
       [2, 3, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 4, 1, 4, 3, 4, 5, 4, 3,
        4, 3],
       [3, 2, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 3, 2, 3, 4, 3, 4,
        5, 4],
       [4, 3, 2, 3, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 4, 1, 4, 3, 4, 5,
        4, 3],
       [5, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 3, 2, 3, 4,
        3, 4],
       [4, 3, 4, 3, 2, 3, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 2, 3,
        4, 5],
       [3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 3, 2,
        3, 4],
       [4, 5, 4, 3, 4, 3, 2, 3, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1,
        2, 3],
       [3, 4, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2,
        3, 2],
       [2, 3, 4, 5, 4, 3, 4, 3, 2, 3, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3,
        2, 1],
       [3, 2, 3, 4, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3, 4,
        3, 2],
       [2, 1, 2, 3, 4, 5, 4, 3, 4, 3, 2, 3, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3,
        4, 3],
       [3, 2, 3, 2, 3, 4, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2,
        3, 4],
       [4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 4, 3, 2, 3, 2, 3, 4, 3, 2, 1, 0, 1,
        2, 3],
       [3, 4, 3, 2, 3, 2, 3, 4, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 0,
        1, 2],
       [2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 4, 3, 2, 3, 2, 3, 4, 3, 2, 1,
        0, 1],
       [1, 2, 3, 4, 3, 2, 3, 2, 3, 4, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 3, 2,
        1, 0]]
    if chord_1 in circle_sharp:
        idx_c_1 = circle_sharp.index(chord_1)
    else:
        idx_c_1 = circle_flat.index(chord_1)
        
    if chord_2 in circle_sharp:
        idx_c_2 = circle_sharp.index(chord_2)
    else:
        idx_c_2 = circle_flat.index(chord_2)
    
    return tonnetz_distance_matrix[idx_c_1][idx_c_2]

#@jit(nopython=True)
def accelerated_triadic_tonnetz_relation_symbol(chord_1, chord_2):
    circle_sharp =  ['C','Am','F','Dm','A#','Gm','D#','Cm','G#','Fm','C#','A#m','F#','D#m','B','G#m','E','C#m','A','F#m','D','Bm','G','Em']
    circle_flat = ['C','Am','F','Dm','Bb','Gm','Eb','Cm','Ab','Fm','Db','Bbm','Gb','Ebm','B','Abm','E','Dbm','A','Gbm','D','Bm','G','Em']
    relation_list = [0,'R','RL','RLR','LRPR','LRP','PR','P','PL','PLR','LPRP','LPRPR','PRPR','PRP','LPLR','LPL','LP','LPR','RP','RPR','LRLR','LRL','LR','L','LRPL','LPLP']
    tonnetz_relation_matrix = [[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
        16, 17, 18, 19, 20, 21, 22, 23],
       [ 1,  0, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,
         9,  8,  7,  6,  5,  4,  3,  2],
       [22, 23,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13,
        14, 15, 16, 17, 18, 19, 20, 21],
       [ 3,  2,  1,  0, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12,
        11, 10,  9,  8,  7,  6,  5,  4],
       [20, 21, 22, 23,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,
        12, 13, 14, 15, 16, 17, 18, 19],
       [ 5,  4,  3,  2,  1,  0, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14,
        13, 12, 11, 10,  9,  8,  7,  6],
       [18, 19, 20, 21, 22, 23,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,
        10, 11, 12, 13, 14, 15, 16, 17],
       [ 7,  6,  5,  4,  3,  2,  1,  0, 23, 22, 21, 20, 19, 18, 17, 16,
        15, 14, 13, 12, 11, 10,  9,  8],
       [16, 17,  6, 19, 20, 21, 22, 23,  0,  1,  2,  3,  4,  5, 24,  7,
        25,  9, 10, 11, 12, 13, 14, 15],
       [ 9,  8,  7,  6,  5,  4,  3,  2,  1,  0, 23, 22, 21, 20, 19, 18,
        17, 16, 15, 14, 13, 12, 11, 10],
       [14, 15, 16, 17,  6, 19, 20, 21, 22, 23,  0,  1,  2,  3,  4,  5,
        24,  7, 25,  9, 10, 11, 12, 13],
       [11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0, 23, 22, 21, 20,
        19, 18, 17, 16, 15, 14, 13, 12],
       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,  0,  1,  2,  3,
         4,  5,  6,  7,  8,  9, 10, 11],
       [13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0, 23, 22,
        21, 20, 19, 18, 17, 16, 15, 14],
       [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,  0,  1,
         2,  3,  4,  5,  6,  7,  8,  9],
       [15, 14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,
        23, 22, 21, 20, 19, 18, 17, 16],
       [ 8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
         0,  1,  2,  3,  4,  5,  6,  7],
       [17, 16, 15, 14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  2,
         1,  0, 23, 22, 21, 20, 19, 18],
       [ 6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
        22, 23,  0,  1,  2,  3,  4,  5],
       [19, 18, 17, 16, 15, 14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  4,
         3,  2,  1,  0, 23, 22, 21, 20],
       [ 4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        20, 21, 22, 23,  0,  1,  2,  3],
       [21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,  9,  8,  7,  6,
         5,  4,  3,  2,  1,  0, 23, 22],
       [ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,
        18, 19, 20, 21, 22, 23,  0,  1],
       [23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,  9,  8,
         7,  6,  5,  4,  3,  2,  1,  0]]
    
    if chord_1 in circle_sharp:
        idx_c_1 = circle_sharp.index(chord_1)
    else:
        idx_c_1 = circle_flat.index(chord_1)
        
    if chord_2 in circle_sharp:
        idx_c_2 = circle_sharp.index(chord_2)
    else:
        idx_c_2 = circle_flat.index(chord_2)
    
    idx_relation = tonnetz_relation_matrix[idx_c_1][idx_c_2]
    return relation_list[idx_relation]

#@jit(nopython=True)
def accelerated_apply_triadic_tonnetz_relation_symbol(chord_1, rel):
    circle_sharp =  ['C','Am','F','Dm','A#','Gm','D#','Cm','G#','Fm','C#','A#m','F#','D#m','B','G#m','E','C#m','A','F#m','D','Bm','G','Em']
    circle_flat = ['C','Am','F','Dm','Bb','Gm','Eb','Cm','Ab','Fm','Db','Bbm','Gb','Ebm','B','Abm','E','Dbm','A','Gbm','D','Bm','G','Em']
    relation_list = [0,'R','RL','RLR','LRPR','LRP','PR','P','PL','PLR','LPRP','LPRPR','PRPR','PRP','LPLR','LPL','LP','LPR','RP','RPR','LRLR','LRL','LR','L','LRPL','LPLP']
    tonnetz_relation_applied_matrix = [[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
        16, 17, 18, 19, 20, 21, 22, 23,  6,  8],
       [ 1,  0, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,
         9,  8,  7,  6,  5,  4,  3,  2, 19, 17],
       [ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,
        18, 19, 20, 21, 22, 23,  0,  1,  8, 10],
       [ 3,  2,  1,  0, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12,
        11, 10,  9,  8,  7,  6,  5,  4, 21, 19],
       [ 4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        20, 21, 22, 23,  0,  1,  2,  3, 10, 12],
       [ 5,  4,  3,  2,  1,  0, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14,
        13, 12, 11, 10,  9,  8,  7,  6, 23, 21],
       [ 6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
        22, 23,  0,  1,  2,  3,  4,  5, 12, 14],
       [ 7,  6,  5,  4,  3,  2,  1,  0, 23, 22, 21, 20, 19, 18, 17, 16,
        15, 14, 13, 12, 11, 10,  9,  8,  1, 23],
       [ 8,  9, 10, 11, 12, 13,  2, 15,  0, 17, 18, 19, 20, 21, 22, 23,
         0,  1,  2,  3,  4,  5,  6,  7, 14, 16],
       [ 9,  8,  7,  6,  5,  4,  3,  2,  1,  0, 23, 22, 21, 20, 19, 18,
        17, 16, 15, 14, 13, 12, 11, 10,  3,  1],
       [10, 11, 12, 13, 14, 15,  4, 17,  2, 19, 20, 21, 22, 23,  0,  1,
         2,  3,  4,  5,  6,  7,  8,  9, 16, 18],
       [11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0, 23, 22, 21, 20,
        19, 18, 17, 16, 15, 14, 13, 12,  5,  3],
       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,  0,  1,  2,  3,
         4,  5,  6,  7,  8,  9, 10, 11, 18, 20],
       [13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0, 23, 22,
        21, 20, 19, 18, 17, 16, 15, 14,  7,  5],
       [14, 15, 16, 17, 18, 19, 20, 21, 22, 23,  0,  1,  2,  3,  4,  5,
         6,  7,  8,  9, 10, 11, 12, 13, 20, 22],
       [15, 14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,
        23, 22, 21, 20, 19, 18, 17, 16,  9,  7],
       [16, 17, 18, 19, 20, 21, 22, 23,  0,  1,  2,  3,  4,  5,  6,  7,
         8,  9, 10, 11, 12, 13, 14, 15, 22,  0],
       [17, 16, 15, 14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  2,
         1,  0, 23, 22, 21, 20, 19, 18, 11,  9],
       [18, 19, 20, 21, 22, 23,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,
        10, 11, 12, 13, 14, 15, 16, 17,  0,  2],
       [19, 18, 17, 16, 15, 14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  4,
         3,  2,  1,  0, 23, 22, 21, 20, 13, 11],
       [20, 21, 22, 23,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,
        12, 13, 14, 15, 16, 17, 18, 19,  2,  4],
       [21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,  9,  8,  7,  6,
         5,  4,  3,  2,  1,  0, 23, 22, 15, 13],
       [22, 23,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13,
        14, 15, 16, 17, 18, 19, 20, 21,  4,  6],
       [23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,  9,  8,
         7,  6,  5,  4,  3,  2,  1,  0, 17, 15]]
    
    if chord_1 in circle_sharp:
        idx_c_1 = circle_sharp.index(chord_1)
    else:
        idx_c_1 = circle_flat.index(chord_1)
        
    rel_idx = relation_list.index(rel)
    
    return circle_sharp[tonnetz_relation_applied_matrix[idx_c_1][rel_idx]]


def accelerated_chromatic_mvt_triads(chord_1, chord_2):
    circle_sharp =  ['C','Am','F','Dm','A#','Gm','D#','Cm','G#','Fm','C#','A#m','F#','D#m','B','G#m','E','C#m','A','F#m','D','Bm','G','Em']
    circle_flat = ['C','Am','F','Dm','Bb','Gm','Eb','Cm','Ab','Fm','Db','Bbm','Gb','Ebm','B','Abm','E','Dbm','A','Gbm','D','Bm','G','Em']
    chromatic_relations_tab = [[  0,  -7,  10,   3,  -4, -11,   6,  -1,  -8,   9,   2,  -5,  12,
          5,  -2,  -9,   8,   1,  -6,  11,   4,  -3, -10,   7],
       [  7,   0,  -7,  10,   3,  -4, -11,   6,  -1,  -8,   9,   2,  -5,
         12,   5,  -2,  -9,   8,   1,  -6,  11,   4,  -3, -10],
       [-10,   7,   0,  -7,  10,   3,  -4, -11,   6,  -1,  -8,   9,   2,
         -5,  12,   5,  -2,  -9,   8,   1,  -6,  11,   4,  -3],
       [ -3, -10,   7,   0,  -7,  10,   3,  -4, -11,   6,  -1,  -8,   9,
          2,  -5,  12,   5,  -2,  -9,   8,   1,  -6,  11,   4],
       [  4,  -3, -10,   7,   0,  -7,  10,   3,  -4, -11,   6,  -1,  -8,
          9,   2,  -5,  12,   5,  -2,  -9,   8,   1,  -6,  11],
       [ 11,   4,  -3, -10,   7,   0,  -7,  10,   3,  -4, -11,   6,  -1,
         -8,   9,   2,  -5,  12,   5,  -2,  -9,   8,   1,  -6],
       [ -6,  11,   4,  -3, -10,   7,   0,  -7,  10,   3,  -4, -11,   6,
         -1,  -8,   9,   2,  -5,  12,   5,  -2,  -9,   8,   1],
       [  1,  -6,  11,   4,  -3, -10,   7,   0,  -7,  10,   3,  -4, -11,
          6,  -1,  -8,   9,   2,  -5,  12,   5,  -2,  -9,   8],
       [  8,   1,  -6,  11,   4,  -3, -10,   7,   0,  -7,  10,   3,  -4,
        -11,   6,  -1,  -8,   9,   2,  -5,  12,   5,  -2,  -9],
       [ -9,   8,   1,  -6,  11,   4,  -3, -10,   7,   0,  -7,  10,   3,
         -4, -11,   6,  -1,  -8,   9,   2,  -5,  12,   5,  -2],
       [ -2,  -9,   8,   1,  -6,  11,   4,  -3, -10,   7,   0,  -7,  10,
          3,  -4, -11,   6,  -1,  -8,   9,   2,  -5,  12,   5],
       [  5,  -2,  -9,   8,   1,  -6,  11,   4,  -3, -10,   7,   0,  -7,
         10,   3,  -4, -11,   6,  -1,  -8,   9,   2,  -5,  12],
       [ 12,   5,  -2,  -9,   8,   1,  -6,  11,   4,  -3, -10,   7,   0,
         -7,  10,   3,  -4, -11,   6,  -1,  -8,   9,   2,  -5],
       [ -5,  12,   5,  -2,  -9,   8,   1,  -6,  11,   4,  -3, -10,   7,
          0,  -7,  10,   3,  -4, -11,   6,  -1,  -8,   9,   2],
       [  2,  -5,  12,   5,  -2,  -9,   8,   1,  -6,  11,   4,  -3, -10,
          7,   0,  -7,  10,   3,  -4, -11,   6,  -1,  -8,   9],
       [  9,   2,  -5,  12,   5,  -2,  -9,   8,   1,  -6,  11,   4,  -3,
        -10,   7,   0,  -7,  10,   3,  -4, -11,   6,  -1,  -8],
       [ -8,   9,   2,  -5,  12,   5,  -2,  -9,   8,   1,  -6,  11,   4,
         -3, -10,   7,   0,  -7,  10,   3,  -4, -11,   6,  -1],
       [ -1,  -8,   9,   2,  -5,  12,   5,  -2,  -9,   8,   1,  -6,  11,
          4,  -3, -10,   7,   0,  -7,  10,   3,  -4, -11,   6],
       [  6,  -1,  -8,   9,   2,  -5,  12,   5,  -2,  -9,   8,   1,  -6,
         11,   4,  -3, -10,   7,   0,  -7,  10,   3,  -4, -11],
       [-11,   6,  -1,  -8,   9,   2,  -5,  12,   5,  -2,  -9,   8,   1,
         -6,  11,   4,  -3, -10,   7,   0,  -7,  10,   3,  -4],
       [ -4, -11,   6,  -1,  -8,   9,   2,  -5,  12,   5,  -2,  -9,   8,
          1,  -6,  11,   4,  -3, -10,   7,   0,  -7,  10,   3],
       [  3,  -4, -11,   6,  -1,  -8,   9,   2,  -5,  12,   5,  -2,  -9,
          8,   1,  -6,  11,   4,  -3, -10,   7,   0,  -7,  10],
       [ 10,   3,  -4, -11,   6,  -1,  -8,   9,   2,  -5,  12,   5,  -2,
         -9,   8,   1,  -6,  11,   4,  -3, -10,   7,   0,  -7],
       [ -7,  10,   3,  -4, -11,   6,  -1,  -8,   9,   2,  -5,  12,   5,
         -2,  -9,   8,   1,  -6,  11,   4,  -3, -10,   7,   0]]
    
    if chord_1 in circle_sharp:
        idx_c_1 = circle_sharp.index(chord_1)
    else:
        idx_c_1 = circle_flat.index(chord_1)
        
    if chord_2 in circle_sharp:
        idx_c_2 = circle_sharp.index(chord_2)
    else:
        idx_c_2 = circle_flat.index(chord_2)
    
    return chromatic_relations_tab[idx_c_1][idx_c_2]

def accelerated_get_voice_leading_transformation_symbol(chord_1, chord_2):
    circle_sharp =  ['C','Am','F','Dm','A#','Gm','D#','Cm','G#','Fm','C#','A#m','F#','D#m','B','G#m','E','C#m','A','F#m','D','Bm','G','Em']
    circle_flat = ['C','Am','F','Dm','Bb','Gm','Eb','Cm','Ab','Fm','Db','Bbm','Gb','Ebm','B','Abm','E','Dbm','A','Gbm','D','Bm','G','Em']
    relations_list = [[0, 0, 0],
                     [9, -4, -3],
                     [5, 5, -7],
                     [2, 1, 2],
                     [10, -2, -2],
                     [7, 6, -5],
                     [3, 3, 3],
                     [0, -1, 0],
                     [8, -4, -4],
                     [5, 4, -7],
                     [1, 1, 1],
                     [10, -3, -2],
                     [6, 6, -6],
                     [3, 2, 3],
                     [11, -1, -1],
                     [8, 7, -4],
                     [4, 4, 4],
                     [1, 0, 1],
                     [9, -3, -3],
                     [6, 5, -6],
                     [2, 2, 2],
                     [11, -2, -1],
                     [7, 7, -5],
                     [4, 3, 4],
                     [-9, 4, 3],
                     [-4, 9, -4],
                     [-7, 5, 5],
                     [1, 2, 1],
                     [-2, 10, -2],
                     [-6, 7, 6],
                     [-9, 3, 3],
                     [-1, 0, -1],
                     [-4, 8, -4],
                     [-8, 5, 4],
                     [-3, 10, -3],
                     [-6, 6, 6],
                     [2, 3, 2],
                     [-1, 11, -1],
                     [-5, 8, 7],
                     [-8, 4, 4],
                     [0, 1, 0],
                     [-3, 9, -3],
                     [-7, 6, 5],
                     [-2, 11, -2],
                     [-5, 7, 7],
                     [-5, -5, 7],
                     [4, -9, 4],
                     [-3, -4, 9],
                     [5, -7, 5],
                     [-2, -2, 10],
                     [-5, -6, 7],
                     [3, -9, 3],
                     [-4, -4, 8],
                     [5, -8, 5],
                     [-2, -3, 10],
                     [6, -6, 6],
                     [-1, -1, 11],
                     [-4, -5, 8],
                     [4, -8, 4],
                     [-3, -3, 9],
                     [6, -7, 6],
                     [-1, -2, 11],
                     [-2, -1, -2],
                     [7, -5, -5],
                     [3, 4, -9],
                     [8, -3, -4],
                     [-2, -2, -2],
                     [6, -5, -6],
                     [3, 3, -9],
                     [4, 5, -8],
                     [9, -2, -3],
                     [-1, -1, -1],
                     [7, -4, -5],
                     [4, 4, -8],
                     [5, 6, -7],
                     [-10, 2, 2],
                     [-1, -2, -1],
                     [-5, 7, -5],
                     [-8, 3, 4],
                     [-3, 8, -3],
                     [-10, 1, 2],
                     [-5, 6, -5],
                     [-7, 4, 5],
                     [-2, 9, -2],
                     [-9, 2, 3],
                     [-4, 7, -4],
                     [-6, 5, 6],
                     [-7, -6, 5],
                     [2, -10, 2],
                     [3, -8, 3],
                     [-4, -3, 8],
                     [-7, -7, 5],
                     [1, -10, 1],
                     [-6, -5, 6],
                     [4, -7, 4],
                     [-3, -2, 9],
                     [-6, -6, 6],
                     [2, -9, 2],
                     [-5, -4, 7],
                     [-3, -3, -3],
                     [6, -7, -6],
                     [2, 2, -10],
                     [4, 3, -8],
                     [-3, -4, -3],
                     [5, -7, -7],
                     [2, 1, -10],
                     [7, -6, -5],
                     [-2, -3, -2],
                     [6, -6, -6],
                     [3, 2, -9],
                     [8, -5, -4],
                     [10, -1, -2],
                     [3, 4, 3],
                     [6, 7, -6],
                     [11, 0, -1],
                     [8, 8, -4],
                     [4, 5, 4],
                     [7, 8, -5],
                     [-1, 10, -1],
                     [-5, 6, 7],
                     [0, 11, 0],
                     [-4, 8, 8],
                     [-4, 7, 8],
                     [5, -6, 5],
                     [-2, -1, 10],
                     [6, -5, 6],
                     [-1, 0, 11],
                     [-10, 3, 2],
                     [-5, 8, -5],
                     [3, -10, 3],
                     [-6, -7, 6],
                     [-3, -2, -3],
                     [2, 3, -10],
                     [5, -6, -7],
                     [-11, 1, 1],
                     [-6, 6, -6],
                     [-11, 0, 1],
                     [-6, 5, -6],
                     [-8, -7, 4],
                     [1, -11, 1],
                     [-8, -8, 4],
                     [0, -11, 0],
                     [-4, -4, -4],
                     [5, -8, -7],
                     [1, 1, -11],
                     [-4, -5, -4],
                     [4, -8, -8],
                     [1, 0, -11],
                     [-11, 2, 1],
                     [-6, 7, -6],
                     [2, -11, 2],
                     [-7, -8, 5],
                     [-4, -3, -4],
                     [1, 2, -11],
                     [4, -7, -8]]
    
    triad_transformations_tab_idx = [[  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23],
       [ 24,   0,  25,  26,  27,  28,  29,  30,  31,  32,  33,  10,  34,
         35,  36,  37,  38,  39,  40,  41,  42,  20,  43,  44],
       [ 45,  46,   0,  47,  48,   3,  49,  50,  51,   7,  52,  53,  10,
         54,  55,  13,  56,  57,  58,  17,  59,  60,  20,  61],
       [ 62,  63,  64,   0,  65,   2,  27,  66,  67,  68,  31,   8,  69,
         10,  70,  12,  36,  71,  72,  73,  40,  18,  74,  20],
       [ 75,  76,  77,  78,   0,  79,  26,  80,  66,  81,  30,   7,  32,
         82,  10,  83,  35,  84,  71,  85,  39,  17,  41,  86],
       [ 87,  88,  62,  45,  89,   0,  90,  91,  92,  66,  93,  51,  31,
         52,  94,  10,  95,  96,  97,  71,  98,  58,  40,  59],
       [ 99, 100, 101,  76,  63, 102,   0, 103, 104, 105,  66, 106,  68,
          7,   8,   9,  10, 107, 108, 109,  71, 110,  73,  17],
       [ 40,  18,  74,  20, 111,  22, 112,   0,  65,   2,  27,   4, 113,
          6, 114, 115, 116,  10,  70,  12,  36,  14, 117,  16],
       [ 39,  17,  41,  86,  20, 118,  44,  78,   0,  79,  26,   3,  28,
        119,   6, 120, 121,  82,  10,  83,  35,  13,  37, 122],
       [ 98,  58,  40,  59, 123,  20, 124,  45,  89,   0,  90,  48,  27,
         49, 125,   6, 126,  52,  94,  10,  95,  55,  36,  56],
       [ 71, 110,  73,  17,  18,  19,  20,  76,  63, 102,   0,   1,   2,
          3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13],
       [127,  71, 128,  39,  40,  41,  42,  75,  62,  77,  24,   0,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  10,  34,  35],
       [ 96, 129,  71,  57,  58,  17,  59, 130,  88,  76,  45,  46,   0,
         47,  48,   3,  49,  50,  51,   7,  52,  53,  10,  54],
       [131, 108, 132,  71,  72,  73,  40,  99, 133, 101,  62,  63,  64,
          0,  65,   2,  27,  66,  67,  68,  31,   8,  69,  10],
       [134, 107, 135,  84,  71,  85,  39, 136,  99, 137,  75,  76,  77,
         78,   0,  79,  26,  80,  66,  81,  30,   7,  32,  82],
       [138, 139, 131,  96,  97,  71,  98, 140, 141,  99,  87,  88,  62,
         45,  89,   0,  90,  91,  92,  66,  93,  51,  31,  52],
       [142, 143, 144, 107, 108, 109,  71, 145, 146, 147,  99, 100, 101,
         76,  63, 102,   0, 103, 104, 105,  66, 106,  68,   7],
       [ 31,   8,  69,  10,  70,  12,  36,  71,  72,  73,  40,  18,  74,
         20, 111,  22, 112,   0,  65,   2,  27,   4, 113,   6],
       [ 30,   7,  32,  82,  10,  83,  35,  84,  71,  85,  39,  17,  41,
         86,  20, 118,  44,  78,   0,  79,  26,   3,  28, 119],
       [ 93,  51,  31,  52,  94,  10,  95,  96,  97,  71,  98,  58,  40,
         59, 123,  20, 124,  45,  89,   0,  90,  48,  27,  49],
       [ 66, 106,  68,   7,   8,   9,  10, 107, 108, 109,  71, 110,  73,
         17,  18,  19,  20,  76,  63, 102,   0,   1,   2,   3],
       [148,  66, 149,  30,  31,  32,  33, 134, 131, 135, 127,  71, 128,
         39,  40,  41,  42,  75,  62,  77,  24,   0,  25,  26],
       [ 91, 150,  66,  50,  51,   7,  52, 151, 139, 107,  96, 129,  71,
         57,  58,  17,  59, 130,  88,  76,  45,  46,   0,  47],
       [152, 104, 153,  66,  67,  68,  31, 142, 154, 144, 131, 108, 132,
         71,  72,  73,  40,  99, 133, 101,  62,  63,  64,   0]]
    
    if chord_1 in circle_sharp:
        idx_c_1 = circle_sharp.index(chord_1)
    else:
        idx_c_1 = circle_flat.index(chord_1)
        
    if chord_2 in circle_sharp:
        idx_c_2 = circle_sharp.index(chord_2)
    else:
        idx_c_2 = circle_flat.index(chord_2)
    
    transformation_idx = triad_transformations_tab_idx[idx_c_1][idx_c_2]
    return relations_list[transformation_idx]
