from dataclasses import dataclass
from typing import List, Literal
from fabrique_nodes_core.ui_params import default_ui_params
from fabrique_nodes_core import configs_model

# from .model_generators import model2ports, jsons2model, schema2model, model2schema

SYS_FIELDS = ['root']

# //==============================
# //  Supported port types
# //==============================
port_type = {
    dict: 'object',
    list: 'array',
    str: 'string',
    float: 'number',
    int: 'integer',
    bool: 'bool',
    None: 'any'
}

@dataclass
class Port:
    """node port"""
    id_: str                # autogenerated + uniq, not in SYS_FIELDS
    name: str               # autogenerated + userdefined (DDD)
    type_: type = None      # auto from schema + userdefined
    visible: bool = True    # user
    required: bool = True   # auto from schema + userdefined
    special: bool = False   # for root_port.special = True, field_port.special = False, jamespth_port.special = True,
    model: object = None    # auto from schema
    _schema: str = ''
    code: str = ''          # root_port.code='', field_port.code='fieldname', jamespth_port.code='code.pth'


@dataclass
class NodeConfig:
    """node config"""
    id_: str    
    name: str
    ports_out: List[Port] = None
    ports_in: List[Port] = None
    description: str = ''
    schema_ = ''
    config = {}
    model = None

class BaseNode:
    type_: str = 'Unknown!'
    group_type_: str = ''
    category: Literal['StructOps', 'IO', 'Funcional', 'Stateful', 'Misc']
    ui_params = default_ui_params
    initial_config = None
    
    def __init__(self, cfg: NodeConfig):
        self.cfg = cfg

    def process(self, *args) -> list:
        raise Exception('Process method must be implemented!')

class NodesGroup():
    type_: str = ''
    nodes_array: list[BaseNode] = []


root_port = configs_model.Port(id_='root', name='root', type_=port_type[None], special=False, code='')

PortModel = configs_model.Port
NodeModel = configs_model.NodeData