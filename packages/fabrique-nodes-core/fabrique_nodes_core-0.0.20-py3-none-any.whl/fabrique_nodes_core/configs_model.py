# generated by datamodel-codegen:
#   filename:  example.json
#   timestamp: 2022-10-05T22:01:30+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Literal

from pydantic import BaseModel


class Port(BaseModel):
    id_: str 
    name: str
    type_: str = 'any'
    visible: bool = True
    required: bool = True
    special: bool = False
    code: str = ''
    schema_: Optional[str] = ''


class NodeData(BaseModel):
    name: Optional[str] = ''
    ports_in: Optional[List[Port]] = []
    ports_out: Optional[List[Port]] = []
    description: Optional[str] = ''
    schema_: Optional[str] = ''
    type_: Optional[str]
    group_type_: Optional[str]
    config: Optional[dict]
    category: Optional[Literal['StructOps', 'IO', 'Funcional', 'Stateful', 'Misc']]



class ConnectionOut(BaseModel):
    node: int
    input: str
    data: Dict[str, Any]

class ConnectionIn(BaseModel):
    node: int
    output: str
    data: Dict[str, Any]

class Inputs(BaseModel):
    connections: List[ConnectionIn]


class Outputs(BaseModel):
    connections: List[ConnectionOut]


class Node(BaseModel):
    id: int
    data: Optional[NodeData]
    inputs: Dict[str, Inputs]
    outputs: Dict[str, Outputs]
    position: List[int]
    name: str


class Model(BaseModel):
    id: str
    nodes: Dict[str, Node]
    comments: List
