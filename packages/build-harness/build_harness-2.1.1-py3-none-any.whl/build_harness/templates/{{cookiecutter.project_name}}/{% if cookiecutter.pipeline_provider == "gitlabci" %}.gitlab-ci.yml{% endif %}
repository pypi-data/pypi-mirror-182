image: python:3.8-slim

stages:
  - setup
  - static-analysis
  - tests
  - package
  - publish

variables:
  FLIT_ROOT_INSTALL: 1
  GIT_STRATEGY: clone
  GIT_DEPTH: "0"
  BUILDHARNESS_LOG_LEVEL: debug

  PYPI_API_USER: __token__

  # Don't forget to update the coverage threshold in .pre-commit-config.yaml
  UNITTEST_COVERAGE_THRESHOLD: {{cookiecutter.coverage_threshold}}

  VENV_BIN: .venv/bin

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache/pip
    - .venv/


.build-harness-base:
  before_script:
    - 'apt-get update
    && apt-get install -y
         git'
    - git config --global user.email "you@example.com"
    - git config --global user.name "Your Name"


.build-harness-target:
  script:
    - ${VENV_BIN}/pip install .
    - |
      ${VENV_BIN}/build-harness \
        --log-console-enable \
        --log-file-enable \
        --log-level ${BUILDHARNESS_LOG_LEVEL} \
        ${TARGET}

  extends:
    - .build-harness-base


install-dependencies:
  stage: setup
  script:
    - python3 -m venv .venv
    - ${VENV_BIN}/pip install build_harness
    - |
      ${VENV_BIN}/build-harness \
        --log-console-enable \
        --log-file-enable \
        --log-level ${BUILDHARNESS_LOG_LEVEL} \
        install

  extends:
    - .build-harness-base


formatting-check:
  stage: static-analysis
  variables:
    TARGET: formatting --check

  extends:
    - .build-harness-target


flake8-check:
  stage: static-analysis
  variables:
    TARGET: static-analysis --analysis flake8

  extends:
    - .build-harness-target


mypy-check:
  stage: static-analysis
  variables:
    TARGET: static-analysis --analysis mypy

  extends:
    - .build-harness-target


unit-tests:
  stage: tests
  variables:
    TARGET: unit-test

  extends:
    - .build-harness-target


acceptance-tests:
  stage: tests
  variables:
    TARGET: acceptance tests --junitxml

  extends:
    - .build-harness-target


unit-tests-coverage:
  stage: tests
  variables:
    TARGET: unit-test --check ${UNITTEST_COVERAGE_THRESHOLD}

  extends:
    - .build-harness-target

  <<: *declare-artifacts


install-check:
  stage: tests
  variables:
    TARGET: install

  extends:
    - .build-harness-target


build-packages:
  artifacts:
    expire_in: {{cookiecutter.pipeline_artifact_expiry}}
    paths:
      - dist/
      - build_harness.log
      - release_flow.log
    when: always
  extends:
    - .build-harness-base
  stage: package
  script:
    - |
      ${VENV_BIN}/release-flow \
        --log-console-disable \
        --log-file-enable \
        --log-level ${BUILDHARNESS_LOG_LEVEL} \
        --default-branch "${CI_DEFAULT_BRANCH}"
    - |
      export THIS_VERSION=$(${VENV_BIN}/release-flow \
        --log-console-disable \
        --log-file-enable \
        --log-level ${BUILDHARNESS_LOG_LEVEL} \
        --default-branch "${CI_DEFAULT_BRANCH}")
    # log THIS_VERSION to pipeline log for debugging
    - echo "${THIS_VERSION}"
    - |
      ${VENV_BIN}/build-harness \
        --log-console-enable \
        --log-file-enable \
        --log-level ${BUILDHARNESS_LOG_LEVEL} \
        package \
          --release-id "${THIS_VERSION}"


publish-packages:
  artifacts:
    expire_in: {{cookiecutter.pipeline_artifact_expiry}}
    paths:
      - build_harness.log
      - publish_flow.log
    when: always
  extends:
    - .build-harness-base
  needs:
    - job: build-packages
      artifacts: true
  stage: publish
  script:
    - |
      export PUBLISH_THIS=$(${VENV_BIN}/publish-flow \
        --log-console-disable \
        --log-file-enable \
        --log-level ${BUILDHARNESS_LOG_LEVEL} \
        --default-branch "${CI_DEFAULT_BRANCH}" \
        --disable-pr-publish "${CI_PIPELINE_SOURCE}")
    # log PUBLISH_THIS to pipeline log for debugging
    - echo ${PUBLISH_THIS}
    # NOTE: using the `--password` option to read from environment variable as this is
    # the most likely to be available in a CI system (but not necessarily the most
    # secure).
    - |
      ${VENV_BIN}/build-harness \
        --log-console-enable \
        --log-file-enable \
        --log-level ${BUILDHARNESS_LOG_LEVEL} \
        publish \
          --user $PYPI_API_USER \
          --password $PYPI_API_TOKEN \
          --publish ${PUBLISH_THIS}
