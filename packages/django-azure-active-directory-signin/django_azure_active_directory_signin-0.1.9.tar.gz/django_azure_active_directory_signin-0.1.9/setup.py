# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['azure_signin']

package_data = \
{'': ['*']}

install_requires = \
['django>=4,<5.0', 'msal>=1.18.0']

setup_kwargs = {
    'name': 'django-azure-active-directory-signin',
    'version': '0.1.9',
    'description': 'Sign-in users to your Django Web app with Azure Active Directory.',
    'long_description': '# Django Azure Active Directory Sign-In ðŸ”‘\n\n[![Django 4.14](https://img.shields.io/badge/Django-4.1.4-green)](https://docs.djangoproject.com/en/4.0/releases/4.1.4/)\n[![License BSD 3-Clause](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](LICENSE)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![codecov](https://codecov.io/gh/JV-conseil-Internet-Consulting/django-azure-active-directory-signin/branch/main/graph/badge.svg?token=WLCTWKAPF6)](https://codecov.io/gh/JV-conseil-Internet-Consulting/django-azure-active-directory-signin)\n[![PyPI](https://img.shields.io/pypi/v/django-azure-active-directory-signin?color=green)](https://pypi.org/project/django-azure-active-directory-signin/)\n[![Donate with PayPal](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/donate/?hosted_button_id=P3DGL6EANDY96)\n[![Follow JV conseil â€“ Internet Consulting on Twitter](https://img.shields.io/twitter/follow/JVconseil.svg?style=social&logo=twitter)](https://twitter.com/JVconseil)\n\nSign-in users to your Django Web app with Azure Active Directory.\n\n## Description\n\n`django-azure-active-directory-signin` is a Django app which wraps [MSAL](https://github.com/AzureAD/microsoft-authentication-library-for-python)\npackage to sign in users with Microsoft\'s Azure Active Directory (OAuth 2.0 and OpenID Connect) in Django projects.\n\n![Sign-in users to your Django Web app with Azure Active Directory](https://user-images.githubusercontent.com/8126807/179853963-7b7048bd-aab5-4eba-8903-7efb8c4ee2aa.svg)\n\nThe app includes `login`, `logout` and `callback` authentication views,\na customizable backend to validate, create user and extend user with extra attributes,\na decorator to protect individual views to protect individual views,\nand middleware which allows the entire site to require user authentication by default,\nwith the ability to exempt specified views.\n\nThe GitHub repository provides a `demo` Django app to run local tests on `https` protocol thanks to [django-sslserver](https://pypi.org/project/django-sslserver/).\n\n_This project is in no way affiliated with Microsoft Corporation._\n\n## Installation\n\nFrom PyPi:\n\n```bash\npip install django-azure-active-directory-signin\n```\n\n## Configuration\n\n### Azure App Registration\n\n[Register an application](https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-register-app). You must have permission to manage applications in Azure Active Directory (Azure AD) on your [Azure account](https://portal.azure.com).\n\n[Add a client secret](https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-register-app#add-a-client-secret) in **Certificates & secrets** > **Client secrets** > **New client secret** and note it down.\n\n![Add a client secret](https://docs.microsoft.com/en-us/azure/active-directory/develop/media/quickstart-register-app/portal-05-app-reg-04-credentials.png)\n\nCopy your **client_id**, **tenant_id** and **client_secret** and store them in environment variables (see `.env` folder for sample) or better still in an **Azure Key Vault**.\n\n![Obfuscate your credentials by using environment variables](https://docs.microsoft.com/en-us/azure/active-directory/develop/media/quickstart-register-app/portal-03-app-reg-02.png)\n\n[Add redirect URI](https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-register-app#add-a-redirect-uri) like so:\n\n- `https://<your-domain>/azure-signin/callback`\n- `https://127.0.0.1:8000/azure-signin/callback`\n- `https://localhost:8000/azure-signin/callback`\n\n### Settings\n\nAdd the following to your `settings.py`, replacing the variables in braces with the values\nfrom your Azure app:\n\n```py\nINSTALLED_APPS += [\n    "azure_signin",\n]\n\nAZURE_SIGNIN = {\n    "CLIENT_ID": os.environ.get("CLIENT_ID"),  # Mandatory\n    "CLIENT_SECRET": os.environ.get("CLIENT_SECRET"),  # Mandatory\n    "TENANT_ID": os.environ.get("TENANT_ID"),  # Mandatory\n    "SAVE_ID_TOKEN_CLAIMS": True,  # Optional, default is False.\n    "RENAME_ATTRIBUTES": [\n        ("employeeNumber", "employee_id"),\n        ("affiliationNumber", "omk2"),\n    ],  # Optional\n    "REDIRECT_URI": "https://<domain>/azure-signin/callback",  # Optional\n    "SCOPES": ["User.Read.All"],  # Optional\n    "AUTHORITY": "https://login.microsoftonline.com/" + os.environ.get("TENANT_ID"),  # Optional Or https://login.microsoftonline.com/common if multi-tenant\n    "LOGOUT_REDIRECT_URI": "https://<domain>/logout",  # Optional\n    "PUBLIC_URLS": ["<public:view_name>",]  # Optional, public views accessible by non-authenticated users\n}\n\nAUTHENTICATION_BACKENDS += [\n    "azure_signin.backends.AzureSigninBackend",\n]\n\nLOGIN_URL = "azure_signin:login"\nLOGIN_REDIRECT_URL = "/" # Or any other endpoint\nLOGOUT_REDIRECT_URL = LOGIN_REDIRECT_URL\n```\n\n### Installed apps\n\nAdd the following to your `INSTALLED_APPS`:\n\n```py\nINSTALLED_APPS += [\n    "azure_signin",\n]\n```\n\n### Authentication backend\n\nConfigure the authentication backend:\n\n```py\nAUTHENTICATION_BACKENDS += [\n    "azure_signin.backends.AzureSigninBackend",\n]\n```\n\n### URLs\n\nInclude the app\'s URLs in your `urlpatterns`:\n\n```py\nfrom django.urls import path, include\n\nurlpatterns += [\n    path("azure-signin/", include("azure_signin.urls", namespace="azure_signin")),\n]\n```\n\n## Usage\n\n### AbstractUser\n\nAdd extra attributes to users with `AZURE_SIGNIN["RENAME_ATTRIBUTES"]`\nand Django `django.contrib.auth.models.AbstractUser`.\n\n```py\nfrom django.contrib.auth.models import AbstractUser\nfrom django.db import models\n\n\nclass ExtendedUser(AbstractUser):\n    """\n    Extend user with extra attributes set in `AZURE_SIGNIN["RENAME_ATTRIBUTES"]`\n    """\n\n    email = models.EmailField(unique=True, db_index=True)\n    employee_id = models.IntegerField(\n        null=True, default=None, unique=True, blank=True, db_index=True\n    )\n    omk2 = models.CharField(max_length=5, null=True, default=None, db_index=True)\n    hcm = models.CharField(max_length=7, null=True, default=None, db_index=True)\n```\n\n### Backend\n\nBackend can be subclassed to customize validation rules for user.\n\n```py\nimport logging\n\nfrom azure_signin.backends import AzureSigninBackend\n\nlogger = logging.getLogger(__name__)\n\nclass CustomAzureSigninBackend(AzureSigninBackend):\n    "Subclass AzureSigninBackend to customize validation rules for user."\n\n    def is_valid_user(self, user: dict, *args, **kwargs) -> bool:\n        "is_valid_user"\n        output = super().is_valid_user(user, *args, **kwargs)\n        try:\n            "run extra checks here..."\n            pass\n        except Exception as e:\n            logger.exception(e)\n        logger.debug("is_valid_user: %s", output)\n        return output\n```\n\n### Decorator\n\nTo make user authentication a requirement for accessing an individual view, decorate the\nview like so:\n\n```py\nfrom azure_signin.decorators import azure_signin_required\nfrom django.shortcuts import HttpResponse\n\n@azure_signin_required\ndef protected_view(request):\n    return HttpResponse("A view protected by the decorator")\n```\n\n### Middleware\n\nIf you want to protect your entire site by default, you can use the middleware by adding the\nfollowing to your `settings.py`:\n\n```python\nMIDDLEWARE += [\n    "azure_signin.middleware.AzureSigninMiddleware",\n]\n```\n\nMake sure you add the middleware after Django\'s `session` and `authentication` middlewares so\nthat the request includes the session and user objects. Public URLs which need to be accessed by\nnon-authenticated users should be specified in the `settings.AZURE_SIGNIN["PUBLIC_URLS"]`, as\nshown above.\n\n### VS Code Tasks\n\nThe GitHub repository provides commands `Install`, `Launch` and `Tests` accessible through\n`Command Palette` (press `Cmd+Shift+P`) then `>Tasks: Run Tasks`.\n\n![VS Code Tasks](https://user-images.githubusercontent.com/8126807/179760209-b600877d-ac74-4fe1-b042-32ed26fd7430.png)\n![The app includes `Install`, `Launch` and `Tests` commands accessible through `Command Palette > Tasks: Run Tasks` (press `Cmd+Shift+P`)](https://user-images.githubusercontent.com/8126807/179760201-7203836c-fdb9-42d9-84f7-656b57a6721a.png)\n\nAll bash scripts are stored in `.bash` folder.\n\nThe virtual environment is propelled by [poetry](https://python-poetry.org) which can be installed with Homebrew `brew install poetry`.\n\n## Credits\n\nThis app is inspired by and builds on functionality in\n<https://github.com/AgileTek/django-azure-auth>, with both feature\nimprovements, code coverage and extended documentation.\n\n## Readings ðŸ“š\n\n- [Quickstart: Add sign-in with Microsoft to a web app](https://docs.microsoft.com/en-us/azure/active-directory/develop/web-app-quickstart?pivots=devlang-python) (docs.microsoft.com)\n- [Microsoft Graph REST API v1.0](https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http#permissions) (docs.microsoft.com)\n- [Enable your Python Django web app to sign in users to your Azure Active Directory](https://github.com/Azure-Samples/ms-identity-python-django-tutorial/tree/main/1-Authentication/sign-in) tenant with the Microsoft identity platform (github.com)\n',
    'author': 'JV conseil',
    'author_email': 'contact@jv-conseil.net',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/JV-conseil-Internet-Consulting/django-azure-active-directory-signin',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.9',
}


setup(**setup_kwargs)
