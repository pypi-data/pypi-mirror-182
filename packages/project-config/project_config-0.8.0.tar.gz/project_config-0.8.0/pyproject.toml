[project]
name = "project-config"
version = "0.8.0"
description = "Reproducible configuration across projects."
authors = [{ name = "Álvaro Mondéjar Rubio", email = "mondejar1994@gmail.com" }]
license = "BSD-3-Clause"
readme = "README.md"
requires-python = ">=3.7,<3.12"
classifiers = [
  "Development Status :: 4 - Beta",
  "Operating System :: OS Independent",
  "License :: OSI Approved :: BSD License",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Quality Assurance",
  "Environment :: Console",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
keywords = [
  "reproducible",
  "project",
  "configuration",
  "config",
  "linter",
  "meta-linter"
]
dependencies = [
  "importlib-metadata-argparse-version",
  "contextlib-chdir",
  "tomli-w~=1.0",
  'pyjson5',
  "colored",
  "tabulate~=0.8",
  "jmespath~=1.0",
  "identify~=2.0",
  "ruamel.yaml~=0.17",
  "appdirs~=1.0",
  "diskcache~=5.0",
  "requests",
  "requests-futures~=1.0",
  "deepmerge~=1.0",
  "tomlkit~=0.11",
  'importlib-metadata; python_version < "3.10"',
  'tomli~=2.0; python_version < "3.11"',
]

[project.urls]
Source = "https://github.com/mondeja/project-config"
Documentation = "https://mondeja.github.io/project-config"
"Bug tracker" = "https://github.com/mondeja/project-config/issues"
Changelog = "https://github.com/mondeja/project-config/releases"

[tool.hatch.build]
include = ["/src"]

[tool.hatch.build.targets.wheel]
packages = ["src/project_config"]

[project.scripts]
project-config = "project_config.__main__:main"

[project."entry-points"."project_config.plugins"]
inclusion = "project_config.plugins.inclusion:InclusionPlugin"
jmespath = "project_config.plugins.jmespath:JMESPathPlugin"
existence = "project_config.plugins.existence:ExistencePlugin"

[project."entry-points".pytest11]
project-config-tester = "project_config.tests.pytest_plugin.plugin"

[tool.hatch.envs.default]
python = "3.10"
dependencies = ["mondeja-bump"]

[tool.hatch.envs.style]
python = "3.10"
detached = true
dependencies = ["pre-commit"]

[tool.hatch.envs.style.scripts]
lint = "pre-commit run -a"

[tool.hatch.envs.tests]
dependencies = [
  "pytest~=7.0",
  "coverage~=6.4",
  "contextlib-chdir",
  "pytest-maybe-raises~=0.1",
  "pytest-mock~=3.0",
  "flask~=2.0",
  "pysetenv~=1.0",
  "pre-commit",
]

[tool.hatch.envs.tests.scripts]
all = "pysetenv PROJECT_CONFIG_TESTS_E2E=true coverage run -m pytest"
unit = "coverage run -m pytest tests/test_unit"
cov = [
  "hatch run +py=py310 tests:all",
  "coverage html",
  "python -c 'import webbrowser as w;w.open(\"http://127.0.0.1:8088\")'",
  "python -m http.server 8088 -b localhost -d htmlcov",
]

[[tool.hatch.envs.tests.matrix]]
python = ["py37", "py38", "py39", "py310", "py311"]

[tool.hatch.envs.docs]
python = "3.10"
dependencies = [
  "Sphinx~=4.0",
  "sphinx-rtd-theme~=1.0",
  "sphinx-tabs~=3.3",
  "chios~=1.0",
  "sphinx-argparse-cli~=1.8",
  "sphinx-github-changelog~=1.2",
  "pytest~=7.0",
  "typing-extensions",
]

[tool.hatch.envs.docs.scripts]
build = "python -m sphinx -n -T -E -W docs docs/_build/html"
serve = """python -m sphinx -n -T -E -W docs docs/_build/html &&
python -c 'import webbrowser as w;w.open("http://127.0.0.1:8089")' &&
python -m http.server 8089 -b localhost -d docs/_build/html"""

[tool.project-config]
cache = "2 days"
style = [
  # Basic Python style: use Hatch, pre-commit, Github workflows, etc
  "gh://mondeja/project-config-styles@v4.1/python/base.json5",
  # Double quotes: formatting with Black
  "gh://mondeja/project-config-styles@v4.1/python/double-quotes.json5",
  # Maximum line length
  "gh://mondeja/project-config-styles@v4.1/python/line-length-80.json5",
  # Testing styles: use pytest
  "gh://mondeja/project-config-styles@v4.1/python/tests.json5",
  # Documentation styles: use Sphinx with Readthedocs theme
  "gh://mondeja/project-config-styles@v4.1/python/sphinx.json5",
  "gh://mondeja/project-config-styles@v4.1/python/google-docstrings.json5",
  "gh://mondeja/project-config-styles@v4.1/python/readthedocs.json5",
  # Type checking with mypy
  "gh://mondeja/project-config-styles@v4.1/python/mypy.json5",
]

[tool.bump]
targets = [
  { file = "pyproject.toml", regex = "(version = [\"'])(\\d+\\.\\d+\\.\\d+)([\"'])" },
  { file = "docs/install.rst", regex = "(v)(\\d+\\.\\d+\\.\\d+)" },
  { file = "contrib/mega-linter-plugin-project-config/project-config.megalinter-descriptor.yml" },
  { file = "contrib/npm/package.json", regex = '(version": ")(\d+\.\d+\.\d+)' },
]

[tool.pytest.ini_options]
addopts = "-s"

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__\\(",
  "raise NotImplementedError",
  "@(abc\\.)?abstractmethod",
  "class .*\\bProtocol\\):",
  "if __name__ == [\"']__main__[\"']:",
  "if TYPE_CHECKING:",
]
omit = ["src/project_config/tests/*"]

[tool.coverage.run]
source = ["src"]

[tool.mypy]
python_version = "3.10"
strict = true

[tool.isort]
lines_after_imports = 2
multi_line_output = 3
line_length = 79
use_parentheses = true
combine_as_imports = true
include_trailing_comma = true
py_version = 37
known_tests = "tests"
sections = [
  "FUTURE",
  "STDLIB",
  "THIRDPARTY",
  "FIRSTPARTY",
  "TESTS",
  "LOCALFOLDER"
]
remove_redundant_aliases = true
extra_standard_library = [
  "contextvars",
  "dataclasses",
  "importlib.resources",
  "importlib.metadata",
  "zoneinfo",
  "graphlib",
  "tomllib",
  "wsgiref.types"
]

[tool.black]
line-length = 80
target-version = ["py37"]

[tool.flakeheaven]
max-line-length = 80
inline-quotes = "double"
docstring-convention = "google"
pytest-parametrize-values-type = "tuple"
pytest-fixture-no-parentheses = true
unused-arguments-ignore-abstract-functions = true

[tool.flakeheaven.plugins]
pycodestyle = ["+*", "-W503", "-E203"]
pyflakes = ["+*"]
pylint = ["+*"]
flake8-builtins = ["+*"]
flake8-comprehensions = ["+*"]
flake8-docstrings = ["+*", "-D105", "-D107"]
flake8-executable = ["+*"]
flake8-implicit-str-concat = ["+*"]
flake8-print = ["+*"]
flake8-printf-formatting = ["+*"]
flake8-pytest-style = ["+*"]
flake8-bugbear = ["+*"]
flake8-encodings = ["+*"]
flake8-no-pep420 = ["+*"]
flake8-absolute-import = ["+*"]
flake8-unused-arguments = ["+*"]
flake8-slots = ["+*"]
dlint = ["+*"]

[tool.flakeheaven.exceptions."tests/**"]
flake8-docstrings = [
  "-D100",
  "-D101",
  "-D102",
  "-D103",
  "-D104",
  "-D107",
  "-D205",
  "-D415"
]
flake8-no-pep420 = ["-INP001"]

[tool.flakeheaven.exceptions."setup.py"]
flake8-docstrings = ["-D205"]
flake8-no-pep420 = ["-INP001"]

[tool.flakeheaven.exceptions."docs/**"]
flake8-docstrings = ["-D100", "-D101", "-D102"]
flake8-print = ["-T201"]
flake8-no-pep420 = ["-INP001"]
flake8-unused-arguments = ["-*"]

[tool.flakeheaven.exceptions."src/project_config/plugins/**"]
flake8-docstrings = ["-D101", "-D102", "-D417"]

[tool.flakeheaven.exceptions."docs/dev/plugins.rst"]
pyflakes = ["-F401"]

[tool.flakeheaven.exceptions."examples/**"]
flake8-docstrings = ["-D100"]
flake8-no-pep420 = ["-INP001"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
