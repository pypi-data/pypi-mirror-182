name: deploy

on:
  push:
    branches: [main]
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:

jobs:
  # https://cibuildwheel.readthedocs.io/en/stable/setup/#github-actions
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    if: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags') }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-20.04
          # - macos-11

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.3
        env:
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_BEFORE_BUILD_LINUX: yum install -y make cmake gcc gcc-c++
          # CIBW_ARCHS_MACOS: "x86_64 arm64"
          # CIBW_BEFORE_ALL_MACOS: brew install cmake libomp
          CIBW_SKIP: pp* *-musllinux_*

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    if: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get install -y make cmake gcc g++

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  deploy-pypi:

    runs-on: ubuntu-latest
    needs: [build_wheels, build_sdist]

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - name: Publish package to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TESTPYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          verbose: true

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
