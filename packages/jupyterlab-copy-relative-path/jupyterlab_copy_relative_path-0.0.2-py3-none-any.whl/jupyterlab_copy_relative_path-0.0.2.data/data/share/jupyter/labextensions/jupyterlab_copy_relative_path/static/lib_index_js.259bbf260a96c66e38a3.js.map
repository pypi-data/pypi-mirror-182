{"version":3,"file":"lib_index_js.259bbf260a96c66e38a3.js","mappings":";;;;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB,mBAAO,CAAC,wFAAyB;AACvD,sBAAsB,mBAAO,CAAC,wFAAyB;AACvD,qBAAqB,mBAAO,CAAC,sFAAwB;AACrD,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,wBAAwB,mBAAO,CAAC,4FAA2B;AAC3D,gBAAgB,mBAAO,CAAC,+BAAS;AACjC,oBAAoB,mBAAO,CAAC,4EAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,wBAAwB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,aAAa;AAC5D,4CAA4C,UAAU;AACtD;AACA,oEAAoE,aAAa;AACjF;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,wBAAwB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,oBAAoB;AAC7E,yDAAyD,mBAAmB;AAC5E;AACA,oEAAoE,aAAa;AACjF;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,kBAAe;;;;;;;;;;;AC7FF;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB","sources":["webpack://jupyterlab_copy_relative_path/./lib/index.js","webpack://jupyterlab_copy_relative_path/./lib/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst application_1 = require(\"@jupyterlab/application\");\nconst filebrowser_1 = require(\"@jupyterlab/filebrowser\");\nconst docmanager_1 = require(\"@jupyterlab/docmanager\");\nconst apputils_1 = require(\"@jupyterlab/apputils\");\nconst ui_components_1 = require(\"@jupyterlab/ui-components\");\nconst utils_1 = require(\"./utils\");\nconst algorithm_1 = require(\"@lumino/algorithm\");\nconst extension = {\n    id: 'context-menu',\n    autoStart: true,\n    requires: [filebrowser_1.IFileBrowserFactory, docmanager_1.IDocumentManager, application_1.ILabShell],\n    activate: (app, factory, docManager, labShell) => {\n        // For File Browser items\n        app.commands.addCommand('filebrowser:copy-relative-path', {\n            label: 'Copy Relative Path',\n            caption: 'Copy path relative to the active document.',\n            icon: ui_components_1.fileIcon.bindprops({ stylesheet: 'menuItem' }),\n            execute: () => {\n                const widget = factory.tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                const item = widget.selectedItems().next();\n                if (!item) {\n                    return;\n                }\n                if (!labShell.currentWidget) {\n                    return;\n                }\n                console.debug('labShell.currentWidget:', labShell.currentWidget);\n                const context = docManager.contextForWidget(labShell.currentWidget);\n                if (!context) {\n                    return;\n                }\n                console.debug(`context.path: ${context.path}`);\n                console.debug(`item.path: ${item.path}`);\n                const relativePath = utils_1.getRelativePath(item.path, context.path);\n                console.debug(`Copied relative path to clipboard: ${relativePath}`);\n                apputils_1.Clipboard.copyToSystem(relativePath);\n            },\n            isVisible: () => !!factory.tracker.currentWidget &&\n                !!factory.tracker.currentWidget.selectedItems().next() &&\n                !!labShell.currentWidget &&\n                !!docManager.contextForWidget(labShell.currentWidget),\n        });\n        // [NOTE] borrowed from jupyterlab/packages/application-extension/src/index.tsx\n        const { shell } = app;\n        const contextMenuWidget = () => {\n            const test = (node) => !!node.dataset.id;\n            const node = app.contextMenuHitTest(test);\n            if (!node) {\n                // Fall back to active widget if path cannot be obtained from event.\n                return shell.currentWidget;\n            }\n            return (algorithm_1.find(shell.widgets('main'), widget => widget.id === node.dataset.id) ||\n                shell.currentWidget);\n        };\n        // For tabs\n        app.commands.addCommand('docmanager:copy-relative-path', {\n            label: 'Copy Relative Path',\n            caption: 'Copy path relative to the active document',\n            icon: ui_components_1.fileIcon.bindprops({ stylesheet: 'menuItem' }),\n            execute: () => {\n                const targetWidget = contextMenuWidget();\n                if (!targetWidget) {\n                    return;\n                }\n                console.debug('widget:', targetWidget);\n                const targetContext = docManager.contextForWidget(targetWidget);\n                if (!targetContext) {\n                    return;\n                }\n                if (!labShell.currentWidget) {\n                    return;\n                }\n                console.debug('labShell.currentWidget:', labShell.currentWidget);\n                const currentContext = docManager.contextForWidget(labShell.currentWidget);\n                if (!currentContext) {\n                    return;\n                }\n                console.debug(`(current) context.path: ${currentContext.path}`);\n                console.debug(`(target)  context.path: ${targetContext.path}`);\n                const relativePath = utils_1.getRelativePath(targetContext.path, currentContext.path);\n                console.debug(`Copied relative path to clipboard: ${relativePath}`);\n                apputils_1.Clipboard.copyToSystem(relativePath);\n            },\n            isVisible: () => !!labShell.currentWidget &&\n                !!docManager.contextForWidget(labShell.currentWidget),\n        });\n    },\n};\nexports.default = extension;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRelativePath = void 0;\n// Get relative path of target with respect to reference\nconst getRelativePath = (target, reference) => {\n    const xs = target.split('/');\n    const ys = reference.split('/').slice(0, -1);\n    const n = Math.min(xs.length, ys.length);\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (xs[i] === ys[i]) {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    const numUps = ys.length - count;\n    const zs = [...Array(numUps).fill('..'), ...xs.slice(count)];\n    return zs.join('/');\n};\nexports.getRelativePath = getRelativePath;\n"],"names":[],"sourceRoot":""}