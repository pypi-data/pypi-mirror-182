{"version":3,"file":"5632f199.js","mappings":";AAgDA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;;;;;;AA+CA;;AC7DA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;ACzHA;;;AA5CA;;AAiDA;;;AAGA;;;;;;;AAOA;;;;;;;AAOA;;;;AAMA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAMA;;;;;AAKA;AACA;AACA;;;;;AAKA;AACA;;;;;AAOA;;;AAIA;;;;;;;;;;;;;;;;;;;;AAgGA;;AC/KA;;;;AAIA;AAGA;AACA;AACA;;;AAGA;AACA;;;AAGA;;;;AAMA;;AAGA;AASA;;AAEA;AACA;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEA","sources":["webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/mqtt/mqtt-config-panel.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/mqtt/mqtt-subscribe-card.ts"],"sourcesContent":["import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport { toggleAttribute } from \"../common/dom/toggle_attribute\";\nimport { computeRTL } from \"../common/util/compute_rtl\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property() public backCallback?: () => void;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.locale !== this.hass.locale) {\n      toggleAttribute(this, \"rtl\", computeRTL(this.hass));\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n      <div id=\"fab\">\n        <slot name=\"fab\"></slot>\n      </div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    if (this.backCallback) {\n      this.backCallback();\n      return;\n    }\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n        color: var(--sidebar-icon-color);\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      #fab {\n        position: fixed;\n        right: calc(16px + env(safe-area-inset-right));\n        bottom: calc(16px + env(safe-area-inset-bottom));\n        z-index: 1;\n      }\n      :host([narrow]) #fab.tabs {\n        bottom: calc(84px + env(safe-area-inset-bottom));\n      }\n      #fab[is-wide] {\n        bottom: 24px;\n        right: 24px;\n      }\n      :host([rtl]) #fab {\n        right: auto;\n        left: calc(16px + env(safe-area-inset-left));\n      }\n      :host([rtl][is-wide]) #fab {\n        bottom: 24px;\n        left: 24px;\n        right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport \"../../../../../components/ha-button-menu\";\nimport \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-code-editor\";\nimport { mdiDotsVertical } from \"@mdi/js\";\nimport { getConfigEntries } from \"../../../../../data/config_entries\";\nimport { showOptionsFlowDialog } from \"../../../../../dialogs/config-flow/show-dialog-options-flow\";\nimport \"../../../../../layouts/hass-subpage\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport \"./mqtt-subscribe-card\";\nimport {\n  showAisFileDialog,\n  HaAisFileDialogParams,\n} from \"../../../../../dialogs/ais-files/show-dialog-ais-file\";\n\nconst qosLevel = [\"0\", \"1\", \"2\"];\n\n@customElement(\"mqtt-config-panel\")\nclass HaPanelDevMqtt extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private topic = \"\";\n\n  @state() private payload = \"\";\n\n  @state() private qos = \"0\";\n\n  private inited = false;\n\n  protected firstUpdated() {\n    if (localStorage && localStorage[\"panel-dev-mqtt-topic\"]) {\n      this.topic = localStorage[\"panel-dev-mqtt-topic\"];\n    }\n    if (localStorage && localStorage[\"panel-dev-mqtt-payload\"]) {\n      this.payload = localStorage[\"panel-dev-mqtt-payload\"];\n    }\n    if (localStorage && localStorage[\"panel-dev-mqtt-qos\"]) {\n      this.qos = localStorage[\"panel-dev-mqtt-qos\"];\n    }\n    this.inited = true;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage .narrow=${this.narrow} .hass=${this.hass}>\n        <ha-button-menu corner=\"BOTTOM_START\" slot=\"toolbar-icon\">\n          <mwc-icon-button slot=\"trigger\" alt=\"menu\">\n            <ha-svg-icon .path=${mdiDotsVertical}></ha-svg-icon>\n          </mwc-icon-button>\n          <mwc-list-item @click=${this._openMosquittoFile}>\n            Edit mosquitto.conf\n          </mwc-list-item>\n          <mwc-list-item @click=${this._restartMosquittoService}>\n            Restart MQTT sevice\n          </mwc-list-item>\n        </ha-button-menu>\n        <div class=\"content\">\n          <ha-card header=\"Ustawienia MQTT\">\n            <div class=\"card-actions\">\n              <mwc-button @click=${this._openOptionFlow}\n                >Re-konfiguracja połączenia MQTT</mwc-button\n              >\n            </div>\n          </ha-card>\n\n          <ha-card\n            .header=${this.hass.localize(\n              \"ui.panel.config.mqtt.description_publish\"\n            )}\n          >\n            <div class=\"card-content\">\n              <ha-textfield\n                .label=${this.hass.localize(\"ui.panel.config.mqtt.topic\")}\n                .value=${this.topic}\n                @change=${this._handleTopic}\n              ></ha-textfield>\n              <ha-select\n                .label=${this.hass.localize(\"ui.panel.config.mqtt.qos\")}\n                .value=${this.qos}\n                @selected=${this._handleQos}\n                >${qosLevel.map(\n                  (qos) =>\n                    html`<mwc-list-item .value=${qos}>${qos}</mwc-list-item>`\n                )}\n              </ha-select>\n\n              <p>${this.hass.localize(\"ui.panel.config.mqtt.payload\")}</p>\n              <ha-code-editor\n                mode=\"jinja2\"\n                autocomplete-entities\n                autocomplete-icons\n                .hass=${this.hass}\n                .value=${this.payload}\n                @value-changed=${this._handlePayload}\n                dir=\"ltr\"\n              ></ha-code-editor>\n            </div>\n            <div class=\"card-actions\">\n              <mwc-button @click=${this._publish}\n                >${this.hass.localize(\n                  \"ui.panel.config.mqtt.publish\"\n                )}</mwc-button\n              >\n            </div>\n          </ha-card>\n\n          <mqtt-subscribe-card .hass=${this.hass}></mqtt-subscribe-card>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private _handleTopic(ev: CustomEvent) {\n    this.topic = (ev.target! as any).value;\n    if (localStorage && this.inited) {\n      localStorage[\"panel-dev-mqtt-topic\"] = this.topic;\n    }\n  }\n\n  private _handlePayload(ev: CustomEvent) {\n    this.payload = ev.detail.value;\n    if (localStorage && this.inited) {\n      localStorage[\"panel-dev-mqtt-payload\"] = this.payload;\n    }\n  }\n\n  private _handleQos(ev: CustomEvent) {\n    const newValue = (ev.target! as any).value;\n    if (newValue >= 0 && newValue !== this.qos && localStorage && this.inited) {\n      this.qos = newValue;\n      localStorage[\"panel-dev-mqtt-qos\"] = this.qos;\n    }\n  }\n\n  private _publish(): void {\n    if (!this.hass) {\n      return;\n    }\n    this.hass.callService(\"mqtt\", \"publish\", {\n      topic: this.topic,\n      payload_template: this.payload,\n      qos: parseInt(this.qos),\n    });\n  }\n\n  private async _openOptionFlow() {\n    const searchParams = new URLSearchParams(window.location.search);\n    if (!searchParams.has(\"config_entry\")) {\n      return;\n    }\n    const configEntryId = searchParams.get(\"config_entry\") as string;\n    const configEntries = await getConfigEntries(this.hass, {\n      domain: \"mqtt\",\n    });\n    const configEntry = configEntries.find(\n      (entry) => entry.entry_id === configEntryId\n    );\n    showOptionsFlowDialog(this, configEntry!);\n  }\n\n  private async _openMosquittoFile() {\n    const filePath =\n      \"/data/data/com.termux/files/usr/etc/mosquitto/mosquitto.conf\";\n    const file = await this.hass.callApi<string>(\"POST\", \"ais_file/read\", {\n      filePath: filePath,\n    });\n    const fileParams: HaAisFileDialogParams = {\n      dialogTitle: \"MQTT mosquitto.conf\",\n      filePath: filePath,\n      fileBody: file,\n      readonly: false,\n    };\n    showAisFileDialog(this, fileParams);\n  }\n\n  private async _restartMosquittoService() {\n    this.hass.callService(\"ais_shell_command\", \"restart_pm2_service\", {\n      service: \"mqtt\",\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          -ms-user-select: initial;\n          -webkit-user-select: initial;\n          -moz-user-select: initial;\n        }\n\n        .content {\n          padding: 24px 0 32px;\n          max-width: 600px;\n          margin: 0 auto;\n          direction: ltr;\n        }\n        ha-card:first-child {\n          margin-bottom: 16px;\n        }\n        mqtt-subscribe-card {\n          display: block;\n          margin: 16px auto;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"developer-tools-mqtt\": HaPanelDevMqtt;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { formatTime } from \"../../../../../common/datetime/format_time\";\nimport \"../../../../../components/ha-card\";\nimport { MQTTMessage, subscribeMQTTTopic } from \"../../../../../data/mqtt\";\nimport { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"mqtt-subscribe-card\")\nclass MqttSubscribeCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _topic = \"\";\n\n  @state() private _subscribed?: () => void;\n\n  @state() private _messages: Array<{\n    id: number;\n    message: MQTTMessage;\n    payload: string;\n    time: Date;\n  }> = [];\n\n  private _messageCount = 0;\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._subscribed) {\n      this._subscribed();\n      this._subscribed = undefined;\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-card\n        header=${this.hass.localize(\"ui.panel.config.mqtt.description_listen\")}\n      >\n        <form>\n          <paper-input\n            .label=${this._subscribed\n              ? this.hass.localize(\"ui.panel.config.mqtt.listening_to\")\n              : this.hass.localize(\"ui.panel.config.mqtt.subscribe_to\")}\n            .disabled=${this._subscribed !== undefined}\n            .value=${this._topic}\n            @value-changed=${this._valueChanged}\n          ></paper-input>\n          <mwc-button\n            .disabled=${this._topic === \"\"}\n            @click=${this._handleSubmit}\n            type=\"submit\"\n          >\n            ${this._subscribed\n              ? this.hass.localize(\"ui.panel.config.mqtt.stop_listening\")\n              : this.hass.localize(\"ui.panel.config.mqtt.start_listening\")}\n          </mwc-button>\n        </form>\n        <div class=\"events\">\n          ${this._messages.map(\n            (msg) => html`\n              <div class=\"event\">\n                ${this.hass.localize(\n                  \"ui.panel.config.mqtt.message_received\",\n                  \"id\",\n                  msg.id,\n                  \"topic\",\n                  msg.message.topic,\n                  \"time\",\n                  formatTime(msg.time, this.hass!.locale)\n                )}\n                <pre>${msg.payload}</pre>\n                <div class=\"bottom\">\n                  QoS: ${msg.message.qos} - Retain:\n                  ${Boolean(msg.message.retain)}\n                </div>\n              </div>\n            `\n          )}\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    this._topic = ev.detail.value;\n  }\n\n  private async _handleSubmit(): Promise<void> {\n    if (this._subscribed) {\n      this._subscribed();\n      this._subscribed = undefined;\n    } else {\n      this._subscribed = await subscribeMQTTTopic(\n        this.hass!,\n        this._topic,\n        (message) => this._handleMessage(message)\n      );\n    }\n  }\n\n  private _handleMessage(message: MQTTMessage) {\n    const tail =\n      this._messages.length > 30 ? this._messages.slice(0, 29) : this._messages;\n    let payload: string;\n    try {\n      payload = JSON.stringify(JSON.parse(message.payload), null, 4);\n    } catch (err: any) {\n      payload = message.payload;\n    }\n    this._messages = [\n      {\n        payload,\n        message,\n        time: new Date(),\n        id: this._messageCount++,\n      },\n      ...tail,\n    ];\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      form {\n        display: block;\n        padding: 16px;\n      }\n      paper-input {\n        display: inline-block;\n        width: 200px;\n      }\n      .events {\n        margin: -16px 0;\n        padding: 0 16px;\n      }\n      .event {\n        border-bottom: 1px solid var(--divider-color);\n        padding-bottom: 16px;\n        margin: 16px 0;\n      }\n      .event:last-child {\n        border-bottom: 0;\n      }\n      .bottom {\n        font-size: 80%;\n        color: var(--secondary-text-color);\n      }\n      pre {\n        font-family: var(--code-font-family, monospace);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"mqtt-subscribe-card\": MqttSubscribeCard;\n  }\n}\n"],"names":[],"sourceRoot":""}