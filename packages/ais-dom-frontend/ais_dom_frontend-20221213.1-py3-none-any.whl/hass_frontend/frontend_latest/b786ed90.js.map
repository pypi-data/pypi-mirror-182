{"version":3,"file":"b786ed90.js","mappings":";AAsBA;AACA;;AAGA;;;;;;;AAQA;;AAGA;;AAIA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;ACjCA;AACA;AACA;;;;AAIA;AACA;AAMA;;;AAIA;;;;;;;AAiCA;;;;;;;;;;;;;;;;;;;;;;ACnEA;;;;ACiFA;AACA;;;AAGA;;;;;;;;AASA;AAQA;;AAEA;;AAGA;AACA;AACA;AACA;;;;AAMA;;;;;;AAaA;AACA;AACA;;AAGA;;;;AAOA;AACA;AACA;;;;;;;;AAQA;;;;;;AAOA;;AAEA;;AAEA;AAEA;;;;AAKA;AACA;AACA;;AAEA;AAGA;AAIA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AAsHA","sources":["webpack://home-assistant-frontend/./src/components/ha-chip.ts","webpack://home-assistant-frontend/./src/components/ha-date-input.ts","webpack://home-assistant-frontend/./src/components/ha-list-item.ts","webpack://home-assistant-frontend/./src/panels/calendar/ha-recurrence-rule-editor.ts"],"sourcesContent":["// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-chip\")\nexport class HaChip extends LitElement {\n  @property({ type: Boolean }) public hasIcon = false;\n\n  @property({ type: Boolean }) public hasTrailingIcon = false;\n\n  @property({ type: Boolean }) public noText = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"mdc-chip ${this.noText ? \"no-text\" : \"\"}\">\n        ${this.hasIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--leading\">\n              <slot name=\"icon\"></slot>\n            </div>`\n          : null}\n        <div class=\"mdc-chip__ripple\"></div>\n        <span role=\"gridcell\">\n          <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n            <span class=\"mdc-chip__text\"><slot></slot></span>\n          </span>\n        </span>\n        ${this.hasTrailingIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--trailing\">\n              <slot name=\"trailing-icon\"></slot>\n            </div>`\n          : null}\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .mdc-chip {\n        background-color: var(\n          --ha-chip-background-color,\n          rgba(var(--rgb-primary-text-color), 0.15)\n        );\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip.no-text {\n        padding: 0 10px;\n      }\n\n      .mdc-chip:hover {\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip__icon--leading,\n      .mdc-chip__icon--trailing {\n        --mdc-icon-size: 18px;\n        line-height: 14px;\n        color: var(--ha-chip-icon-color, var(--ha-chip-text-color));\n      }\n      .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,\n      .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden) {\n        margin-right: -4px;\n        margin-inline-start: -4px;\n        margin-inline-end: 4px;\n        direction: var(--direction);\n      }\n\n      span[role=\"gridcell\"] {\n        line-height: 14px;\n      }\n\n      :host {\n        outline: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chip\": HaChip;\n  }\n}\n","import { mdiCalendar } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { formatDateNumeric } from \"../common/datetime/format_date\";\nimport { firstWeekdayIndex } from \"../common/datetime/first_weekday\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-svg-icon\";\nimport \"./ha-textfield\";\n\nconst loadDatePickerDialog = () => import(\"./ha-dialog-date-picker\");\n\nexport interface datePickerDialogParams {\n  value?: string;\n  min?: string;\n  max?: string;\n  locale?: string;\n  firstWeekday?: number;\n  onChange: (value: string) => void;\n}\n\nconst showDatePickerDialog = (\n  element: HTMLElement,\n  dialogParams: datePickerDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"ha-dialog-date-picker\",\n    dialogImport: loadDatePickerDialog,\n    dialogParams,\n  });\n};\n@customElement(\"ha-date-input\")\nexport class HaDateInput extends LitElement {\n  @property({ attribute: false }) public locale!: HomeAssistant[\"locale\"];\n\n  @property() public value?: string;\n\n  @property() public min?: string;\n\n  @property() public max?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  render() {\n    return html`<ha-textfield\n      .label=${this.label}\n      .helper=${this.helper}\n      .disabled=${this.disabled}\n      iconTrailing\n      helperPersistent\n      readonly\n      @click=${this._openDialog}\n      .value=${this.value\n        ? formatDateNumeric(\n            new Date(`${this.value.split(\"T\")[0]}T00:00:00`),\n            this.locale\n          )\n        : \"\"}\n      .required=${this.required}\n    >\n      <ha-svg-icon slot=\"trailingIcon\" .path=${mdiCalendar}></ha-svg-icon>\n    </ha-textfield>`;\n  }\n\n  private _openDialog() {\n    if (this.disabled) {\n      return;\n    }\n    showDatePickerDialog(this, {\n      min: this.min || \"1970-01-01\",\n      max: this.max,\n      value: this.value,\n      onChange: (value) => this._valueChanged(value),\n      locale: this.locale.language,\n      firstWeekday: firstWeekdayIndex(this.locale),\n    });\n  }\n\n  private _valueChanged(value: string) {\n    if (this.value !== value) {\n      this.value = value;\n      fireEvent(this, \"change\");\n      fireEvent(this, \"value-changed\", { value });\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-svg-icon {\n        color: var(--secondary-text-color);\n      }\n      ha-textfield {\n        display: block;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-date-input\": HaDateInput;\n  }\n}\n","import { ListItemBase } from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-list-item\")\nexport class HaListItem extends ListItemBase {\n  static get styles(): CSSResultGroup {\n    return [\n      styles,\n      css`\n        :host {\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        span.material-icons:first-of-type {\n          margin-inline-start: 0px !important;\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            16px\n          ) !important;\n          direction: var(--direction);\n        }\n        span.material-icons:last-of-type {\n          margin-inline-start: auto !important;\n          margin-inline-end: 0px !important;\n          direction: var(--direction);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-list-item\": HaListItem;\n  }\n}\n","import type { SelectedDetail } from \"@material/mwc-list\";\nimport { css, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport type { Options, WeekdayStr } from \"rrule\";\nimport { ByWeekday, RRule, Weekday } from \"rrule\";\nimport { firstWeekdayIndex } from \"../../common/datetime/first_weekday\";\nimport { stopPropagation } from \"../../common/dom/stop_propagation\";\nimport \"../../components/ha-chip\";\nimport \"../../components/ha-list-item\";\nimport \"../../components/ha-select\";\nimport type { HaSelect } from \"../../components/ha-select\";\nimport \"../../components/ha-textfield\";\nimport { HomeAssistant } from \"../../types\";\nimport {\n  convertFrequency,\n  convertRepeatFrequency,\n  DEFAULT_COUNT,\n  getWeekdays,\n  intervalSuffix,\n  RepeatEnd,\n  RepeatFrequency,\n  ruleByWeekDay,\n  untilValue,\n  WEEKDAY_NAME,\n} from \"./recurrence\";\nimport \"../../components/ha-date-input\";\n\n@customElement(\"ha-recurrence-rule-editor\")\nexport class RecurrenceRuleEditor extends LitElement {\n  @property() public disabled = false;\n\n  @property() public value = \"\";\n\n  @property({ attribute: false }) public locale!: HomeAssistant[\"locale\"];\n\n  @property() public timezone?: string;\n\n  @state() private _computedRRule = \"\";\n\n  @state() private _freq?: RepeatFrequency = \"none\";\n\n  @state() private _interval = 1;\n\n  @state() private _weekday: Set<WeekdayStr> = new Set<WeekdayStr>();\n\n  @state() private _end: RepeatEnd = \"never\";\n\n  @state() private _count?: number;\n\n  @state() private _until?: Date;\n\n  private _allWeekdays?: WeekdayStr[];\n\n  protected willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n\n    if (changedProps.has(\"locale\")) {\n      this._allWeekdays = getWeekdays(firstWeekdayIndex(this.locale)).map(\n        (day: Weekday) => day.toString() as WeekdayStr\n      );\n    }\n\n    if (!changedProps.has(\"value\") || this._computedRRule === this.value) {\n      return;\n    }\n\n    this._interval = 1;\n    this._weekday.clear();\n    this._end = \"never\";\n    this._count = undefined;\n    this._until = undefined;\n\n    this._computedRRule = this.value;\n    if (this.value === \"\") {\n      this._freq = \"none\";\n      return;\n    }\n    let rrule: Partial<Options> | undefined;\n    try {\n      rrule = RRule.parseString(this.value);\n    } catch (ex) {\n      // unsupported rrule string\n      this._freq = undefined;\n      return;\n    }\n    this._freq = convertFrequency(rrule!.freq!);\n    if (rrule.interval) {\n      this._interval = rrule.interval;\n    }\n    if (\n      this._freq === \"weekly\" &&\n      rrule.byweekday &&\n      Array.isArray(rrule.byweekday)\n    ) {\n      this._weekday = new Set<WeekdayStr>(\n        rrule.byweekday.map(\n          (value: ByWeekday) => value.toString() as WeekdayStr\n        )\n      );\n    }\n    if (rrule.until) {\n      this._end = \"on\";\n      this._until = rrule.until;\n    } else if (rrule.count) {\n      this._end = \"after\";\n      this._count = rrule.count;\n    }\n  }\n\n  renderRepeat() {\n    return html`\n      <ha-select\n        id=\"freq\"\n        label=\"Repeat\"\n        @selected=${this._onRepeatSelected}\n        @closed=${stopPropagation}\n        fixedMenuPosition\n        naturalMenuWidth\n        .value=${this._freq}\n      >\n        <ha-list-item value=\"none\">None</ha-list-item>\n        <ha-list-item value=\"yearly\">Yearly</ha-list-item>\n        <ha-list-item value=\"monthly\">Monthly</ha-list-item>\n        <ha-list-item value=\"weekly\">Weekly</ha-list-item>\n        <ha-list-item value=\"daily\">Daily</ha-list-item>\n      </ha-select>\n    `;\n  }\n\n  renderMonthly() {\n    return this.renderInterval();\n  }\n\n  renderWeekly() {\n    return html`\n      ${this.renderInterval()}\n      <div class=\"weekdays\">\n        ${this._allWeekdays!.map(\n          (item) => html`\n            <ha-chip\n              .value=${item}\n              class=${classMap({ active: this._weekday.has(item) })}\n              @click=${this._onWeekdayToggle}\n              >${WEEKDAY_NAME[item]}</ha-chip\n            >\n          `\n        )}\n      </div>\n    `;\n  }\n\n  renderDaily() {\n    return this.renderInterval();\n  }\n\n  renderInterval() {\n    return html`\n      <ha-textfield\n        id=\"interval\"\n        label=\"Repeat interval\"\n        type=\"number\"\n        min=\"1\"\n        .value=${this._interval}\n        .suffix=${intervalSuffix(this._freq!)}\n        @change=${this._onIntervalChange}\n      ></ha-textfield>\n    `;\n  }\n\n  renderEnd() {\n    return html`\n      <ha-select\n        id=\"end\"\n        label=\"Ends\"\n        .value=${this._end}\n        @selected=${this._onEndSelected}\n        @closed=${stopPropagation}\n        fixedMenuPosition\n        naturalMenuWidth\n      >\n        <ha-list-item value=\"never\">Never</ha-list-item>\n        <ha-list-item value=\"after\">After</ha-list-item>\n        <ha-list-item value=\"on\">On</ha-list-item>\n      </ha-select>\n      ${this._end === \"after\"\n        ? html`\n            <ha-textfield\n              id=\"after\"\n              label=\"End after\"\n              type=\"number\"\n              min=\"1\"\n              .value=${this._count!}\n              suffix=\"ocurrences\"\n              @change=${this._onCountChange}\n            ></ha-textfield>\n          `\n        : html``}\n      ${this._end === \"on\"\n        ? html`\n            <ha-date-input\n              id=\"on\"\n              label=\"End on\"\n              .locale=${this.locale}\n              .value=${this._until!.toISOString()}\n              @value-changed=${this._onUntilChange}\n            ></ha-date-input>\n          `\n        : html``}\n    `;\n  }\n\n  render() {\n    return html`\n      ${this.renderRepeat()}\n      ${this._freq === \"monthly\" ? this.renderMonthly() : html``}\n      ${this._freq === \"weekly\" ? this.renderWeekly() : html``}\n      ${this._freq === \"daily\" ? this.renderDaily() : html``}\n      ${this._freq !== \"none\" ? this.renderEnd() : html``}\n    `;\n  }\n\n  private _onIntervalChange(e: Event) {\n    this._interval = (e.target! as any).value;\n    this._updateRule();\n  }\n\n  private _onRepeatSelected(e: CustomEvent<SelectedDetail<number>>) {\n    this._freq = (e.target as HaSelect).value as RepeatFrequency;\n\n    if (this._freq === \"yearly\") {\n      this._interval = 1;\n    }\n    if (this._freq !== \"weekly\") {\n      this._weekday.clear();\n    }\n    e.stopPropagation();\n    this._updateRule();\n  }\n\n  private _onWeekdayToggle(e: MouseEvent) {\n    const target = e.currentTarget as any;\n    const value = target.value as WeekdayStr;\n    if (!target.classList.contains(\"active\")) {\n      this._weekday.add(value);\n    } else {\n      this._weekday.delete(value);\n    }\n    this._updateRule();\n  }\n\n  private _onEndSelected(e: CustomEvent<SelectedDetail<number>>) {\n    const end = (e.target as HaSelect).value as RepeatEnd;\n    if (end === this._end) {\n      return;\n    }\n    this._end = end;\n\n    switch (this._end) {\n      case \"after\":\n        this._count = DEFAULT_COUNT[this._freq!];\n        this._until = undefined;\n        break;\n      case \"on\":\n        this._count = undefined;\n        this._until = untilValue(this._freq!);\n        break;\n      default:\n        this._count = undefined;\n        this._until = undefined;\n    }\n    e.stopPropagation();\n    this._updateRule();\n  }\n\n  private _onCountChange(e: Event) {\n    this._count = (e.target! as any).value;\n    this._updateRule();\n  }\n\n  private _onUntilChange(e: CustomEvent) {\n    e.stopPropagation();\n    this._until = new Date(e.detail.value);\n    this._updateRule();\n  }\n\n  private _computeRRule() {\n    if (this._freq === undefined || this._freq === \"none\") {\n      return \"\";\n    }\n    const options = {\n      freq: convertRepeatFrequency(this._freq!)!,\n      interval: this._interval > 1 ? this._interval : undefined,\n      byweekday: ruleByWeekDay(this._weekday),\n      count: this._count,\n      until: this._until,\n      tzid: this.timezone,\n    };\n    const contentline = RRule.optionsToString(options);\n    return contentline.slice(6); // Strip \"RRULE:\" prefix\n  }\n\n  // Fire event with an rfc5546 recurrence rule string value\n  private _updateRule() {\n    const rule = this._computeRRule();\n    if (rule === this._computedRRule) {\n      return;\n    }\n    this._computedRRule = rule;\n\n    this.dispatchEvent(\n      new CustomEvent(\"value-changed\", {\n        detail: { value: rule },\n      })\n    );\n  }\n\n  static styles = css`\n    ha-textfield,\n    ha-select {\n      display: block;\n      margin-bottom: 16px;\n    }\n    .weekdays {\n      display: flex;\n      justify-content: space-between;\n      margin-bottom: 16px;\n    }\n    ha-textfield:last-child,\n    ha-select:last-child,\n    .weekdays:last-child {\n      margin-bottom: 0;\n    }\n\n    .active {\n      --ha-chip-background-color: var(--primary-color);\n      --ha-chip-text-color: var(--text-primary-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-recurrence-rule-editor\": RecurrenceRuleEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}