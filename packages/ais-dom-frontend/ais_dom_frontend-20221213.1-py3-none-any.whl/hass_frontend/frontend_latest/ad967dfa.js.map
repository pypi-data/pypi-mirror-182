{"version":3,"file":"ad967dfa.js","mappings":";;AAuEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAMA;;AAYA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACUA;ACfA;;;;AA2FA;;;AAGA;;AAEA;;;AAKA;AAxIA;;;;;;;AAgJA;AAGA;;;AAIA;AACA;AACA;;;;;AAMA;;AAEA;AACA;;;;;;AAMA;AAGA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;;;AAGA;;;;AAIA;AACA;;;;;;AAMA;;;;AAMA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;;;;;AAOA;;;;AAIA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;;;;AAMA;AACA;AACA;AACA;;;;AAIA;;;AAIA;AACA;;AAEA;;AAEA;;;AAIA;AACA;;AAEA;;AAEA;;;;AAKA;AACA;;AAEA;;AAIA;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8SA","sources":["webpack://home-assistant-frontend/mwc-textarea-base.ts","webpack://home-assistant-frontend/./src/components/ha-textarea.ts","webpack://home-assistant-frontend/./src/panels/calendar/dialog-calendar-event-editor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport {TextAreaCharCounter, TextFieldBase, TextFieldInputMode, TextFieldType} from '@material/mwc-textfield/mwc-textfield-base';\nimport {ComplexAttributeConverter, html, TemplateResult} from 'lit';\nimport {property, query} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\nimport {live} from 'lit/directives/live.js';\n\nexport {TextAreaCharCounter, TextFieldInputMode, TextFieldType};\n\nconst booleanOrStringConverter: ComplexAttributeConverter<boolean|string> = {\n  fromAttribute(value) {\n    if (value === null) {\n      return false;\n    } else if (value === '') {\n      return true;\n    }\n\n    return value;\n  },\n  toAttribute(value) {\n    if (typeof value === 'boolean') {\n      return value ? '' : null;\n    }\n\n    return value;\n  }\n};\n\n/** @soyCompatible */\nexport abstract class TextAreaBase extends TextFieldBase {\n  @query('textarea') protected override formElement!: HTMLInputElement;\n\n  @property({type: Number}) rows = 2;\n\n  @property({type: Number}) cols = 20;\n\n  @property({converter: booleanOrStringConverter})\n  override charCounter: boolean|TextAreaCharCounter = false;\n\n  /** @soyTemplate */\n  override render(): TemplateResult {\n    const shouldRenderCharCounter = this.charCounter && this.maxLength !== -1;\n    const shouldRenderInternalCharCounter =\n        shouldRenderCharCounter && this.charCounter === 'internal';\n    const shouldRenderExternalCharCounter =\n        shouldRenderCharCounter && !shouldRenderInternalCharCounter;\n    const shouldRenderHelperText = !!this.helper || !!this.validationMessage ||\n        shouldRenderExternalCharCounter;\n\n    /** @classMap */\n    const classes = {\n      'mdc-text-field--disabled': this.disabled,\n      'mdc-text-field--no-label': !this.label,\n      'mdc-text-field--filled': !this.outlined,\n      'mdc-text-field--outlined': this.outlined,\n      'mdc-text-field--end-aligned': this.endAligned,\n      'mdc-text-field--with-internal-counter': shouldRenderInternalCharCounter,\n    };\n\n    return html`\n      <label class=\"mdc-text-field mdc-text-field--textarea ${\n        classMap(classes)}\">\n        ${this.renderRipple()}\n        ${this.outlined ? this.renderOutline() : this.renderLabel()}\n        ${this.renderInput()}\n        ${this.renderCharCounter(shouldRenderInternalCharCounter)}\n        ${this.renderLineRipple()}\n      </label>\n      ${\n        this.renderHelperText(\n            shouldRenderHelperText, shouldRenderExternalCharCounter)}\n    `;\n  }\n\n  /** @soyTemplate */\n  protected override renderInput(): TemplateResult {\n    const ariaLabelledbyOrUndef = !!this.label ? 'label' : undefined;\n    const minOrUndef = this.minLength === -1 ? undefined : this.minLength;\n    const maxOrUndef = this.maxLength === -1 ? undefined : this.maxLength;\n    const autocapitalizeOrUndef = this.autocapitalize ?\n        (this.autocapitalize as 'off' | 'none' | 'on' | 'sentences' | 'words' |\n         'characters' | 'off' | 'none' | 'on' | 'sentences' | 'words' |\n         'characters') :\n        undefined;\n\n    return html`\n      <textarea\n          aria-labelledby=${ifDefined(ariaLabelledbyOrUndef)}\n          class=\"mdc-text-field__input\"\n          .value=\"${live(this.value) as unknown as string}\"\n          rows=\"${this.rows}\"\n          cols=\"${this.cols}\"\n          ?disabled=\"${this.disabled}\"\n          placeholder=\"${this.placeholder}\"\n          ?required=\"${this.required}\"\n          ?readonly=\"${this.readOnly}\"\n          minlength=\"${ifDefined(minOrUndef)}\"\n          maxlength=\"${ifDefined(maxOrUndef)}\"\n          name=\"${ifDefined(this.name === '' ? undefined : this.name)}\"\n          inputmode=\"${ifDefined(this.inputMode)}\"\n          autocapitalize=\"${ifDefined(autocapitalizeOrUndef)}\"\n          @input=\"${this.handleInputChange}\"\n          @blur=\"${this.onInputBlur}\">\n      </textarea>`;\n  }\n}\n","import { TextAreaBase } from \"@material/mwc-textarea/mwc-textarea-base\";\nimport { styles as textfieldStyles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { styles as textareaStyles } from \"@material/mwc-textarea/mwc-textarea.css\";\nimport { css, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textarea\")\nexport class HaTextArea extends TextAreaBase {\n  @property({ type: Boolean, reflect: true }) autogrow = false;\n\n  updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (this.autogrow && changedProperties.has(\"value\")) {\n      this.mdcRoot.dataset.value = this.value + '=\\u200B\"'; // add a zero-width space to correctly wrap\n    }\n  }\n\n  static override styles = [\n    textfieldStyles,\n    textareaStyles,\n    css`\n      :host([autogrow]) .mdc-text-field {\n        position: relative;\n        min-height: 74px;\n        min-width: 178px;\n        max-height: 200px;\n      }\n      :host([autogrow]) .mdc-text-field:after {\n        content: attr(data-value);\n        margin-top: 23px;\n        margin-bottom: 9px;\n        line-height: 1.5rem;\n        min-height: 42px;\n        padding: 0px 32px 0 16px;\n        letter-spacing: var(\n          --mdc-typography-subtitle1-letter-spacing,\n          0.009375em\n        );\n        visibility: hidden;\n        white-space: pre-wrap;\n      }\n      :host([autogrow]) .mdc-text-field__input {\n        position: absolute;\n        height: calc(100% - 32px);\n      }\n      :host([autogrow]) .mdc-text-field.mdc-text-field--no-label:after {\n        margin-top: 16px;\n        margin-bottom: 16px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textarea\": HaTextArea;\n  }\n}\n","import \"@material/mwc-button\";\nimport { mdiClose } from \"@mdi/js\";\nimport { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport {\n  addDays,\n  addHours,\n  addMilliseconds,\n  differenceInMilliseconds,\n  startOfHour,\n} from \"date-fns/esm\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { isDate } from \"../../common/string/is_date\";\nimport \"../../components/ha-date-input\";\nimport \"../../components/ha-textarea\";\nimport \"../../components/ha-time-input\";\nimport {\n  Calendar,\n  CalendarEventMutableParams,\n  createCalendarEvent,\n  deleteCalendarEvent,\n} from \"../../data/calendar\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../lovelace/components/hui-generic-entity-row\";\nimport \"./ha-recurrence-rule-editor\";\nimport { showConfirmEventDialog } from \"./show-confirm-event-dialog-box\";\nimport { CalendarEventDetailDialogParams } from \"./show-dialog-calendar-event-detail\";\nimport { CalendarEventEditDialogParams } from \"./show-dialog-calendar-event-editor\";\n\nconst rowRenderer: ComboBoxLitRenderer<Calendar> = (\n  item\n) => html`<mwc-list-item>\n  <span>${item.name}</span>\n</mwc-list-item>`;\n\n@customElement(\"dialog-calendar-event-editor\")\nclass DialogCalendarEventEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _error?: string;\n\n  @state() private _info?: string;\n\n  @state() private _params?: CalendarEventDetailDialogParams;\n\n  @state() private _calendars: Calendar[] = [];\n\n  @state() private _calendarId?: string;\n\n  @state() private _summary = \"\";\n\n  @state() private _description = \"\";\n\n  @state() private _rrule?: string;\n\n  @state() private _allDay = false;\n\n  @state() private _dtstart?: Date; // In sync with _data.dtstart\n\n  @state() private _dtend?: Date; // Inclusive for display, in sync with _data.dtend (exclusive)\n\n  @state() private _submitting = false;\n\n  public showDialog(params: CalendarEventEditDialogParams): void {\n    this._error = undefined;\n    this._info = undefined;\n    this._params = params;\n    this._calendars = params.calendars;\n    this._calendarId = params.calendarId || this._calendars[0].entity_id;\n    if (params.entry) {\n      const entry = params.entry!;\n      this._allDay = isDate(entry.dtstart);\n      this._summary = entry.summary;\n      this._rrule = entry.rrule;\n      if (this._allDay) {\n        this._dtstart = new Date(entry.dtstart);\n        // Calendar event end dates are exclusive, but not shown that way in the UI. The\n        // reverse happens when persisting the event.\n        this._dtend = addDays(new Date(entry.dtend), -1);\n      } else {\n        this._dtstart = new Date(entry.dtstart);\n        this._dtend = new Date(entry.dtend);\n      }\n    } else {\n      this._allDay = false;\n      // If we have been provided a selected date (e.g. based on the currently displayed\n      // day in a calendar view), use that as the starting value.\n      this._dtstart = startOfHour(\n        params.selectedDate ? params.selectedDate : new Date()\n      );\n      this._dtend = addHours(this._dtstart, 1);\n    }\n  }\n\n  public closeDialog(): void {\n    if (!this._params) {\n      return;\n    }\n    this._calendars = [];\n    this._calendarId = undefined;\n    this._params = undefined;\n    this._dtstart = undefined;\n    this._dtend = undefined;\n    this._summary = \"\";\n    this._description = \"\";\n    this._rrule = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    const isCreate = this._params.entry === undefined;\n\n    const { startDate, startTime, endDate, endTime } = this._getLocaleStrings(\n      this._dtstart,\n      this._dtend\n    );\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${html`\n          <div class=\"header_title\">\n            ${isCreate\n              ? this.hass.localize(\"ui.components.calendar.event.add\")\n              : this._summary}\n          </div>\n          <ha-icon-button\n            .label=${this.hass.localize(\"ui.dialogs.generic.close\")}\n            .path=${mdiClose}\n            dialogAction=\"close\"\n            class=\"header_button\"\n          ></ha-icon-button>\n        `}\n      >\n        <div class=\"content\">\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n            : \"\"}\n          ${this._info\n            ? html`<ha-alert\n                alert-type=\"info\"\n                dismissable\n                @alert-dismissed-clicked=${this._clearInfo}\n                >${this._info}</ha-alert\n              >`\n            : \"\"}\n\n          <ha-textfield\n            class=\"summary\"\n            name=\"summary\"\n            .label=${this.hass.localize(\"ui.components.calendar.event.summary\")}\n            required\n            @change=${this._handleSummaryChanged}\n            error-message=${this.hass.localize(\"ui.common.error_required\")}\n            dialogInitialFocus\n          ></ha-textfield>\n          <ha-textarea\n            class=\"description\"\n            name=\"description\"\n            .label=${this.hass.localize(\n              \"ui.components.calendar.event.description\"\n            )}\n            @change=${this._handleDescriptionChanged}\n            autogrow\n          ></ha-textarea>\n          <ha-combo-box\n            name=\"calendar\"\n            .hass=${this.hass}\n            .label=${this.hass.localize(\"ui.components.calendar.label\")}\n            .value=${this._calendarId!}\n            .renderer=${rowRenderer}\n            .items=${this._calendars}\n            item-id-path=\"entity_id\"\n            item-value-path=\"entity_id\"\n            item-label-path=\"name\"\n            required\n            @value-changed=${this._handleCalendarChanged}\n          ></ha-combo-box>\n          <ha-formfield\n            .label=${this.hass.localize(\"ui.components.calendar.event.all_day\")}\n          >\n            <ha-switch\n              id=\"all_day\"\n              .checked=${this._allDay}\n              @change=${this._allDayToggleChanged}\n            ></ha-switch>\n          </ha-formfield>\n\n          <div>\n            <span class=\"label\"\n              >${this.hass.localize(\n                \"ui.components.calendar.event.start\"\n              )}:</span\n            >\n            <div class=\"flex\">\n              <ha-date-input\n                .value=${startDate}\n                .locale=${this.hass.locale}\n                @value-changed=${this._startDateChanged}\n              ></ha-date-input>\n              ${!this._allDay\n                ? html`<ha-time-input\n                    .value=${startTime}\n                    .locale=${this.hass.locale}\n                    @value-changed=${this._startTimeChanged}\n                  ></ha-time-input>`\n                : \"\"}\n            </div>\n          </div>\n          <div>\n            <span class=\"label\"\n              >${this.hass.localize(\"ui.components.calendar.event.end\")}:</span\n            >\n            <div class=\"flex\">\n              <ha-date-input\n                .value=${endDate}\n                .min=${startDate}\n                .locale=${this.hass.locale}\n                @value-changed=${this._endDateChanged}\n              ></ha-date-input>\n              ${!this._allDay\n                ? html`<ha-time-input\n                    .value=${endTime}\n                    .locale=${this.hass.locale}\n                    @value-changed=${this._endTimeChanged}\n                  ></ha-time-input>`\n                : \"\"}\n            </div>\n          </div>\n          <ha-recurrence-rule-editor\n            .locale=${this.hass.locale}\n            .timezone=${this.hass.config.time_zone}\n            .value=${this._rrule || \"\"}\n            @value-changed=${this._handleRRuleChanged}\n          >\n          </ha-recurrence-rule-editor>\n        </div>\n        ${isCreate\n          ? html`\n              <mwc-button\n                slot=\"primaryAction\"\n                @click=${this._createEvent}\n                .disabled=${this._submitting}\n              >\n                ${this.hass.localize(\"ui.components.calendar.event.add\")}\n              </mwc-button>\n            `\n          : html`\n              <mwc-button\n                slot=\"primaryAction\"\n                @click=${this._saveEvent}\n                .disabled=${this._submitting}\n              >\n                ${this.hass.localize(\"ui.components.calendar.event.save\")}\n              </mwc-button>\n              ${this._params.canDelete\n                ? html`\n                    <mwc-button\n                      slot=\"secondaryAction\"\n                      class=\"warning\"\n                      @click=${this._deleteEvent}\n                      .disabled=${this._submitting}\n                    >\n                      ${this.hass.localize(\n                        \"ui.components.calendar.event.delete\"\n                      )}\n                    </mwc-button>\n                  `\n                : \"\"}\n            `}\n      </ha-dialog>\n    `;\n  }\n\n  private _getLocaleStrings = memoizeOne((startDate?: Date, endDate?: Date) =>\n    // en-CA locale used for date format YYYY-MM-DD\n    // en-GB locale used for 24h time format HH:MM:SS\n    {\n      const timeZone = this.hass.config.time_zone;\n      return {\n        startDate: startDate?.toLocaleDateString(\"en-CA\", { timeZone }),\n        startTime: startDate?.toLocaleTimeString(\"en-GB\", { timeZone }),\n        endDate: endDate?.toLocaleDateString(\"en-CA\", { timeZone }),\n        endTime: endDate?.toLocaleTimeString(\"en-GB\", { timeZone }),\n      };\n    }\n  );\n\n  private _clearInfo() {\n    this._info = undefined;\n  }\n\n  private _handleSummaryChanged(ev) {\n    this._summary = ev.target.value;\n  }\n\n  private _handleDescriptionChanged(ev) {\n    this._description = ev.target.value;\n  }\n\n  private _handleRRuleChanged(ev) {\n    this._rrule = ev.detail.value;\n  }\n\n  private _allDayToggleChanged(ev) {\n    this._allDay = ev.target.checked;\n  }\n\n  private _startDateChanged(ev: CustomEvent) {\n    // Store previous event duration\n    const duration = differenceInMilliseconds(this._dtend!, this._dtstart!);\n\n    this._dtstart = new Date(\n      ev.detail.value +\n        \"T\" +\n        this._dtstart!.toLocaleTimeString(\"en-GB\", {\n          timeZone: this.hass.config.time_zone,\n        })\n    );\n\n    // Prevent that the end time can be before the start time. Try to keep the\n    // duration the same.\n    if (this._dtend! <= this._dtstart!) {\n      const newEnd = addMilliseconds(this._dtstart, duration);\n      // en-CA locale used for date format YYYY-MM-DD\n      // en-GB locale used for 24h time format HH:MM:SS\n      this._dtend = new Date(\n        `${newEnd.toLocaleDateString(\"en-CA\", {\n          timeZone: this.hass.config.time_zone,\n        })}T${newEnd.toLocaleTimeString(\"en-GB\", {\n          timeZone: this.hass.config.time_zone,\n        })}`\n      );\n      this._info = this.hass.localize(\n        \"ui.components.calendar.event.end_auto_adjusted\"\n      );\n    }\n  }\n\n  private _endDateChanged(ev: CustomEvent) {\n    this._dtend = new Date(\n      ev.detail.value +\n        \"T\" +\n        this._dtend!.toLocaleTimeString(\"en-GB\", {\n          timeZone: this.hass.config.time_zone,\n        })\n    );\n  }\n\n  private _startTimeChanged(ev: CustomEvent) {\n    // Store previous event duration\n    const duration = differenceInMilliseconds(this._dtend!, this._dtstart!);\n\n    this._dtstart = new Date(\n      this._dtstart!.toLocaleDateString(\"en-CA\", {\n        timeZone: this.hass.config.time_zone,\n      }) +\n        \"T\" +\n        ev.detail.value\n    );\n\n    // Prevent that the end time can be before the start time. Try to keep the\n    // duration the same.\n    if (this._dtend! <= this._dtstart!) {\n      const newEnd = addMilliseconds(new Date(this._dtstart), duration);\n      this._dtend = new Date(\n        `${newEnd.toLocaleDateString(\"en-CA\", {\n          timeZone: this.hass.config.time_zone,\n        })}T${newEnd.toLocaleTimeString(\"en-GB\", {\n          timeZone: this.hass.config.time_zone,\n        })}`\n      );\n      this._info = this.hass.localize(\n        \"ui.components.calendar.event.end_auto_adjusted\"\n      );\n    }\n  }\n\n  private _endTimeChanged(ev: CustomEvent) {\n    this._dtend = new Date(\n      this._dtend!.toLocaleDateString(\"en-CA\", {\n        timeZone: this.hass.config.time_zone,\n      }) +\n        \"T\" +\n        ev.detail.value\n    );\n  }\n\n  private _calculateData() {\n    const { startDate, startTime, endDate, endTime } = this._getLocaleStrings(\n      this._dtstart,\n      this._dtend\n    );\n    const data: CalendarEventMutableParams = {\n      summary: this._summary,\n      description: this._description,\n      rrule: this._rrule,\n      dtstart: \"\",\n      dtend: \"\",\n    };\n    if (this._allDay) {\n      data.dtstart = startDate!;\n      // End date/time is exclusive when persisted\n      data.dtend = addDays(new Date(this._dtend!), 1).toLocaleDateString(\n        \"en-CA\"\n      );\n    } else {\n      data.dtstart = `${startDate}T${startTime}`;\n      data.dtend = `${endDate}T${endTime}`;\n    }\n    return data;\n  }\n\n  private _handleCalendarChanged(ev: CustomEvent) {\n    this._calendarId = ev.detail.value;\n  }\n\n  private async _createEvent() {\n    if (!this._summary || !this._calendarId) {\n      this._error = this.hass.localize(\n        \"ui.components.calendar.event.not_all_required_fields\"\n      );\n      return;\n    }\n\n    if (this._dtend! <= this._dtstart!) {\n      this._error = this.hass.localize(\n        \"ui.components.calendar.event.invalid_duration\"\n      );\n      return;\n    }\n\n    this._submitting = true;\n    try {\n      await createCalendarEvent(\n        this.hass!,\n        this._calendarId!,\n        this._calculateData()\n      );\n    } catch (err: any) {\n      this._error = err ? err.message : \"Unknown error\";\n      return;\n    } finally {\n      this._submitting = false;\n    }\n    await this._params!.updated();\n    this.closeDialog();\n  }\n\n  private async _saveEvent() {\n    // to be implemented\n  }\n\n  private async _deleteEvent() {\n    this._submitting = true;\n    const entry = this._params!.entry!;\n    const range = await showConfirmEventDialog(this, {\n      title: this.hass.localize(\n        \"ui.components.calendar.event.confirm_delete.delete\"\n      ),\n      text: entry.recurrence_id\n        ? this.hass.localize(\n            \"ui.components.calendar.event.confirm_delete.recurring_prompt\"\n          )\n        : this.hass.localize(\n            \"ui.components.calendar.event.confirm_delete.prompt\"\n          ),\n      confirmText: entry.recurrence_id\n        ? this.hass.localize(\n            \"ui.components.calendar.event.confirm_delete.delete_this\"\n          )\n        : this.hass.localize(\n            \"ui.components.calendar.event.confirm_delete.delete\"\n          ),\n      confirmFutureText: entry.recurrence_id\n        ? this.hass.localize(\n            \"ui.components.calendar.event.confirm_delete.delete_future\"\n          )\n        : undefined,\n    });\n    if (range === undefined) {\n      // Cancel\n      this._submitting = false;\n      return;\n    }\n    try {\n      await deleteCalendarEvent(\n        this.hass!,\n        this._calendarId!,\n        entry.uid!,\n        entry.recurrence_id || \"\",\n        range!\n      );\n    } catch (err: any) {\n      this._error = err ? err.message : \"Unknown error\";\n      return;\n    } finally {\n      this._submitting = false;\n    }\n    await this._params!.updated();\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        state-info {\n          line-height: 40px;\n        }\n        ha-alert {\n          display: block;\n          margin-bottom: 16px;\n        }\n        ha-textfield,\n        ha-textarea {\n          display: block;\n        }\n        ha-textarea {\n          margin-bottom: 16px;\n        }\n        ha-formfield {\n          display: block;\n          padding: 16px 0;\n        }\n        ha-date-input {\n          flex-grow: 1;\n        }\n        ha-time-input {\n          margin-left: 16px;\n        }\n        ha-recurrence-rule-editor {\n          display: block;\n          margin-top: 16px;\n        }\n        .flex {\n          display: flex;\n          justify-content: space-between;\n        }\n        .label {\n          font-size: 12px;\n          font-weight: 500;\n          color: var(--input-label-ink-color);\n        }\n        .date-range-details-content {\n          display: inline-block;\n        }\n        ha-rrule {\n          display: block;\n        }\n        ha-combo-box {\n          display: block;\n        }\n        ha-svg-icon {\n          width: 40px;\n          margin-right: 8px;\n          margin-inline-end: 16px;\n          margin-inline-start: initial;\n          direction: var(--direction);\n          vertical-align: top;\n        }\n        ha-rrule {\n          display: inline-block;\n        }\n        .key {\n          display: inline-block;\n          vertical-align: top;\n        }\n        .value {\n          display: inline-block;\n          vertical-align: top;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-calendar-event-editor\": DialogCalendarEventEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}