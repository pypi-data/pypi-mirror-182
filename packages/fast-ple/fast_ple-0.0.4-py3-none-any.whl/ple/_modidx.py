# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/ple/',
                'doc_host': 'https://anhvth.github.io',
                'git_url': 'https://github.com/anhvth/pl_exp/',
                'lib_path': 'ple'},
  'syms': { 'ple.all': {},
            'ple.base_exp': { 'ple.base_exp.BaseExp': ('base_exp.html#baseexp', 'ple/base_exp.py'),
                              'ple.base_exp.BaseExp.__init__': ('base_exp.html#baseexp.__init__', 'ple/base_exp.py'),
                              'ple.base_exp.BaseExp.__repr__': ('base_exp.html#baseexp.__repr__', 'ple/base_exp.py'),
                              'ple.base_exp.BaseExp.get_data_loader': ('base_exp.html#baseexp.get_data_loader', 'ple/base_exp.py'),
                              'ple.base_exp.BaseExp.get_lr_scheduler': ('base_exp.html#baseexp.get_lr_scheduler', 'ple/base_exp.py'),
                              'ple.base_exp.BaseExp.get_model': ('base_exp.html#baseexp.get_model', 'ple/base_exp.py'),
                              'ple.base_exp.BaseExp.get_optimizer': ('base_exp.html#baseexp.get_optimizer', 'ple/base_exp.py'),
                              'ple.base_exp.BaseExp.get_trainer': ('base_exp.html#baseexp.get_trainer', 'ple/base_exp.py'),
                              'ple.base_exp.BaseExp.merge': ('base_exp.html#baseexp.merge', 'ple/base_exp.py'),
                              'ple.base_exp.BaseExp.plot_lr_sche': ('base_exp.html#baseexp.plot_lr_sche', 'ple/base_exp.py')},
            'ple.datasets': { 'ple.datasets.VideoFrameDataset': ('datasets.html#videoframedataset', 'ple/datasets.py'),
                              'ple.datasets.VideoFrameDataset.__getitem__': ( 'datasets.html#videoframedataset.__getitem__',
                                                                              'ple/datasets.py'),
                              'ple.datasets.VideoFrameDataset.__init__': ('datasets.html#videoframedataset.__init__', 'ple/datasets.py'),
                              'ple.datasets.VideoFrameDataset.__len__': ('datasets.html#videoframedataset.__len__', 'ple/datasets.py'),
                              'ple.datasets.VideoFrameDataset.check_if_extracted': ( 'datasets.html#videoframedataset.check_if_extracted',
                                                                                     'ple/datasets.py'),
                              'ple.datasets.VideoFrameDataset.get_images': ( 'datasets.html#videoframedataset.get_images',
                                                                             'ple/datasets.py')},
            'ple.lit_model': { 'ple.lit_model.CosineLRScheduler': ('lit_model.html#cosinelrscheduler', 'ple/lit_model.py'),
                               'ple.lit_model.CosineLRScheduler.__init__': ( 'lit_model.html#cosinelrscheduler.__init__',
                                                                             'ple/lit_model.py'),
                               'ple.lit_model.CosineLRScheduler._get_lr': ('lit_model.html#cosinelrscheduler._get_lr', 'ple/lit_model.py'),
                               'ple.lit_model.CosineLRScheduler.get_cycle_length': ( 'lit_model.html#cosinelrscheduler.get_cycle_length',
                                                                                     'ple/lit_model.py'),
                               'ple.lit_model.CosineLRScheduler.get_epoch_values': ( 'lit_model.html#cosinelrscheduler.get_epoch_values',
                                                                                     'ple/lit_model.py'),
                               'ple.lit_model.CosineLRScheduler.get_update_values': ( 'lit_model.html#cosinelrscheduler.get_update_values',
                                                                                      'ple/lit_model.py'),
                               'ple.lit_model.LitModel': ('lit_model.html#litmodel', 'ple/lit_model.py'),
                               'ple.lit_model.LitModel.__init__': ('lit_model.html#litmodel.__init__', 'ple/lit_model.py'),
                               'ple.lit_model.LitModel.configure_optimizers': ( 'lit_model.html#litmodel.configure_optimizers',
                                                                                'ple/lit_model.py'),
                               'ple.lit_model.LitModel.forward': ('lit_model.html#litmodel.forward', 'ple/lit_model.py'),
                               'ple.lit_model.LitModel.training_step': ('lit_model.html#litmodel.training_step', 'ple/lit_model.py'),
                               'ple.lit_model.LitModel.validation_step': ('lit_model.html#litmodel.validation_step', 'ple/lit_model.py'),
                               'ple.lit_model.Scheduler': ('lit_model.html#scheduler', 'ple/lit_model.py'),
                               'ple.lit_model.Scheduler.__init__': ('lit_model.html#scheduler.__init__', 'ple/lit_model.py'),
                               'ple.lit_model.Scheduler._add_noise': ('lit_model.html#scheduler._add_noise', 'ple/lit_model.py'),
                               'ple.lit_model.Scheduler._calculate_noise': ( 'lit_model.html#scheduler._calculate_noise',
                                                                             'ple/lit_model.py'),
                               'ple.lit_model.Scheduler._is_apply_noise': ('lit_model.html#scheduler._is_apply_noise', 'ple/lit_model.py'),
                               'ple.lit_model.Scheduler.get_epoch_values': ( 'lit_model.html#scheduler.get_epoch_values',
                                                                             'ple/lit_model.py'),
                               'ple.lit_model.Scheduler.get_update_values': ( 'lit_model.html#scheduler.get_update_values',
                                                                              'ple/lit_model.py'),
                               'ple.lit_model.Scheduler.load_state_dict': ('lit_model.html#scheduler.load_state_dict', 'ple/lit_model.py'),
                               'ple.lit_model.Scheduler.state_dict': ('lit_model.html#scheduler.state_dict', 'ple/lit_model.py'),
                               'ple.lit_model.Scheduler.step': ('lit_model.html#scheduler.step', 'ple/lit_model.py'),
                               'ple.lit_model.Scheduler.step_update': ('lit_model.html#scheduler.step_update', 'ple/lit_model.py'),
                               'ple.lit_model.Scheduler.update_groups': ('lit_model.html#scheduler.update_groups', 'ple/lit_model.py'),
                               'ple.lit_model.fn_schedule_cosine_with_warmpup_decay_timm': ( 'lit_model.html#fn_schedule_cosine_with_warmpup_decay_timm',
                                                                                             'ple/lit_model.py'),
                               'ple.lit_model.fn_schedule_linear_with_warmup': ( 'lit_model.html#fn_schedule_linear_with_warmup',
                                                                                 'ple/lit_model.py'),
                               'ple.lit_model.get_scheduler': ('lit_model.html#get_scheduler', 'ple/lit_model.py'),
                               'ple.lit_model.plot_lr_step_schedule': ('lit_model.html#plot_lr_step_schedule', 'ple/lit_model.py'),
                               'ple.lit_model.print_example': ('lit_model.html#print_example', 'ple/lit_model.py')},
            'ple.loss': { 'ple.loss.BinaryFocalLoss': ('loss.html#binaryfocalloss', 'ple/loss.py'),
                          'ple.loss.BinaryFocalLoss.__init__': ('loss.html#binaryfocalloss.__init__', 'ple/loss.py'),
                          'ple.loss.BinaryFocalLoss.forward': ('loss.html#binaryfocalloss.forward', 'ple/loss.py'),
                          'ple.loss.FocalLoss': ('loss.html#focalloss', 'ple/loss.py'),
                          'ple.loss.FocalLoss.__init__': ('loss.html#focalloss.__init__', 'ple/loss.py'),
                          'ple.loss.FocalLoss.forward': ('loss.html#focalloss.forward', 'ple/loss.py'),
                          'ple.loss.py_sigmoid_focal_loss': ('loss.html#py_sigmoid_focal_loss', 'ple/loss.py'),
                          'ple.loss.reduce_loss': ('loss.html#reduce_loss', 'ple/loss.py'),
                          'ple.loss.sigmoid_focal_loss': ('loss.html#sigmoid_focal_loss', 'ple/loss.py'),
                          'ple.loss.weight_reduce_loss': ('loss.html#weight_reduce_loss', 'ple/loss.py')},
            'ple.persistance': { 'ple.persistance.EasyDict': ('persistance.html#easydict', 'ple/persistance.py'),
                                 'ple.persistance.EasyDict.__delattr__': ('persistance.html#easydict.__delattr__', 'ple/persistance.py'),
                                 'ple.persistance.EasyDict.__getattr__': ('persistance.html#easydict.__getattr__', 'ple/persistance.py'),
                                 'ple.persistance.EasyDict.__setattr__': ('persistance.html#easydict.__setattr__', 'ple/persistance.py'),
                                 'ple.persistance.Logger': ('persistance.html#logger', 'ple/persistance.py'),
                                 'ple.persistance.Logger.__enter__': ('persistance.html#logger.__enter__', 'ple/persistance.py'),
                                 'ple.persistance.Logger.__exit__': ('persistance.html#logger.__exit__', 'ple/persistance.py'),
                                 'ple.persistance.Logger.__init__': ('persistance.html#logger.__init__', 'ple/persistance.py'),
                                 'ple.persistance.Logger.close': ('persistance.html#logger.close', 'ple/persistance.py'),
                                 'ple.persistance.Logger.flush': ('persistance.html#logger.flush', 'ple/persistance.py'),
                                 'ple.persistance.Logger.write': ('persistance.html#logger.write', 'ple/persistance.py'),
                                 'ple.persistance._check_pickleable': ('persistance.html#_check_pickleable', 'ple/persistance.py'),
                                 'ple.persistance._module_to_src': ('persistance.html#_module_to_src', 'ple/persistance.py'),
                                 'ple.persistance._reconstruct_persistent_obj': ( 'persistance.html#_reconstruct_persistent_obj',
                                                                                  'ple/persistance.py'),
                                 'ple.persistance._src_to_module': ('persistance.html#_src_to_module', 'ple/persistance.py'),
                                 'ple.persistance.ask_yes_no': ('persistance.html#ask_yes_no', 'ple/persistance.py'),
                                 'ple.persistance.call_func_by_name': ('persistance.html#call_func_by_name', 'ple/persistance.py'),
                                 'ple.persistance.construct_class_by_name': ( 'persistance.html#construct_class_by_name',
                                                                              'ple/persistance.py'),
                                 'ple.persistance.copy_files_and_create_dirs': ( 'persistance.html#copy_files_and_create_dirs',
                                                                                 'ple/persistance.py'),
                                 'ple.persistance.format_time': ('persistance.html#format_time', 'ple/persistance.py'),
                                 'ple.persistance.get_dtype_and_ctype': ('persistance.html#get_dtype_and_ctype', 'ple/persistance.py'),
                                 'ple.persistance.get_module_dir_by_obj_name': ( 'persistance.html#get_module_dir_by_obj_name',
                                                                                 'ple/persistance.py'),
                                 'ple.persistance.get_module_from_obj_name': ( 'persistance.html#get_module_from_obj_name',
                                                                               'ple/persistance.py'),
                                 'ple.persistance.get_obj_by_name': ('persistance.html#get_obj_by_name', 'ple/persistance.py'),
                                 'ple.persistance.get_obj_from_module': ('persistance.html#get_obj_from_module', 'ple/persistance.py'),
                                 'ple.persistance.get_top_level_function_name': ( 'persistance.html#get_top_level_function_name',
                                                                                  'ple/persistance.py'),
                                 'ple.persistance.import_hook': ('persistance.html#import_hook', 'ple/persistance.py'),
                                 'ple.persistance.is_persistent': ('persistance.html#is_persistent', 'ple/persistance.py'),
                                 'ple.persistance.is_pickleable': ('persistance.html#is_pickleable', 'ple/persistance.py'),
                                 'ple.persistance.is_top_level_function': ('persistance.html#is_top_level_function', 'ple/persistance.py'),
                                 'ple.persistance.is_url': ('persistance.html#is_url', 'ple/persistance.py'),
                                 'ple.persistance.list_dir_recursively_with_ignore': ( 'persistance.html#list_dir_recursively_with_ignore',
                                                                                       'ple/persistance.py'),
                                 'ple.persistance.make_cache_dir_path': ('persistance.html#make_cache_dir_path', 'ple/persistance.py'),
                                 'ple.persistance.open_url': ('persistance.html#open_url', 'ple/persistance.py'),
                                 'ple.persistance.persistent_class': ('persistance.html#persistent_class', 'ple/persistance.py'),
                                 'ple.persistance.set_cache_dir': ('persistance.html#set_cache_dir', 'ple/persistance.py'),
                                 'ple.persistance.tuple_product': ('persistance.html#tuple_product', 'ple/persistance.py')},
            'ple.trainer': { 'ple.trainer.get_exp_by_file': ('trainer.html#get_exp_by_file', 'ple/trainer.py'),
                             'ple.trainer.get_rank': ('trainer.html#get_rank', 'ple/trainer.py'),
                             'ple.trainer.get_trainer': ('trainer.html#get_trainer', 'ple/trainer.py'),
                             'ple.trainer.is_interactive': ('trainer.html#is_interactive', 'ple/trainer.py'),
                             'ple.trainer.train': ('trainer.html#train', 'ple/trainer.py')}}}
