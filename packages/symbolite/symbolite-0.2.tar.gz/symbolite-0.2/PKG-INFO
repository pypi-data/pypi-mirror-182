Metadata-Version: 2.1
Name: symbolite
Version: 0.2
Summary: A minimalistic symbolic package.
Author-email: "Hernán E. Grecco" <hernan.grecco@gmail.com>, Mauro Silberberg <maurosilber@gmail.com>
License: MIT License
        
        Copyright (c) 2022 Hernán E. Grecco
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/hgrecco/symbolite
Project-URL: Bug Tracker, https://github.com/hgrecco/symbolite/issues
Keywords: symbolic
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Software Development :: Libraries
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Provides-Extra: test
License-File: LICENSE
License-File: AUTHORS

# symbolite: a minimalistic symbolic python package

______________________________________________________________________

Symbolite allows you to create symbolic mathematical
expressions. Just create a symbol (or more) and operate with them as you
will normally do in Python.

```python
>>> from symbolite.abstract import scalar
>>> x = scalar.Scalar("x")
>>> y = scalar.Scalar("y")
>>> expr1 = x + 3 * y
>>> print(expr1)
(x + (3 * y))
```

You can easily replace the symbols by the desired value.

```python
>>> expr2 = expr1.replace_by_name(x=5, y=2)
>>> print(expr2)
(5 + (3 * 2))
```

The output is still a symbolic expression, which you can evaluate:

```python
>>> expr2.eval()
11
```

Notice that we also got a warning (`No libsl provided, defaulting to 'math'`).
This is because evaluating an expression requires a actual library implementation,
name usually as `libsl`. The default one just uses python's math module.

You can avoid this warning by explicitely providing an `libsl` implementation.

```python
>>> from symbolite.impl.scalar import default
>>> expr2.eval(libscalar=default)
11
```

The cool thing about this is that you can use a different implementation
but let's not get too much ahead of ourselves.

Mathematical functions are available in the `lib` module.

```python
>>> from symbolite.abstract import scalar
>>> expr3 = 3. * scalar.cos(0.5)
>>> print(expr3)
(3.0 * libscalar.cos(0.5))
```

(Functions are named according to the python math module).
Again, this is a symbolic expression until evaluated.

```python
>>> expr3.eval()
2.6327476856711
```

Two other implementations are provided: NumPy and SymPy:

```python
>>> from symbolite.impl.scalar import numpy as libscalar
>>> expr3.eval(libscalar=libscalar)
2.6327476856711
>>> from symbolite.impl.scalar import sympy as libscalar
>>> expr3.eval(libscalar=libscalar)
2.6327476856711
```

(notice that the way that the different libraries round and
display may vary)

In general, all symbols must be replaced by values in order
to evaluate an expression. However, when using an implementation
like SymPy that contains a Scalar object you can still evaluate.

```python
>>> from symbolite.impl.scalar import sympy as libscalar
>>> (3. * scalar.cos(x).eval(libscalar=libscalar))
3.0*cos(x)
```

which is actually a SymPy expression with a SymPy symbol (`x`).

### Installing:

```bash
pip install -U symbolite
```

### FAQ

**Q: Is symbolite a replacement for SymPy?**

**A:** No

**Q: Does it aim to be a replacement for SymPy in the future?**

**A:** No
